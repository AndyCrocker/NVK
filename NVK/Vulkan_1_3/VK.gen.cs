// This file was generated, don't manually edit
namespace Vulkan_1_3;

public static unsafe class VK
{
	public const uint AttachmentUnused = ~0U;
	public const uint False = 0;
	public const float LodClampNone = 1000F;
	public const uint QueueFamilyIgnored = ~0U;
	public const uint RemainingArrayLayers = ~0U;
	public const uint RemainingMipLevels = ~0U;
	public const uint SubpassExternal = ~0U;
	public const uint True = 1;
	public const ulong WholeSize = ~0UL;
	public const uint MaxMemoryTypes = 32;
	public const uint MaxPhysicalDeviceNameSize = 256;
	public const uint UuidSize = 16;
	public const uint MaxExtensionNameSize = 256;
	public const uint MaxDescriptionSize = 256;
	public const uint MaxMemoryHeaps = 16;
	public const uint MaxDeviceGroupSize = 32;
	public const uint LuidSize = 8;
	public const uint QueueFamilyExternal = ~1U;
	public const uint MaxDriverNameSize = 256;
	public const uint MaxDriverInfoSize = 256;
	public const uint KhrSurfaceSpecVersion = 25;
	public const string KhrSurfaceExtensionName = "VK_KHR_surface";
	public const uint KhrSwapchainSpecVersion = 70;
	public const string KhrSwapchainExtensionName = "VK_KHR_swapchain";
	public const uint KhrDisplaySpecVersion = 23;
	public const string KhrDisplayExtensionName = "VK_KHR_display";
	public const uint KhrDisplaySwapchainSpecVersion = 10;
	public const string KhrDisplaySwapchainExtensionName = "VK_KHR_display_swapchain";
	public const uint KhrXlibSurfaceSpecVersion = 6;
	public const string KhrXlibSurfaceExtensionName = "VK_KHR_xlib_surface";
	public const uint KhrXcbSurfaceSpecVersion = 6;
	public const string KhrXcbSurfaceExtensionName = "VK_KHR_xcb_surface";
	public const uint KhrWaylandSurfaceSpecVersion = 6;
	public const string KhrWaylandSurfaceExtensionName = "VK_KHR_wayland_surface";
	public const uint KhrAndroidSurfaceSpecVersion = 6;
	public const string KhrAndroidSurfaceExtensionName = "VK_KHR_android_surface";
	public const uint KhrWin32SurfaceSpecVersion = 6;
	public const string KhrWin32SurfaceExtensionName = "VK_KHR_win32_surface";
	public const uint ExtDebugReportSpecVersion = 10;
	public const string ExtDebugReportExtensionName = "VK_EXT_debug_report";
	public const uint NvGlslShaderSpecVersion = 1;
	public const string NvGlslShaderExtensionName = "VK_NV_glsl_shader";
	public const uint ExtDepthRangeUnrestrictedSpecVersion = 1;
	public const string ExtDepthRangeUnrestrictedExtensionName = "VK_EXT_depth_range_unrestricted";
	public const uint KhrSamplerMirrorClampToEdgeSpecVersion = 3;
	public const string KhrSamplerMirrorClampToEdgeExtensionName = "VK_KHR_sampler_mirror_clamp_to_edge";
	public const uint ImgFilterCubicSpecVersion = 1;
	public const string ImgFilterCubicExtensionName = "VK_IMG_filter_cubic";
	public const uint AmdRasterizationOrderSpecVersion = 1;
	public const string AmdRasterizationOrderExtensionName = "VK_AMD_rasterization_order";
	public const uint AmdShaderTrinaryMinmaxSpecVersion = 1;
	public const string AmdShaderTrinaryMinmaxExtensionName = "VK_AMD_shader_trinary_minmax";
	public const uint AmdShaderExplicitVertexParameterSpecVersion = 1;
	public const string AmdShaderExplicitVertexParameterExtensionName = "VK_AMD_shader_explicit_vertex_parameter";
	public const uint ExtDebugMarkerSpecVersion = 4;
	public const string ExtDebugMarkerExtensionName = "VK_EXT_debug_marker";
	public const uint KhrVideoQueueSpecVersion = 8;
	public const string KhrVideoQueueExtensionName = "VK_KHR_video_queue";
	public const uint KhrVideoDecodeQueueSpecVersion = 7;
	public const string KhrVideoDecodeQueueExtensionName = "VK_KHR_video_decode_queue";
	public const uint AmdGcnShaderSpecVersion = 1;
	public const string AmdGcnShaderExtensionName = "VK_AMD_gcn_shader";
	public const uint NvDedicatedAllocationSpecVersion = 1;
	public const string NvDedicatedAllocationExtensionName = "VK_NV_dedicated_allocation";
	public const uint ExtTransformFeedbackSpecVersion = 1;
	public const string ExtTransformFeedbackExtensionName = "VK_EXT_transform_feedback";
	public const uint NvxBinaryImportSpecVersion = 1;
	public const string NvxBinaryImportExtensionName = "VK_NVX_binary_import";
	public const uint NvxImageViewHandleSpecVersion = 2;
	public const string NvxImageViewHandleExtensionName = "VK_NVX_image_view_handle";
	public const uint AmdDrawIndirectCountSpecVersion = 2;
	public const string AmdDrawIndirectCountExtensionName = "VK_AMD_draw_indirect_count";
	public const uint AmdNegativeViewportHeightSpecVersion = 1;
	public const string AmdNegativeViewportHeightExtensionName = "VK_AMD_negative_viewport_height";
	public const uint AmdGpuShaderHalfFloatSpecVersion = 2;
	public const string AmdGpuShaderHalfFloatExtensionName = "VK_AMD_gpu_shader_half_float";
	public const uint AmdShaderBallotSpecVersion = 1;
	public const string AmdShaderBallotExtensionName = "VK_AMD_shader_ballot";
	public const uint KhrVideoDecodeH264SpecVersion = 8;
	public const string KhrVideoDecodeH264ExtensionName = "VK_KHR_video_decode_h264";
	public const uint AmdTextureGatherBiasLodSpecVersion = 1;
	public const string AmdTextureGatherBiasLodExtensionName = "VK_AMD_texture_gather_bias_lod";
	public const uint AmdShaderInfoSpecVersion = 1;
	public const string AmdShaderInfoExtensionName = "VK_AMD_shader_info";
	public const uint KhrDynamicRenderingSpecVersion = 1;
	public const string KhrDynamicRenderingExtensionName = "VK_KHR_dynamic_rendering";
	public const uint AmdShaderImageLoadStoreLodSpecVersion = 1;
	public const string AmdShaderImageLoadStoreLodExtensionName = "VK_AMD_shader_image_load_store_lod";
	public const uint NvCornerSampledImageSpecVersion = 2;
	public const string NvCornerSampledImageExtensionName = "VK_NV_corner_sampled_image";
	public const uint KhrMultiviewSpecVersion = 1;
	public const string KhrMultiviewExtensionName = "VK_KHR_multiview";
	public const uint ImgFormatPvrtcSpecVersion = 1;
	public const string ImgFormatPvrtcExtensionName = "VK_IMG_format_pvrtc";
	public const uint NvExternalMemoryCapabilitiesSpecVersion = 1;
	public const string NvExternalMemoryCapabilitiesExtensionName = "VK_NV_external_memory_capabilities";
	public const uint NvExternalMemorySpecVersion = 1;
	public const string NvExternalMemoryExtensionName = "VK_NV_external_memory";
	public const uint NvExternalMemoryWin32SpecVersion = 1;
	public const string NvExternalMemoryWin32ExtensionName = "VK_NV_external_memory_win32";
	public const uint NvWin32KeyedMutexSpecVersion = 2;
	public const string NvWin32KeyedMutexExtensionName = "VK_NV_win32_keyed_mutex";
	public const uint KhrGetPhysicalDeviceProperties2SpecVersion = 2;
	public const string KhrGetPhysicalDeviceProperties2ExtensionName = "VK_KHR_get_physical_device_properties2";
	public const uint KhrDeviceGroupSpecVersion = 4;
	public const string KhrDeviceGroupExtensionName = "VK_KHR_device_group";
	public const uint ExtValidationFlagsSpecVersion = 2;
	public const string ExtValidationFlagsExtensionName = "VK_EXT_validation_flags";
	public const uint KhrShaderDrawParametersSpecVersion = 1;
	public const string KhrShaderDrawParametersExtensionName = "VK_KHR_shader_draw_parameters";
	public const uint ExtShaderSubgroupBallotSpecVersion = 1;
	public const string ExtShaderSubgroupBallotExtensionName = "VK_EXT_shader_subgroup_ballot";
	public const uint ExtShaderSubgroupVoteSpecVersion = 1;
	public const string ExtShaderSubgroupVoteExtensionName = "VK_EXT_shader_subgroup_vote";
	public const uint ExtTextureCompressionAstcHdrSpecVersion = 1;
	public const string ExtTextureCompressionAstcHdrExtensionName = "VK_EXT_texture_compression_astc_hdr";
	public const uint ExtAstcDecodeModeSpecVersion = 1;
	public const string ExtAstcDecodeModeExtensionName = "VK_EXT_astc_decode_mode";
	public const uint ExtPipelineRobustnessSpecVersion = 1;
	public const string ExtPipelineRobustnessExtensionName = "VK_EXT_pipeline_robustness";
	public const uint KhrMaintenance1SpecVersion = 2;
	public const string KhrMaintenance1ExtensionName = "VK_KHR_maintenance1";
	[Obsolete("Use MaxDeviceGroupSize")]
	public const uint MaxDeviceGroupSizeKhr = MaxDeviceGroupSize;
	public const uint KhrDeviceGroupCreationSpecVersion = 1;
	public const string KhrDeviceGroupCreationExtensionName = "VK_KHR_device_group_creation";
	[Obsolete("Use LuidSize")]
	public const uint LuidSizeKhr = LuidSize;
	public const uint KhrExternalMemoryCapabilitiesSpecVersion = 1;
	public const string KhrExternalMemoryCapabilitiesExtensionName = "VK_KHR_external_memory_capabilities";
	[Obsolete("Use QueueFamilyExternal")]
	public const uint QueueFamilyExternalKhr = QueueFamilyExternal;
	public const uint KhrExternalMemorySpecVersion = 1;
	public const string KhrExternalMemoryExtensionName = "VK_KHR_external_memory";
	public const uint KhrExternalMemoryWin32SpecVersion = 1;
	public const string KhrExternalMemoryWin32ExtensionName = "VK_KHR_external_memory_win32";
	public const uint KhrExternalMemoryFdSpecVersion = 1;
	public const string KhrExternalMemoryFdExtensionName = "VK_KHR_external_memory_fd";
	public const uint KhrWin32KeyedMutexSpecVersion = 1;
	public const string KhrWin32KeyedMutexExtensionName = "VK_KHR_win32_keyed_mutex";
	public const uint KhrExternalSemaphoreCapabilitiesSpecVersion = 1;
	public const string KhrExternalSemaphoreCapabilitiesExtensionName = "VK_KHR_external_semaphore_capabilities";
	public const uint KhrExternalSemaphoreSpecVersion = 1;
	public const string KhrExternalSemaphoreExtensionName = "VK_KHR_external_semaphore";
	public const uint KhrExternalSemaphoreWin32SpecVersion = 1;
	public const string KhrExternalSemaphoreWin32ExtensionName = "VK_KHR_external_semaphore_win32";
	public const uint KhrExternalSemaphoreFdSpecVersion = 1;
	public const string KhrExternalSemaphoreFdExtensionName = "VK_KHR_external_semaphore_fd";
	public const uint KhrPushDescriptorSpecVersion = 2;
	public const string KhrPushDescriptorExtensionName = "VK_KHR_push_descriptor";
	public const uint ExtConditionalRenderingSpecVersion = 2;
	public const string ExtConditionalRenderingExtensionName = "VK_EXT_conditional_rendering";
	public const uint KhrShaderFloat16Int8SpecVersion = 1;
	public const string KhrShaderFloat16Int8ExtensionName = "VK_KHR_shader_float16_int8";
	public const uint Khr16bitStorageSpecVersion = 1;
	public const string Khr16bitStorageExtensionName = "VK_KHR_16bit_storage";
	public const uint KhrIncrementalPresentSpecVersion = 2;
	public const string KhrIncrementalPresentExtensionName = "VK_KHR_incremental_present";
	public const uint KhrDescriptorUpdateTemplateSpecVersion = 1;
	public const string KhrDescriptorUpdateTemplateExtensionName = "VK_KHR_descriptor_update_template";
	public const uint NvClipSpaceWScalingSpecVersion = 1;
	public const string NvClipSpaceWScalingExtensionName = "VK_NV_clip_space_w_scaling";
	public const uint ExtDirectModeDisplaySpecVersion = 1;
	public const string ExtDirectModeDisplayExtensionName = "VK_EXT_direct_mode_display";
	public const uint ExtDisplaySurfaceCounterSpecVersion = 1;
	public const string ExtDisplaySurfaceCounterExtensionName = "VK_EXT_display_surface_counter";
	public const uint ExtDisplayControlSpecVersion = 1;
	public const string ExtDisplayControlExtensionName = "VK_EXT_display_control";
	public const uint GoogleDisplayTimingSpecVersion = 1;
	public const string GoogleDisplayTimingExtensionName = "VK_GOOGLE_display_timing";
	public const uint NvSampleMaskOverrideCoverageSpecVersion = 1;
	public const string NvSampleMaskOverrideCoverageExtensionName = "VK_NV_sample_mask_override_coverage";
	public const uint NvGeometryShaderPassthroughSpecVersion = 1;
	public const string NvGeometryShaderPassthroughExtensionName = "VK_NV_geometry_shader_passthrough";
	public const uint NvViewportArray2SpecVersion = 1;
	public const string NvViewportArray2ExtensionName = "VK_NV_viewport_array2";
	public const uint NvxMultiviewPerViewAttributesSpecVersion = 1;
	public const string NvxMultiviewPerViewAttributesExtensionName = "VK_NVX_multiview_per_view_attributes";
	public const uint NvViewportSwizzleSpecVersion = 1;
	public const string NvViewportSwizzleExtensionName = "VK_NV_viewport_swizzle";
	public const uint ExtDiscardRectanglesSpecVersion = 1;
	public const string ExtDiscardRectanglesExtensionName = "VK_EXT_discard_rectangles";
	public const uint ExtConservativeRasterizationSpecVersion = 1;
	public const string ExtConservativeRasterizationExtensionName = "VK_EXT_conservative_rasterization";
	public const uint ExtDepthClipEnableSpecVersion = 1;
	public const string ExtDepthClipEnableExtensionName = "VK_EXT_depth_clip_enable";
	public const uint ExtSwapchainColorSpaceSpecVersion = 4;
	public const string ExtSwapchainColorSpaceExtensionName = "VK_EXT_swapchain_colorspace";
	public const uint ExtHdrMetadataSpecVersion = 2;
	public const string ExtHdrMetadataExtensionName = "VK_EXT_hdr_metadata";
	public const uint KhrImagelessFramebufferSpecVersion = 1;
	public const string KhrImagelessFramebufferExtensionName = "VK_KHR_imageless_framebuffer";
	public const uint KhrCreateRenderpass2SpecVersion = 1;
	public const string KhrCreateRenderpass2ExtensionName = "VK_KHR_create_renderpass2";
	public const uint KhrSharedPresentableImageSpecVersion = 1;
	public const string KhrSharedPresentableImageExtensionName = "VK_KHR_shared_presentable_image";
	public const uint KhrExternalFenceCapabilitiesSpecVersion = 1;
	public const string KhrExternalFenceCapabilitiesExtensionName = "VK_KHR_external_fence_capabilities";
	public const uint KhrExternalFenceSpecVersion = 1;
	public const string KhrExternalFenceExtensionName = "VK_KHR_external_fence";
	public const uint KhrExternalFenceWin32SpecVersion = 1;
	public const string KhrExternalFenceWin32ExtensionName = "VK_KHR_external_fence_win32";
	public const uint KhrExternalFenceFdSpecVersion = 1;
	public const string KhrExternalFenceFdExtensionName = "VK_KHR_external_fence_fd";
	public const uint KhrPerformanceQuerySpecVersion = 1;
	public const string KhrPerformanceQueryExtensionName = "VK_KHR_performance_query";
	public const uint KhrMaintenance2SpecVersion = 1;
	public const string KhrMaintenance2ExtensionName = "VK_KHR_maintenance2";
	public const uint KhrGetSurfaceCapabilities2SpecVersion = 1;
	public const string KhrGetSurfaceCapabilities2ExtensionName = "VK_KHR_get_surface_capabilities2";
	public const uint KhrVariablePointersSpecVersion = 1;
	public const string KhrVariablePointersExtensionName = "VK_KHR_variable_pointers";
	public const uint KhrGetDisplayProperties2SpecVersion = 1;
	public const string KhrGetDisplayProperties2ExtensionName = "VK_KHR_get_display_properties2";
	public const uint MvkMacosSurfaceSpecVersion = 3;
	public const string MvkMacosSurfaceExtensionName = "VK_MVK_macos_surface";
	public const uint ExtExternalMemoryDmaBufSpecVersion = 1;
	public const string ExtExternalMemoryDmaBufExtensionName = "VK_EXT_external_memory_dma_buf";
	public const uint QueueFamilyForeignExt = ~2U;
	public const uint ExtQueueFamilyForeignSpecVersion = 1;
	public const string ExtQueueFamilyForeignExtensionName = "VK_EXT_queue_family_foreign";
	public const uint KhrDedicatedAllocationSpecVersion = 3;
	public const string KhrDedicatedAllocationExtensionName = "VK_KHR_dedicated_allocation";
	public const uint ExtDebugUtilsSpecVersion = 2;
	public const string ExtDebugUtilsExtensionName = "VK_EXT_debug_utils";
	public const uint AndroidExternalMemoryAndroidHardwareBufferSpecVersion = 5;
	public const string AndroidExternalMemoryAndroidHardwareBufferExtensionName = "VK_ANDROID_external_memory_android_hardware_buffer";
	public const uint ExtSamplerFilterMinmaxSpecVersion = 2;
	public const string ExtSamplerFilterMinmaxExtensionName = "VK_EXT_sampler_filter_minmax";
	public const uint KhrStorageBufferStorageClassSpecVersion = 1;
	public const string KhrStorageBufferStorageClassExtensionName = "VK_KHR_storage_buffer_storage_class";
	public const uint AmdGpuShaderInt16SpecVersion = 2;
	public const string AmdGpuShaderInt16ExtensionName = "VK_AMD_gpu_shader_int16";
	public const uint AmdMixedAttachmentSamplesSpecVersion = 1;
	public const string AmdMixedAttachmentSamplesExtensionName = "VK_AMD_mixed_attachment_samples";
	public const uint AmdShaderFragmentMaskSpecVersion = 1;
	public const string AmdShaderFragmentMaskExtensionName = "VK_AMD_shader_fragment_mask";
	public const uint ExtInlineUniformBlockSpecVersion = 1;
	public const string ExtInlineUniformBlockExtensionName = "VK_EXT_inline_uniform_block";
	public const uint ExtShaderStencilExportSpecVersion = 1;
	public const string ExtShaderStencilExportExtensionName = "VK_EXT_shader_stencil_export";
	public const uint ExtSampleLocationsSpecVersion = 1;
	public const string ExtSampleLocationsExtensionName = "VK_EXT_sample_locations";
	public const uint KhrRelaxedBlockLayoutSpecVersion = 1;
	public const string KhrRelaxedBlockLayoutExtensionName = "VK_KHR_relaxed_block_layout";
	public const uint KhrGetMemoryRequirements2SpecVersion = 1;
	public const string KhrGetMemoryRequirements2ExtensionName = "VK_KHR_get_memory_requirements2";
	public const uint KhrImageFormatListSpecVersion = 1;
	public const string KhrImageFormatListExtensionName = "VK_KHR_image_format_list";
	public const uint ExtBlendOperationAdvancedSpecVersion = 2;
	public const string ExtBlendOperationAdvancedExtensionName = "VK_EXT_blend_operation_advanced";
	public const uint NvFragmentCoverageToColorSpecVersion = 1;
	public const string NvFragmentCoverageToColorExtensionName = "VK_NV_fragment_coverage_to_color";
	public const uint KhrAccelerationStructureSpecVersion = 13;
	public const string KhrAccelerationStructureExtensionName = "VK_KHR_acceleration_structure";
	public const uint ShaderUnusedKhr = ~0U;
	public const uint KhrRayTracingPipelineSpecVersion = 1;
	public const string KhrRayTracingPipelineExtensionName = "VK_KHR_ray_tracing_pipeline";
	public const uint KhrRayQuerySpecVersion = 1;
	public const string KhrRayQueryExtensionName = "VK_KHR_ray_query";
	public const uint NvFramebufferMixedSamplesSpecVersion = 1;
	public const string NvFramebufferMixedSamplesExtensionName = "VK_NV_framebuffer_mixed_samples";
	public const uint NvFillRectangleSpecVersion = 1;
	public const string NvFillRectangleExtensionName = "VK_NV_fill_rectangle";
	public const uint NvShaderSmBuiltinsSpecVersion = 1;
	public const string NvShaderSmBuiltinsExtensionName = "VK_NV_shader_sm_builtins";
	public const uint ExtPostDepthCoverageSpecVersion = 1;
	public const string ExtPostDepthCoverageExtensionName = "VK_EXT_post_depth_coverage";
	public const uint KhrSamplerYcbcrConversionSpecVersion = 14;
	public const string KhrSamplerYcbcrConversionExtensionName = "VK_KHR_sampler_ycbcr_conversion";
	public const uint KhrBindMemory2SpecVersion = 1;
	public const string KhrBindMemory2ExtensionName = "VK_KHR_bind_memory2";
	public const uint ExtImageDrmFormatModifierSpecVersion = 2;
	public const string ExtImageDrmFormatModifierExtensionName = "VK_EXT_image_drm_format_modifier";
	public const uint ExtValidationCacheSpecVersion = 1;
	public const string ExtValidationCacheExtensionName = "VK_EXT_validation_cache";
	public const uint ExtDescriptorIndexingSpecVersion = 2;
	public const string ExtDescriptorIndexingExtensionName = "VK_EXT_descriptor_indexing";
	public const uint ExtShaderViewportIndexLayerSpecVersion = 1;
	public const string ExtShaderViewportIndexLayerExtensionName = "VK_EXT_shader_viewport_index_layer";
	public const uint NvShadingRateImageSpecVersion = 3;
	public const string NvShadingRateImageExtensionName = "VK_NV_shading_rate_image";
	[Obsolete("Use ShaderUnusedKhr")]
	public const uint ShaderUnusedNv = ShaderUnusedKhr;
	public const uint NvRayTracingSpecVersion = 3;
	public const string NvRayTracingExtensionName = "VK_NV_ray_tracing";
	public const uint NvRepresentativeFragmentTestSpecVersion = 2;
	public const string NvRepresentativeFragmentTestExtensionName = "VK_NV_representative_fragment_test";
	public const uint KhrMaintenance3SpecVersion = 1;
	public const string KhrMaintenance3ExtensionName = "VK_KHR_maintenance3";
	public const uint KhrDrawIndirectCountSpecVersion = 1;
	public const string KhrDrawIndirectCountExtensionName = "VK_KHR_draw_indirect_count";
	public const uint ExtFilterCubicSpecVersion = 3;
	public const string ExtFilterCubicExtensionName = "VK_EXT_filter_cubic";
	public const uint QcomRenderPassShaderResolveSpecVersion = 4;
	public const string QcomRenderPassShaderResolveExtensionName = "VK_QCOM_render_pass_shader_resolve";
	public const uint ExtGlobalPrioritySpecVersion = 2;
	public const string ExtGlobalPriorityExtensionName = "VK_EXT_global_priority";
	public const uint KhrShaderSubgroupExtendedTypesSpecVersion = 1;
	public const string KhrShaderSubgroupExtendedTypesExtensionName = "VK_KHR_shader_subgroup_extended_types";
	public const uint Khr8bitStorageSpecVersion = 1;
	public const string Khr8bitStorageExtensionName = "VK_KHR_8bit_storage";
	public const uint ExtExternalMemoryHostSpecVersion = 1;
	public const string ExtExternalMemoryHostExtensionName = "VK_EXT_external_memory_host";
	public const uint AmdBufferMarkerSpecVersion = 1;
	public const string AmdBufferMarkerExtensionName = "VK_AMD_buffer_marker";
	public const uint KhrShaderAtomicInt64SpecVersion = 1;
	public const string KhrShaderAtomicInt64ExtensionName = "VK_KHR_shader_atomic_int64";
	public const uint KhrShaderClockSpecVersion = 1;
	public const string KhrShaderClockExtensionName = "VK_KHR_shader_clock";
	public const uint AmdPipelineCompilerControlSpecVersion = 1;
	public const string AmdPipelineCompilerControlExtensionName = "VK_AMD_pipeline_compiler_control";
	public const uint ExtCalibratedTimestampsSpecVersion = 2;
	public const string ExtCalibratedTimestampsExtensionName = "VK_EXT_calibrated_timestamps";
	public const uint AmdShaderCorePropertiesSpecVersion = 2;
	public const string AmdShaderCorePropertiesExtensionName = "VK_AMD_shader_core_properties";
	public const uint KhrVideoDecodeH265SpecVersion = 7;
	public const string KhrVideoDecodeH265ExtensionName = "VK_KHR_video_decode_h265";
	public const uint MaxGlobalPrioritySizeKhr = 16;
	public const uint KhrGlobalPrioritySpecVersion = 1;
	public const string KhrGlobalPriorityExtensionName = "VK_KHR_global_priority";
	public const uint AmdMemoryOverallocationBehaviorSpecVersion = 1;
	public const string AmdMemoryOverallocationBehaviorExtensionName = "VK_AMD_memory_overallocation_behavior";
	public const uint ExtVertexAttributeDivisorSpecVersion = 3;
	public const string ExtVertexAttributeDivisorExtensionName = "VK_EXT_vertex_attribute_divisor";
	public const uint ExtPipelineCreationFeedbackSpecVersion = 1;
	public const string ExtPipelineCreationFeedbackExtensionName = "VK_EXT_pipeline_creation_feedback";
	[Obsolete("Use MaxDriverNameSize")]
	public const uint MaxDriverNameSizeKhr = MaxDriverNameSize;
	[Obsolete("Use MaxDriverInfoSize")]
	public const uint MaxDriverInfoSizeKhr = MaxDriverInfoSize;
	public const uint KhrDriverPropertiesSpecVersion = 1;
	public const string KhrDriverPropertiesExtensionName = "VK_KHR_driver_properties";
	public const uint KhrShaderFloatControlsSpecVersion = 4;
	public const string KhrShaderFloatControlsExtensionName = "VK_KHR_shader_float_controls";
	public const uint NvShaderSubgroupPartitionedSpecVersion = 1;
	public const string NvShaderSubgroupPartitionedExtensionName = "VK_NV_shader_subgroup_partitioned";
	public const uint KhrDepthStencilResolveSpecVersion = 1;
	public const string KhrDepthStencilResolveExtensionName = "VK_KHR_depth_stencil_resolve";
	public const uint KhrSwapchainMutableFormatSpecVersion = 1;
	public const string KhrSwapchainMutableFormatExtensionName = "VK_KHR_swapchain_mutable_format";
	public const uint NvComputeShaderDerivativesSpecVersion = 1;
	public const string NvComputeShaderDerivativesExtensionName = "VK_NV_compute_shader_derivatives";
	public const uint NvMeshShaderSpecVersion = 1;
	public const string NvMeshShaderExtensionName = "VK_NV_mesh_shader";
	public const uint NvFragmentShaderBarycentricSpecVersion = 1;
	public const string NvFragmentShaderBarycentricExtensionName = "VK_NV_fragment_shader_barycentric";
	public const uint NvShaderImageFootprintSpecVersion = 2;
	public const string NvShaderImageFootprintExtensionName = "VK_NV_shader_image_footprint";
	public const uint NvScissorExclusiveSpecVersion = 1;
	public const string NvScissorExclusiveExtensionName = "VK_NV_scissor_exclusive";
	public const uint NvDeviceDiagnosticCheckpointsSpecVersion = 2;
	public const string NvDeviceDiagnosticCheckpointsExtensionName = "VK_NV_device_diagnostic_checkpoints";
	public const uint KhrTimelineSemaphoreSpecVersion = 2;
	public const string KhrTimelineSemaphoreExtensionName = "VK_KHR_timeline_semaphore";
	public const uint IntelShaderIntegerFunctions2SpecVersion = 1;
	public const string IntelShaderIntegerFunctions2ExtensionName = "VK_INTEL_shader_integer_functions2";
	public const uint IntelPerformanceQuerySpecVersion = 2;
	public const string IntelPerformanceQueryExtensionName = "VK_INTEL_performance_query";
	public const uint KhrVulkanMemoryModelSpecVersion = 3;
	public const string KhrVulkanMemoryModelExtensionName = "VK_KHR_vulkan_memory_model";
	public const uint ExtPciBusInfoSpecVersion = 2;
	public const string ExtPciBusInfoExtensionName = "VK_EXT_pci_bus_info";
	public const uint AmdDisplayNativeHdrSpecVersion = 1;
	public const string AmdDisplayNativeHdrExtensionName = "VK_AMD_display_native_hdr";
	public const uint KhrShaderTerminateInvocationSpecVersion = 1;
	public const string KhrShaderTerminateInvocationExtensionName = "VK_KHR_shader_terminate_invocation";
	public const uint ExtFragmentDensityMapSpecVersion = 2;
	public const string ExtFragmentDensityMapExtensionName = "VK_EXT_fragment_density_map";
	public const uint ExtScalarBlockLayoutSpecVersion = 1;
	public const string ExtScalarBlockLayoutExtensionName = "VK_EXT_scalar_block_layout";
	public const uint GoogleHlslFunctionality1SpecVersion = 1;
	public const string GoogleHlslFunctionality1ExtensionName = "VK_GOOGLE_hlsl_functionality1";
	public const uint GoogleDecorateStringSpecVersion = 1;
	public const string GoogleDecorateStringExtensionName = "VK_GOOGLE_decorate_string";
	public const uint ExtSubgroupSizeControlSpecVersion = 2;
	public const string ExtSubgroupSizeControlExtensionName = "VK_EXT_subgroup_size_control";
	public const uint KhrFragmentShadingRateSpecVersion = 2;
	public const string KhrFragmentShadingRateExtensionName = "VK_KHR_fragment_shading_rate";
	public const uint AmdShaderCoreProperties2SpecVersion = 1;
	public const string AmdShaderCoreProperties2ExtensionName = "VK_AMD_shader_core_properties2";
	public const uint AmdDeviceCoherentMemorySpecVersion = 1;
	public const string AmdDeviceCoherentMemoryExtensionName = "VK_AMD_device_coherent_memory";
	public const uint ExtShaderImageAtomicInt64SpecVersion = 1;
	public const string ExtShaderImageAtomicInt64ExtensionName = "VK_EXT_shader_image_atomic_int64";
	public const uint KhrSpirv14SpecVersion = 1;
	public const string KhrSpirv14ExtensionName = "VK_KHR_spirv_1_4";
	public const uint ExtMemoryBudgetSpecVersion = 1;
	public const string ExtMemoryBudgetExtensionName = "VK_EXT_memory_budget";
	public const uint ExtMemoryPrioritySpecVersion = 1;
	public const string ExtMemoryPriorityExtensionName = "VK_EXT_memory_priority";
	public const uint KhrSurfaceProtectedCapabilitiesSpecVersion = 1;
	public const string KhrSurfaceProtectedCapabilitiesExtensionName = "VK_KHR_surface_protected_capabilities";
	public const uint NvDedicatedAllocationImageAliasingSpecVersion = 1;
	public const string NvDedicatedAllocationImageAliasingExtensionName = "VK_NV_dedicated_allocation_image_aliasing";
	public const uint KhrSeparateDepthStencilLayoutsSpecVersion = 1;
	public const string KhrSeparateDepthStencilLayoutsExtensionName = "VK_KHR_separate_depth_stencil_layouts";
	public const uint ExtBufferDeviceAddressSpecVersion = 2;
	public const string ExtBufferDeviceAddressExtensionName = "VK_EXT_buffer_device_address";
	public const uint ExtToolingInfoSpecVersion = 1;
	public const string ExtToolingInfoExtensionName = "VK_EXT_tooling_info";
	public const uint ExtSeparateStencilUsageSpecVersion = 1;
	public const string ExtSeparateStencilUsageExtensionName = "VK_EXT_separate_stencil_usage";
	public const uint ExtValidationFeaturesSpecVersion = 5;
	public const string ExtValidationFeaturesExtensionName = "VK_EXT_validation_features";
	public const uint KhrPresentWaitSpecVersion = 1;
	public const string KhrPresentWaitExtensionName = "VK_KHR_present_wait";
	public const uint NvCooperativeMatrixSpecVersion = 1;
	public const string NvCooperativeMatrixExtensionName = "VK_NV_cooperative_matrix";
	public const uint NvCoverageReductionModeSpecVersion = 1;
	public const string NvCoverageReductionModeExtensionName = "VK_NV_coverage_reduction_mode";
	public const uint ExtFragmentShaderInterlockSpecVersion = 1;
	public const string ExtFragmentShaderInterlockExtensionName = "VK_EXT_fragment_shader_interlock";
	public const uint ExtYcbcrImageArraysSpecVersion = 1;
	public const string ExtYcbcrImageArraysExtensionName = "VK_EXT_ycbcr_image_arrays";
	public const uint KhrUniformBufferStandardLayoutSpecVersion = 1;
	public const string KhrUniformBufferStandardLayoutExtensionName = "VK_KHR_uniform_buffer_standard_layout";
	public const uint ExtProvokingVertexSpecVersion = 1;
	public const string ExtProvokingVertexExtensionName = "VK_EXT_provoking_vertex";
	public const uint ExtFullScreenExclusiveSpecVersion = 4;
	public const string ExtFullScreenExclusiveExtensionName = "VK_EXT_full_screen_exclusive";
	public const uint ExtHeadlessSurfaceSpecVersion = 1;
	public const string ExtHeadlessSurfaceExtensionName = "VK_EXT_headless_surface";
	public const uint KhrBufferDeviceAddressSpecVersion = 1;
	public const string KhrBufferDeviceAddressExtensionName = "VK_KHR_buffer_device_address";
	public const uint ExtLineRasterizationSpecVersion = 1;
	public const string ExtLineRasterizationExtensionName = "VK_EXT_line_rasterization";
	public const uint ExtShaderAtomicFloatSpecVersion = 1;
	public const string ExtShaderAtomicFloatExtensionName = "VK_EXT_shader_atomic_float";
	public const uint ExtHostQueryResetSpecVersion = 1;
	public const string ExtHostQueryResetExtensionName = "VK_EXT_host_query_reset";
	public const uint ExtIndexTypeUint8SpecVersion = 1;
	public const string ExtIndexTypeUint8ExtensionName = "VK_EXT_index_type_uint8";
	public const uint ExtExtendedDynamicStateSpecVersion = 1;
	public const string ExtExtendedDynamicStateExtensionName = "VK_EXT_extended_dynamic_state";
	public const uint KhrDeferredHostOperationsSpecVersion = 4;
	public const string KhrDeferredHostOperationsExtensionName = "VK_KHR_deferred_host_operations";
	public const uint KhrPipelineExecutablePropertiesSpecVersion = 1;
	public const string KhrPipelineExecutablePropertiesExtensionName = "VK_KHR_pipeline_executable_properties";
	public const uint ExtShaderAtomicFloat2SpecVersion = 1;
	public const string ExtShaderAtomicFloat2ExtensionName = "VK_EXT_shader_atomic_float2";
	public const uint ExtSurfaceMaintenance1SpecVersion = 1;
	public const string ExtSurfaceMaintenance1ExtensionName = "VK_EXT_surface_maintenance1";
	public const uint ExtSwapchainMaintenance1SpecVersion = 1;
	public const string ExtSwapchainMaintenance1ExtensionName = "VK_EXT_swapchain_maintenance1";
	public const uint ExtShaderDemoteToHelperInvocationSpecVersion = 1;
	public const string ExtShaderDemoteToHelperInvocationExtensionName = "VK_EXT_shader_demote_to_helper_invocation";
	public const uint NvDeviceGeneratedCommandsSpecVersion = 3;
	public const string NvDeviceGeneratedCommandsExtensionName = "VK_NV_device_generated_commands";
	public const uint NvInheritedViewportScissorSpecVersion = 1;
	public const string NvInheritedViewportScissorExtensionName = "VK_NV_inherited_viewport_scissor";
	public const uint KhrShaderIntegerDotProductSpecVersion = 1;
	public const string KhrShaderIntegerDotProductExtensionName = "VK_KHR_shader_integer_dot_product";
	public const uint ExtTexelBufferAlignmentSpecVersion = 1;
	public const string ExtTexelBufferAlignmentExtensionName = "VK_EXT_texel_buffer_alignment";
	public const uint QcomRenderPassTransformSpecVersion = 3;
	public const string QcomRenderPassTransformExtensionName = "VK_QCOM_render_pass_transform";
	public const uint ExtDeviceMemoryReportSpecVersion = 2;
	public const string ExtDeviceMemoryReportExtensionName = "VK_EXT_device_memory_report";
	public const uint ExtAcquireDrmDisplaySpecVersion = 1;
	public const string ExtAcquireDrmDisplayExtensionName = "VK_EXT_acquire_drm_display";
	public const uint ExtRobustness2SpecVersion = 1;
	public const string ExtRobustness2ExtensionName = "VK_EXT_robustness2";
	public const uint ExtCustomBorderColorSpecVersion = 12;
	public const string ExtCustomBorderColorExtensionName = "VK_EXT_custom_border_color";
	public const uint GoogleUserTypeSpecVersion = 1;
	public const string GoogleUserTypeExtensionName = "VK_GOOGLE_user_type";
	public const uint KhrPipelineLibrarySpecVersion = 1;
	public const string KhrPipelineLibraryExtensionName = "VK_KHR_pipeline_library";
	public const uint NvPresentBarrierSpecVersion = 1;
	public const string NvPresentBarrierExtensionName = "VK_NV_present_barrier";
	public const uint KhrShaderNonSemanticInfoSpecVersion = 1;
	public const string KhrShaderNonSemanticInfoExtensionName = "VK_KHR_shader_non_semantic_info";
	public const uint KhrPresentIdSpecVersion = 1;
	public const string KhrPresentIdExtensionName = "VK_KHR_present_id";
	public const uint ExtPrivateDataSpecVersion = 1;
	public const string ExtPrivateDataExtensionName = "VK_EXT_private_data";
	public const uint ExtPipelineCreationCacheControlSpecVersion = 3;
	public const string ExtPipelineCreationCacheControlExtensionName = "VK_EXT_pipeline_creation_cache_control";
	public const uint NvDeviceDiagnosticsConfigSpecVersion = 2;
	public const string NvDeviceDiagnosticsConfigExtensionName = "VK_NV_device_diagnostics_config";
	public const uint QcomRenderPassStoreOpsSpecVersion = 2;
	public const string QcomRenderPassStoreOpsExtensionName = "VK_QCOM_render_pass_store_ops";
	public const uint KhrSynchronization2SpecVersion = 1;
	public const string KhrSynchronization2ExtensionName = "VK_KHR_synchronization2";
	public const uint ExtDescriptorBufferSpecVersion = 1;
	public const string ExtDescriptorBufferExtensionName = "VK_EXT_descriptor_buffer";
	public const uint ExtGraphicsPipelineLibrarySpecVersion = 1;
	public const string ExtGraphicsPipelineLibraryExtensionName = "VK_EXT_graphics_pipeline_library";
	public const uint AmdShaderEarlyAndLateFragmentTestsSpecVersion = 1;
	public const string AmdShaderEarlyAndLateFragmentTestsExtensionName = "VK_AMD_shader_early_and_late_fragment_tests";
	public const uint KhrFragmentShaderBarycentricSpecVersion = 1;
	public const string KhrFragmentShaderBarycentricExtensionName = "VK_KHR_fragment_shader_barycentric";
	public const uint KhrShaderSubgroupUniformControlFlowSpecVersion = 1;
	public const string KhrShaderSubgroupUniformControlFlowExtensionName = "VK_KHR_shader_subgroup_uniform_control_flow";
	public const uint KhrZeroInitializeWorkgroupMemorySpecVersion = 1;
	public const string KhrZeroInitializeWorkgroupMemoryExtensionName = "VK_KHR_zero_initialize_workgroup_memory";
	public const uint NvFragmentShadingRateEnumsSpecVersion = 1;
	public const string NvFragmentShadingRateEnumsExtensionName = "VK_NV_fragment_shading_rate_enums";
	public const uint NvRayTracingMotionBlurSpecVersion = 1;
	public const string NvRayTracingMotionBlurExtensionName = "VK_NV_ray_tracing_motion_blur";
	public const uint ExtMeshShaderSpecVersion = 1;
	public const string ExtMeshShaderExtensionName = "VK_EXT_mesh_shader";
	public const uint ExtYcbcr2plane444FormatsSpecVersion = 1;
	public const string ExtYcbcr2plane444FormatsExtensionName = "VK_EXT_ycbcr_2plane_444_formats";
	public const uint ExtFragmentDensityMap2SpecVersion = 1;
	public const string ExtFragmentDensityMap2ExtensionName = "VK_EXT_fragment_density_map2";
	public const uint QcomRotatedCopyCommandsSpecVersion = 1;
	public const string QcomRotatedCopyCommandsExtensionName = "VK_QCOM_rotated_copy_commands";
	public const uint ExtImageRobustnessSpecVersion = 1;
	public const string ExtImageRobustnessExtensionName = "VK_EXT_image_robustness";
	public const uint KhrWorkgroupMemoryExplicitLayoutSpecVersion = 1;
	public const string KhrWorkgroupMemoryExplicitLayoutExtensionName = "VK_KHR_workgroup_memory_explicit_layout";
	public const uint KhrCopyCommands2SpecVersion = 1;
	public const string KhrCopyCommands2ExtensionName = "VK_KHR_copy_commands2";
	public const uint ExtImageCompressionControlSpecVersion = 1;
	public const string ExtImageCompressionControlExtensionName = "VK_EXT_image_compression_control";
	public const uint ExtAttachmentFeedbackLoopLayoutSpecVersion = 2;
	public const string ExtAttachmentFeedbackLoopLayoutExtensionName = "VK_EXT_attachment_feedback_loop_layout";
	public const uint Ext4444FormatsSpecVersion = 1;
	public const string Ext4444FormatsExtensionName = "VK_EXT_4444_formats";
	public const uint ExtDeviceFaultSpecVersion = 1;
	public const string ExtDeviceFaultExtensionName = "VK_EXT_device_fault";
	public const uint ArmRasterizationOrderAttachmentAccessSpecVersion = 1;
	public const string ArmRasterizationOrderAttachmentAccessExtensionName = "VK_ARM_rasterization_order_attachment_access";
	public const uint ExtRgba10x6FormatsSpecVersion = 1;
	public const string ExtRgba10x6FormatsExtensionName = "VK_EXT_rgba10x6_formats";
	public const uint NvAcquireWinrtDisplaySpecVersion = 1;
	public const string NvAcquireWinrtDisplayExtensionName = "VK_NV_acquire_winrt_display";
	public const uint ValveMutableDescriptorTypeSpecVersion = 1;
	public const string ValveMutableDescriptorTypeExtensionName = "VK_VALVE_mutable_descriptor_type";
	public const uint ExtVertexInputDynamicStateSpecVersion = 2;
	public const string ExtVertexInputDynamicStateExtensionName = "VK_EXT_vertex_input_dynamic_state";
	public const uint ExtPhysicalDeviceDrmSpecVersion = 1;
	public const string ExtPhysicalDeviceDrmExtensionName = "VK_EXT_physical_device_drm";
	public const uint ExtDeviceAddressBindingReportSpecVersion = 1;
	public const string ExtDeviceAddressBindingReportExtensionName = "VK_EXT_device_address_binding_report";
	public const uint ExtDepthClipControlSpecVersion = 1;
	public const string ExtDepthClipControlExtensionName = "VK_EXT_depth_clip_control";
	public const uint ExtPrimitiveTopologyListRestartSpecVersion = 1;
	public const string ExtPrimitiveTopologyListRestartExtensionName = "VK_EXT_primitive_topology_list_restart";
	public const uint KhrFormatFeatureFlags2SpecVersion = 2;
	public const string KhrFormatFeatureFlags2ExtensionName = "VK_KHR_format_feature_flags2";
	public const uint HuaweiSubpassShadingSpecVersion = 2;
	public const string HuaweiSubpassShadingExtensionName = "VK_HUAWEI_subpass_shading";
	public const uint HuaweiInvocationMaskSpecVersion = 1;
	public const string HuaweiInvocationMaskExtensionName = "VK_HUAWEI_invocation_mask";
	public const uint NvExternalMemoryRdmaSpecVersion = 1;
	public const string NvExternalMemoryRdmaExtensionName = "VK_NV_external_memory_rdma";
	public const uint ExtPipelinePropertiesSpecVersion = 1;
	public const string ExtPipelinePropertiesExtensionName = "VK_EXT_pipeline_properties";
	public const uint ExtMultisampledRenderToSingleSampledSpecVersion = 1;
	public const string ExtMultisampledRenderToSingleSampledExtensionName = "VK_EXT_multisampled_render_to_single_sampled";
	public const uint ExtExtendedDynamicState2SpecVersion = 1;
	public const string ExtExtendedDynamicState2ExtensionName = "VK_EXT_extended_dynamic_state2";
	public const uint ExtColorWriteEnableSpecVersion = 1;
	public const string ExtColorWriteEnableExtensionName = "VK_EXT_color_write_enable";
	public const uint ExtPrimitivesGeneratedQuerySpecVersion = 1;
	public const string ExtPrimitivesGeneratedQueryExtensionName = "VK_EXT_primitives_generated_query";
	public const uint KhrRayTracingMaintenance1SpecVersion = 1;
	public const string KhrRayTracingMaintenance1ExtensionName = "VK_KHR_ray_tracing_maintenance1";
	[Obsolete("Use MaxGlobalPrioritySizeKhr")]
	public const uint MaxGlobalPrioritySizeExt = MaxGlobalPrioritySizeKhr;
	public const uint ExtGlobalPriorityQuerySpecVersion = 1;
	public const string ExtGlobalPriorityQueryExtensionName = "VK_EXT_global_priority_query";
	public const uint ExtImageViewMinLodSpecVersion = 1;
	public const string ExtImageViewMinLodExtensionName = "VK_EXT_image_view_min_lod";
	public const uint ExtMultiDrawSpecVersion = 1;
	public const string ExtMultiDrawExtensionName = "VK_EXT_multi_draw";
	public const uint ExtImage2dViewOf3dSpecVersion = 1;
	public const string ExtImage2dViewOf3dExtensionName = "VK_EXT_image_2d_view_of_3d";
	public const uint KhrPortabilityEnumerationSpecVersion = 1;
	public const string KhrPortabilityEnumerationExtensionName = "VK_KHR_portability_enumeration";
	public const uint ExtOpacityMicromapSpecVersion = 2;
	public const string ExtOpacityMicromapExtensionName = "VK_EXT_opacity_micromap";
	public const uint ExtLoadStoreOpNoneSpecVersion = 1;
	public const string ExtLoadStoreOpNoneExtensionName = "VK_EXT_load_store_op_none";
	public const uint HuaweiClusterCullingShaderSpecVersion = 1;
	public const string HuaweiClusterCullingShaderExtensionName = "VK_HUAWEI_cluster_culling_shader";
	public const uint ExtBorderColorSwizzleSpecVersion = 1;
	public const string ExtBorderColorSwizzleExtensionName = "VK_EXT_border_color_swizzle";
	public const uint ExtPageableDeviceLocalMemorySpecVersion = 1;
	public const string ExtPageableDeviceLocalMemoryExtensionName = "VK_EXT_pageable_device_local_memory";
	public const uint KhrMaintenance4SpecVersion = 2;
	public const string KhrMaintenance4ExtensionName = "VK_KHR_maintenance4";
	public const uint ValveDescriptorSetHostMappingSpecVersion = 1;
	public const string ValveDescriptorSetHostMappingExtensionName = "VK_VALVE_descriptor_set_host_mapping";
	public const uint ExtDepthClampZeroOneSpecVersion = 1;
	public const string ExtDepthClampZeroOneExtensionName = "VK_EXT_depth_clamp_zero_one";
	public const uint ExtNonSeamlessCubeMapSpecVersion = 1;
	public const string ExtNonSeamlessCubeMapExtensionName = "VK_EXT_non_seamless_cube_map";
	public const uint QcomFragmentDensityMapOffsetSpecVersion = 1;
	public const string QcomFragmentDensityMapOffsetExtensionName = "VK_QCOM_fragment_density_map_offset";
	public const uint NvCopyMemoryIndirectSpecVersion = 1;
	public const string NvCopyMemoryIndirectExtensionName = "VK_NV_copy_memory_indirect";
	public const uint NvMemoryDecompressionSpecVersion = 1;
	public const string NvMemoryDecompressionExtensionName = "VK_NV_memory_decompression";
	public const uint NvLinearColorAttachmentSpecVersion = 1;
	public const string NvLinearColorAttachmentExtensionName = "VK_NV_linear_color_attachment";
	public const uint GoogleSurfacelessQuerySpecVersion = 2;
	public const string GoogleSurfacelessQueryExtensionName = "VK_GOOGLE_surfaceless_query";
	public const uint ExtImageCompressionControlSwapchainSpecVersion = 1;
	public const string ExtImageCompressionControlSwapchainExtensionName = "VK_EXT_image_compression_control_swapchain";
	public const uint QcomImageProcessingSpecVersion = 1;
	public const string QcomImageProcessingExtensionName = "VK_QCOM_image_processing";
	public const uint ExtExtendedDynamicState3SpecVersion = 2;
	public const string ExtExtendedDynamicState3ExtensionName = "VK_EXT_extended_dynamic_state3";
	public const uint ExtSubpassMergeFeedbackSpecVersion = 2;
	public const string ExtSubpassMergeFeedbackExtensionName = "VK_EXT_subpass_merge_feedback";
	public const uint LunargDirectDriverLoadingSpecVersion = 1;
	public const string LunargDirectDriverLoadingExtensionName = "VK_LUNARG_direct_driver_loading";
	public const uint MaxShaderModuleIdentifierSizeExt = 32;
	public const uint ExtShaderModuleIdentifierSpecVersion = 1;
	public const string ExtShaderModuleIdentifierExtensionName = "VK_EXT_shader_module_identifier";
	public const uint ExtRasterizationOrderAttachmentAccessSpecVersion = 1;
	public const string ExtRasterizationOrderAttachmentAccessExtensionName = "VK_EXT_rasterization_order_attachment_access";
	public const uint NvOpticalFlowSpecVersion = 1;
	public const string NvOpticalFlowExtensionName = "VK_NV_optical_flow";
	public const uint ExtLegacyDitheringSpecVersion = 1;
	public const string ExtLegacyDitheringExtensionName = "VK_EXT_legacy_dithering";
	public const uint ExtPipelineProtectedAccessSpecVersion = 1;
	public const string ExtPipelineProtectedAccessExtensionName = "VK_EXT_pipeline_protected_access";
	public const uint QcomTilePropertiesSpecVersion = 1;
	public const string QcomTilePropertiesExtensionName = "VK_QCOM_tile_properties";
	public const uint SecAmigoProfilingSpecVersion = 1;
	public const string SecAmigoProfilingExtensionName = "VK_SEC_amigo_profiling";
	public const uint QcomMultiviewPerViewViewportsSpecVersion = 1;
	public const string QcomMultiviewPerViewViewportsExtensionName = "VK_QCOM_multiview_per_view_viewports";
	public const uint NvRayTracingInvocationReorderSpecVersion = 1;
	public const string NvRayTracingInvocationReorderExtensionName = "VK_NV_ray_tracing_invocation_reorder";
	public const uint ExtMutableDescriptorTypeSpecVersion = 1;
	public const string ExtMutableDescriptorTypeExtensionName = "VK_EXT_mutable_descriptor_type";
	public const uint ArmShaderCoreBuiltinsSpecVersion = 2;
	public const string ArmShaderCoreBuiltinsExtensionName = "VK_ARM_shader_core_builtins";
	public const uint ExtPipelineLibraryGroupHandlesSpecVersion = 1;
	public const string ExtPipelineLibraryGroupHandlesExtensionName = "VK_EXT_pipeline_library_group_handles";
	public static VkResult CreateInstance(VkInstanceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkInstance instance) => CreateInstance_0(createInfo, allocator, out instance);
	private static delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, VkAllocationCallbacks*, out VkInstance, VkResult> CreateInstance_0;
	public static VkResult CreateInstance(VkInstanceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => CreateInstance_1(createInfo, ref allocator, out instance);
	private static delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, ref VkAllocationCallbacks, out VkInstance, VkResult> CreateInstance_1;
	public static VkResult CreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkInstance instance) => CreateInstance_2(ref createInfo, allocator, out instance);
	private static delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, VkAllocationCallbacks*, out VkInstance, VkResult> CreateInstance_2;
	public static VkResult CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => CreateInstance_3(ref createInfo, ref allocator, out instance);
	private static delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, ref VkAllocationCallbacks, out VkInstance, VkResult> CreateInstance_3;
	public static void DestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator) => DestroyInstance_0(instance, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAllocationCallbacks*, void> DestroyInstance_0;
	public static void DestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator) => DestroyInstance_1(instance, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAllocationCallbacks, void> DestroyInstance_1;
	public static VkResult EnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, [In, Out] VkPhysicalDevice[] physicalDevices) => EnumeratePhysicalDevices_0(instance, physicalDeviceCount, physicalDevices);
	private static delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDevice[], VkResult> EnumeratePhysicalDevices_0;
	public static VkResult EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, [In, Out] VkPhysicalDevice[] physicalDevices) => EnumeratePhysicalDevices_1(instance, ref physicalDeviceCount, physicalDevices);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDevice[], VkResult> EnumeratePhysicalDevices_1;
	public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features) => GetPhysicalDeviceFeatures_0(physicalDevice, out features);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures, void> GetPhysicalDeviceFeatures_0;
	public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties) => GetPhysicalDeviceFormatProperties_0(physicalDevice, format, out formatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties, void> GetPhysicalDeviceFormatProperties_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties) => GetPhysicalDeviceImageFormatProperties_0(physicalDevice, format, type, tiling, usage, flags, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, out VkImageFormatProperties, VkResult> GetPhysicalDeviceImageFormatProperties_0;
	public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties) => GetPhysicalDeviceProperties_0(physicalDevice, out properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties, void> GetPhysicalDeviceProperties_0;
	public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties_0(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties[], void> GetPhysicalDeviceQueueFamilyProperties_0;
	public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties_1(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties[], void> GetPhysicalDeviceQueueFamilyProperties_1;
	public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties) => GetPhysicalDeviceMemoryProperties_0(physicalDevice, out memoryProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties, void> GetPhysicalDeviceMemoryProperties_0;
	public static delegate*<void> GetInstanceProcedureAddress(VkInstance instance, string name) => GetInstanceProcedureAddress_0(instance, name);
	private static delegate* unmanaged[Cdecl]<VkInstance, string, delegate*<void>> GetInstanceProcedureAddress_0;
	public static delegate*<void> GetDeviceProcedureAddress(VkDevice device, string name) => GetDeviceProcedureAddress_0(device, name);
	private static delegate* unmanaged[Cdecl]<VkDevice, string, delegate*<void>> GetDeviceProcedureAddress_0;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDevice device) => CreateDevice_0(physicalDevice, createInfo, allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, out VkDevice, VkResult> CreateDevice_0;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => CreateDevice_1(physicalDevice, createInfo, ref allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, ref VkAllocationCallbacks, out VkDevice, VkResult> CreateDevice_1;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDevice device) => CreateDevice_2(physicalDevice, ref createInfo, allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, VkAllocationCallbacks*, out VkDevice, VkResult> CreateDevice_2;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => CreateDevice_3(physicalDevice, ref createInfo, ref allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, ref VkAllocationCallbacks, out VkDevice, VkResult> CreateDevice_3;
	public static void DestroyDevice(VkDevice device, VkAllocationCallbacks* allocator) => DestroyDevice_0(device, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, void> DestroyDevice_0;
	public static void DestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator) => DestroyDevice_1(device, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, void> DestroyDevice_1;
	public static VkResult EnumerateInstanceExtensionProperties(string layerName, uint* propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateInstanceExtensionProperties_0(layerName, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<string, uint*, VkExtensionProperties[], VkResult> EnumerateInstanceExtensionProperties_0;
	public static VkResult EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateInstanceExtensionProperties_1(layerName, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<string, ref uint, VkExtensionProperties[], VkResult> EnumerateInstanceExtensionProperties_1;
	public static VkResult EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint* propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateDeviceExtensionProperties_0(physicalDevice, layerName, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, uint*, VkExtensionProperties[], VkResult> EnumerateDeviceExtensionProperties_0;
	public static VkResult EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateDeviceExtensionProperties_1(physicalDevice, layerName, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, ref uint, VkExtensionProperties[], VkResult> EnumerateDeviceExtensionProperties_1;
	public static VkResult EnumerateInstanceLayerProperties(uint* propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateInstanceLayerProperties_0(propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<uint*, VkLayerProperties[], VkResult> EnumerateInstanceLayerProperties_0;
	public static VkResult EnumerateInstanceLayerProperties(ref uint propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateInstanceLayerProperties_1(ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<ref uint, VkLayerProperties[], VkResult> EnumerateInstanceLayerProperties_1;
	public static VkResult EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateDeviceLayerProperties_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkLayerProperties[], VkResult> EnumerateDeviceLayerProperties_0;
	public static VkResult EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateDeviceLayerProperties_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkLayerProperties[], VkResult> EnumerateDeviceLayerProperties_1;
	public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue) => GetDeviceQueue_0(device, queueFamilyIndex, queueIndex, out queue);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, uint, out VkQueue, void> GetDeviceQueue_0;
	public static VkResult QueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo[] submits, VkFence fence) => QueueSubmit_0(queue, submitCount, submits, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo[], VkFence, VkResult> QueueSubmit_0;
	public static VkResult QueueWaitIdle(VkQueue queue) => QueueWaitIdle_0(queue);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkResult> QueueWaitIdle_0;
	public static VkResult DeviceWaitIdle(VkDevice device) => DeviceWaitIdle_0(device);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkResult> DeviceWaitIdle_0;
	public static VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, out VkDeviceMemory memory) => AllocateMemory_0(device, allocateInfo, allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, out VkDeviceMemory, VkResult> AllocateMemory_0;
	public static VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => AllocateMemory_1(device, allocateInfo, ref allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult> AllocateMemory_1;
	public static VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks* allocator, out VkDeviceMemory memory) => AllocateMemory_2(device, ref allocateInfo, allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, VkAllocationCallbacks*, out VkDeviceMemory, VkResult> AllocateMemory_2;
	public static VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => AllocateMemory_3(device, ref allocateInfo, ref allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult> AllocateMemory_3;
	public static void FreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator) => FreeMemory_0(device, memory, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void> FreeMemory_0;
	public static void FreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator) => FreeMemory_1(device, memory, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, ref VkAllocationCallbacks, void> FreeMemory_1;
	public static VkResult MapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** data) => MapMemory_0(device, memory, offset, size, flags, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**, VkResult> MapMemory_0;
	public static void UnmapMemory(VkDevice device, VkDeviceMemory memory) => UnmapMemory_0(device, memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void> UnmapMemory_0;
	public static VkResult FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => FlushMappedMemoryRanges_0(device, memoryRangeCount, memoryRanges);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult> FlushMappedMemoryRanges_0;
	public static VkResult InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => InvalidateMappedMemoryRanges_0(device, memoryRangeCount, memoryRanges);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult> InvalidateMappedMemoryRanges_0;
	public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize committedMemoryInBytes) => GetDeviceMemoryCommitment_0(device, memory, out committedMemoryInBytes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, out VkDeviceSize, void> GetDeviceMemoryCommitment_0;
	public static VkResult BindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) => BindBufferMemory_0(device, buffer, memory, memoryOffset);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult> BindBufferMemory_0;
	public static VkResult BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) => BindImageMemory_0(device, image, memory, memoryOffset);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult> BindImageMemory_0;
	public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements) => GetBufferMemoryRequirements_0(device, buffer, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, out VkMemoryRequirements, void> GetBufferMemoryRequirements_0;
	public static void GetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements) => GetImageMemoryRequirements_0(device, image, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkMemoryRequirements, void> GetImageMemoryRequirements_0;
	public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements_0(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements[], void> GetImageSparseMemoryRequirements_0;
	public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements_1(device, image, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref uint, VkSparseImageMemoryRequirements[], void> GetImageSparseMemoryRequirements_1;
	public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, [In, Out] VkSparseImageFormatProperties[] properties) => GetPhysicalDeviceSparseImageFormatProperties_0(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties[], void> GetPhysicalDeviceSparseImageFormatProperties_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties[] properties) => GetPhysicalDeviceSparseImageFormatProperties_1(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, ref uint, VkSparseImageFormatProperties[], void> GetPhysicalDeviceSparseImageFormatProperties_1;
	public static VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence) => QueueBindSparse_0(queue, bindInfoCount, bindInfo, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult> QueueBindSparse_0;
	public static VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence) => QueueBindSparse_1(queue, bindInfoCount, ref bindInfo, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, ref VkBindSparseInfo, VkFence, VkResult> QueueBindSparse_1;
	public static VkResult CreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFence fence) => CreateFence_0(device, createInfo, allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, out VkFence, VkResult> CreateFence_0;
	public static VkResult CreateFence(VkDevice device, VkFenceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => CreateFence_1(device, createInfo, ref allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, ref VkAllocationCallbacks, out VkFence, VkResult> CreateFence_1;
	public static VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFence fence) => CreateFence_2(device, ref createInfo, allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, VkAllocationCallbacks*, out VkFence, VkResult> CreateFence_2;
	public static VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => CreateFence_3(device, ref createInfo, ref allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, ref VkAllocationCallbacks, out VkFence, VkResult> CreateFence_3;
	public static void DestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator) => DestroyFence_0(device, fence, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkAllocationCallbacks*, void> DestroyFence_0;
	public static void DestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator) => DestroyFence_1(device, fence, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, ref VkAllocationCallbacks, void> DestroyFence_1;
	public static VkResult ResetFences(VkDevice device, uint fenceCount, VkFence[] fences) => ResetFences_0(device, fenceCount, fences);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkResult> ResetFences_0;
	public static VkResult GetFenceStatus(VkDevice device, VkFence fence) => GetFenceStatus_0(device, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult> GetFenceStatus_0;
	public static VkResult WaitForFences(VkDevice device, uint fenceCount, VkFence[] fences, VkBool32 waitAll, ulong timeout) => WaitForFences_0(device, fenceCount, fences, waitAll, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkBool32, ulong, VkResult> WaitForFences_0;
	public static VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore) => CreateSemaphore_0(device, createInfo, allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, out VkSemaphore, VkResult> CreateSemaphore_0;
	public static VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => CreateSemaphore_1(device, createInfo, ref allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, ref VkAllocationCallbacks, out VkSemaphore, VkResult> CreateSemaphore_1;
	public static VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore) => CreateSemaphore_2(device, ref createInfo, allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, VkAllocationCallbacks*, out VkSemaphore, VkResult> CreateSemaphore_2;
	public static VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => CreateSemaphore_3(device, ref createInfo, ref allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, ref VkAllocationCallbacks, out VkSemaphore, VkResult> CreateSemaphore_3;
	public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator) => DestroySemaphore_0(device, semaphore, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, VkAllocationCallbacks*, void> DestroySemaphore_0;
	public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator) => DestroySemaphore_1(device, semaphore, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, ref VkAllocationCallbacks, void> DestroySemaphore_1;
	public static VkResult CreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkEvent @event) => CreateEvent_0(device, createInfo, allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, out VkEvent, VkResult> CreateEvent_0;
	public static VkResult CreateEvent(VkDevice device, VkEventCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkEvent @event) => CreateEvent_1(device, createInfo, ref allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, ref VkAllocationCallbacks, out VkEvent, VkResult> CreateEvent_1;
	public static VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkEvent @event) => CreateEvent_2(device, ref createInfo, allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, VkAllocationCallbacks*, out VkEvent, VkResult> CreateEvent_2;
	public static VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkEvent @event) => CreateEvent_3(device, ref createInfo, ref allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, ref VkAllocationCallbacks, out VkEvent, VkResult> CreateEvent_3;
	public static void DestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator) => DestroyEvent_0(device, @event, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkAllocationCallbacks*, void> DestroyEvent_0;
	public static void DestroyEvent(VkDevice device, VkEvent @event, ref VkAllocationCallbacks allocator) => DestroyEvent_1(device, @event, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, ref VkAllocationCallbacks, void> DestroyEvent_1;
	public static VkResult GetEventStatus(VkDevice device, VkEvent @event) => GetEventStatus_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> GetEventStatus_0;
	public static VkResult SetEvent(VkDevice device, VkEvent @event) => SetEvent_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> SetEvent_0;
	public static VkResult ResetEvent(VkDevice device, VkEvent @event) => ResetEvent_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> ResetEvent_0;
	public static VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool) => CreateQueryPool_0(device, createInfo, allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, out VkQueryPool, VkResult> CreateQueryPool_0;
	public static VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => CreateQueryPool_1(device, createInfo, ref allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, ref VkAllocationCallbacks, out VkQueryPool, VkResult> CreateQueryPool_1;
	public static VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool) => CreateQueryPool_2(device, ref createInfo, allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, VkAllocationCallbacks*, out VkQueryPool, VkResult> CreateQueryPool_2;
	public static VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => CreateQueryPool_3(device, ref createInfo, ref allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, ref VkAllocationCallbacks, out VkQueryPool, VkResult> CreateQueryPool_3;
	public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator) => DestroyQueryPool_0(device, queryPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, VkAllocationCallbacks*, void> DestroyQueryPool_0;
	public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator) => DestroyQueryPool_1(device, queryPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, ref VkAllocationCallbacks, void> DestroyQueryPool_1;
	public static VkResult GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* data, VkDeviceSize stride, VkQueryResultFlags flags) => GetQueryPoolResults_0(device, queryPool, firstQuery, queryCount, dataSize, data, stride, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, void*, VkDeviceSize, VkQueryResultFlags, VkResult> GetQueryPoolResults_0;
	public static VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer) => CreateBuffer_0(device, createInfo, allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, out VkBuffer, VkResult> CreateBuffer_0;
	public static VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => CreateBuffer_1(device, createInfo, ref allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, ref VkAllocationCallbacks, out VkBuffer, VkResult> CreateBuffer_1;
	public static VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer) => CreateBuffer_2(device, ref createInfo, allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, VkAllocationCallbacks*, out VkBuffer, VkResult> CreateBuffer_2;
	public static VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => CreateBuffer_3(device, ref createInfo, ref allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, ref VkAllocationCallbacks, out VkBuffer, VkResult> CreateBuffer_3;
	public static void DestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator) => DestroyBuffer_0(device, buffer, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkAllocationCallbacks*, void> DestroyBuffer_0;
	public static void DestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator) => DestroyBuffer_1(device, buffer, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, ref VkAllocationCallbacks, void> DestroyBuffer_1;
	public static VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBufferView view) => CreateBufferView_0(device, createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, out VkBufferView, VkResult> CreateBufferView_0;
	public static VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => CreateBufferView_1(device, createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, ref VkAllocationCallbacks, out VkBufferView, VkResult> CreateBufferView_1;
	public static VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBufferView view) => CreateBufferView_2(device, ref createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, VkAllocationCallbacks*, out VkBufferView, VkResult> CreateBufferView_2;
	public static VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => CreateBufferView_3(device, ref createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, ref VkAllocationCallbacks, out VkBufferView, VkResult> CreateBufferView_3;
	public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator) => DestroyBufferView_0(device, bufferView, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, VkAllocationCallbacks*, void> DestroyBufferView_0;
	public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator) => DestroyBufferView_1(device, bufferView, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, ref VkAllocationCallbacks, void> DestroyBufferView_1;
	public static VkResult CreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImage image) => CreateImage_0(device, createInfo, allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, out VkImage, VkResult> CreateImage_0;
	public static VkResult CreateImage(VkDevice device, VkImageCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => CreateImage_1(device, createInfo, ref allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, ref VkAllocationCallbacks, out VkImage, VkResult> CreateImage_1;
	public static VkResult CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImage image) => CreateImage_2(device, ref createInfo, allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, VkAllocationCallbacks*, out VkImage, VkResult> CreateImage_2;
	public static VkResult CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => CreateImage_3(device, ref createInfo, ref allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, ref VkAllocationCallbacks, out VkImage, VkResult> CreateImage_3;
	public static void DestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator) => DestroyImage_0(device, image, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkAllocationCallbacks*, void> DestroyImage_0;
	public static void DestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator) => DestroyImage_1(device, image, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkAllocationCallbacks, void> DestroyImage_1;
	public static void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, out VkSubresourceLayout layout) => GetImageSubresourceLayout_0(device, image, subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource*, out VkSubresourceLayout, void> GetImageSubresourceLayout_0;
	public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, out VkSubresourceLayout layout) => GetImageSubresourceLayout_1(device, image, ref subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource, out VkSubresourceLayout, void> GetImageSubresourceLayout_1;
	public static VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImageView view) => CreateImageView_0(device, createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, out VkImageView, VkResult> CreateImageView_0;
	public static VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => CreateImageView_1(device, createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, ref VkAllocationCallbacks, out VkImageView, VkResult> CreateImageView_1;
	public static VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImageView view) => CreateImageView_2(device, ref createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, VkAllocationCallbacks*, out VkImageView, VkResult> CreateImageView_2;
	public static VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => CreateImageView_3(device, ref createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, ref VkAllocationCallbacks, out VkImageView, VkResult> CreateImageView_3;
	public static void DestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator) => DestroyImageView_0(device, imageView, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageView, VkAllocationCallbacks*, void> DestroyImageView_0;
	public static void DestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator) => DestroyImageView_1(device, imageView, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageView, ref VkAllocationCallbacks, void> DestroyImageView_1;
	public static VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule) => CreateShaderModule_0(device, createInfo, allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, out VkShaderModule, VkResult> CreateShaderModule_0;
	public static VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => CreateShaderModule_1(device, createInfo, ref allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, ref VkAllocationCallbacks, out VkShaderModule, VkResult> CreateShaderModule_1;
	public static VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule) => CreateShaderModule_2(device, ref createInfo, allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, VkAllocationCallbacks*, out VkShaderModule, VkResult> CreateShaderModule_2;
	public static VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => CreateShaderModule_3(device, ref createInfo, ref allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, ref VkAllocationCallbacks, out VkShaderModule, VkResult> CreateShaderModule_3;
	public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator) => DestroyShaderModule_0(device, shaderModule, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, VkAllocationCallbacks*, void> DestroyShaderModule_0;
	public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator) => DestroyShaderModule_1(device, shaderModule, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, ref VkAllocationCallbacks, void> DestroyShaderModule_1;
	public static VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_0(device, createInfo, allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, out VkPipelineCache, VkResult> CreatePipelineCache_0;
	public static VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_1(device, createInfo, ref allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, ref VkAllocationCallbacks, out VkPipelineCache, VkResult> CreatePipelineCache_1;
	public static VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_2(device, ref createInfo, allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, VkAllocationCallbacks*, out VkPipelineCache, VkResult> CreatePipelineCache_2;
	public static VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_3(device, ref createInfo, ref allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, ref VkAllocationCallbacks, out VkPipelineCache, VkResult> CreatePipelineCache_3;
	public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator) => DestroyPipelineCache_0(device, pipelineCache, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void> DestroyPipelineCache_0;
	public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator) => DestroyPipelineCache_1(device, pipelineCache, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref VkAllocationCallbacks, void> DestroyPipelineCache_1;
	public static VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* dataSize, void* data) => GetPipelineCacheData_0(device, pipelineCache, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nuint*, void*, VkResult> GetPipelineCacheData_0;
	public static VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ref nuint dataSize, void* data) => GetPipelineCacheData_1(device, pipelineCache, ref dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref nuint, void*, VkResult> GetPipelineCacheData_1;
	public static VkResult MergePipelineCaches(VkDevice device, VkPipelineCache destinationCache, uint sourceCacheCount, VkPipelineCache[] sourceCaches) => MergePipelineCaches_0(device, destinationCache, sourceCacheCount, sourceCaches);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkPipelineCache[], VkResult> MergePipelineCaches_0;
	public static VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateGraphicsPipelines_0(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateGraphicsPipelines_0;
	public static VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateGraphicsPipelines_1(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateGraphicsPipelines_1;
	public static VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateComputePipelines_0(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateComputePipelines_0;
	public static VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateComputePipelines_1(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateComputePipelines_1;
	public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator) => DestroyPipeline_0(device, pipeline, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkAllocationCallbacks*, void> DestroyPipeline_0;
	public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator) => DestroyPipeline_1(device, pipeline, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, ref VkAllocationCallbacks, void> DestroyPipeline_1;
	public static VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_0(device, createInfo, allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, out VkPipelineLayout, VkResult> CreatePipelineLayout_0;
	public static VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_1(device, createInfo, ref allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult> CreatePipelineLayout_1;
	public static VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_2(device, ref createInfo, allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, VkAllocationCallbacks*, out VkPipelineLayout, VkResult> CreatePipelineLayout_2;
	public static VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_3(device, ref createInfo, ref allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult> CreatePipelineLayout_3;
	public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator) => DestroyPipelineLayout_0(device, pipelineLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void> DestroyPipelineLayout_0;
	public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator) => DestroyPipelineLayout_1(device, pipelineLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, ref VkAllocationCallbacks, void> DestroyPipelineLayout_1;
	public static VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler) => CreateSampler_0(device, createInfo, allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, out VkSampler, VkResult> CreateSampler_0;
	public static VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => CreateSampler_1(device, createInfo, ref allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, ref VkAllocationCallbacks, out VkSampler, VkResult> CreateSampler_1;
	public static VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler) => CreateSampler_2(device, ref createInfo, allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, VkAllocationCallbacks*, out VkSampler, VkResult> CreateSampler_2;
	public static VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => CreateSampler_3(device, ref createInfo, ref allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, ref VkAllocationCallbacks, out VkSampler, VkResult> CreateSampler_3;
	public static void DestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator) => DestroySampler_0(device, sampler, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSampler, VkAllocationCallbacks*, void> DestroySampler_0;
	public static void DestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator) => DestroySampler_1(device, sampler, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSampler, ref VkAllocationCallbacks, void> DestroySampler_1;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_0(device, createInfo, allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_0;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_1(device, createInfo, ref allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_1;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_2(device, ref createInfo, allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_2;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_3(device, ref createInfo, ref allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_3;
	public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator) => DestroyDescriptorSetLayout_0(device, descriptorSetLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void> DestroyDescriptorSetLayout_0;
	public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator) => DestroyDescriptorSetLayout_1(device, descriptorSetLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, ref VkAllocationCallbacks, void> DestroyDescriptorSetLayout_1;
	public static VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_0(device, createInfo, allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, out VkDescriptorPool, VkResult> CreateDescriptorPool_0;
	public static VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_1(device, createInfo, ref allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult> CreateDescriptorPool_1;
	public static VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_2(device, ref createInfo, allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, VkAllocationCallbacks*, out VkDescriptorPool, VkResult> CreateDescriptorPool_2;
	public static VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_3(device, ref createInfo, ref allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult> CreateDescriptorPool_3;
	public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator) => DestroyDescriptorPool_0(device, descriptorPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void> DestroyDescriptorPool_0;
	public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator) => DestroyDescriptorPool_1(device, descriptorPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, ref VkAllocationCallbacks, void> DestroyDescriptorPool_1;
	public static VkResult ResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) => ResetDescriptorPool_0(device, descriptorPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult> ResetDescriptorPool_0;
	public static VkResult AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, [In, Out] VkDescriptorSet[] descriptorSets) => AllocateDescriptorSets_0(device, allocateInfo, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet[], VkResult> AllocateDescriptorSets_0;
	public static VkResult AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, [In, Out] VkDescriptorSet[] descriptorSets) => AllocateDescriptorSets_1(device, ref allocateInfo, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetAllocateInfo, VkDescriptorSet[], VkResult> AllocateDescriptorSets_1;
	public static VkResult FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet[] descriptorSets) => FreeDescriptorSets_0(device, descriptorPool, descriptorSetCount, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkDescriptorSet[], VkResult> FreeDescriptorSets_0;
	public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies) => UpdateDescriptorSets_0(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkWriteDescriptorSet[], uint, VkCopyDescriptorSet[], void> UpdateDescriptorSets_0;
	public static VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_0(device, createInfo, allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, out VkFramebuffer, VkResult> CreateFramebuffer_0;
	public static VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_1(device, createInfo, ref allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, ref VkAllocationCallbacks, out VkFramebuffer, VkResult> CreateFramebuffer_1;
	public static VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_2(device, ref createInfo, allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, VkAllocationCallbacks*, out VkFramebuffer, VkResult> CreateFramebuffer_2;
	public static VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_3(device, ref createInfo, ref allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, ref VkAllocationCallbacks, out VkFramebuffer, VkResult> CreateFramebuffer_3;
	public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator) => DestroyFramebuffer_0(device, framebuffer, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void> DestroyFramebuffer_0;
	public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator) => DestroyFramebuffer_1(device, framebuffer, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref VkAllocationCallbacks, void> DestroyFramebuffer_1;
	public static VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass_0(device, createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass_0;
	public static VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass_1(device, createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass_1;
	public static VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass_2(device, ref createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass_2;
	public static VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass_3(device, ref createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass_3;
	public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator) => DestroyRenderPass_0(device, renderPass, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkAllocationCallbacks*, void> DestroyRenderPass_0;
	public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator) => DestroyRenderPass_1(device, renderPass, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, ref VkAllocationCallbacks, void> DestroyRenderPass_1;
	public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity) => GetRenderAreaGranularity_0(device, renderPass, out granularity);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, void> GetRenderAreaGranularity_0;
	public static VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool) => CreateCommandPool_0(device, createInfo, allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, out VkCommandPool, VkResult> CreateCommandPool_0;
	public static VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => CreateCommandPool_1(device, createInfo, ref allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, ref VkAllocationCallbacks, out VkCommandPool, VkResult> CreateCommandPool_1;
	public static VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool) => CreateCommandPool_2(device, ref createInfo, allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, VkAllocationCallbacks*, out VkCommandPool, VkResult> CreateCommandPool_2;
	public static VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => CreateCommandPool_3(device, ref createInfo, ref allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, ref VkAllocationCallbacks, out VkCommandPool, VkResult> CreateCommandPool_3;
	public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator) => DestroyCommandPool_0(device, commandPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkAllocationCallbacks*, void> DestroyCommandPool_0;
	public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator) => DestroyCommandPool_1(device, commandPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, ref VkAllocationCallbacks, void> DestroyCommandPool_1;
	public static VkResult ResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) => ResetCommandPool_0(device, commandPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult> ResetCommandPool_0;
	public static VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, [In, Out] VkCommandBuffer[] commandBuffers) => AllocateCommandBuffers_0(device, allocateInfo, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer[], VkResult> AllocateCommandBuffers_0;
	public static VkResult AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, [In, Out] VkCommandBuffer[] commandBuffers) => AllocateCommandBuffers_1(device, ref allocateInfo, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandBufferAllocateInfo, VkCommandBuffer[], VkResult> AllocateCommandBuffers_1;
	public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => FreeCommandBuffers_0(device, commandPool, commandBufferCount, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, VkCommandBuffer[], void> FreeCommandBuffers_0;
	public static VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo) => BeginCommandBuffer_0(commandBuffer, beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult> BeginCommandBuffer_0;
	public static VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo) => BeginCommandBuffer_1(commandBuffer, ref beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCommandBufferBeginInfo, VkResult> BeginCommandBuffer_1;
	public static VkResult EndCommandBuffer(VkCommandBuffer commandBuffer) => EndCommandBuffer_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult> EndCommandBuffer_0;
	public static VkResult ResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) => ResetCommandBuffer_0(commandBuffer, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult> ResetCommandBuffer_0;
	public static void CommandBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) => CommandBindPipeline_0(commandBuffer, pipelineBindPoint, pipeline);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void> CommandBindPipeline_0;
	public static void CommandSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport[] viewports) => CommandSetViewport_0(commandBuffer, firstViewport, viewportCount, viewports);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewport[], void> CommandSetViewport_0;
	public static void CommandSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D[] scissors) => CommandSetScissor_0(commandBuffer, firstScissor, scissorCount, scissors);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void> CommandSetScissor_0;
	public static void CommandSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) => CommandSetLineWidth_0(commandBuffer, lineWidth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void> CommandSetLineWidth_0;
	public static void CommandSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) => CommandSetDepthBias_0(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void> CommandSetDepthBias_0;
	public static void CommandSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants) => CommandSetBlendConstants_0(commandBuffer, blendConstants);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void> CommandSetBlendConstants_0;
	public static void CommandSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) => CommandSetDepthBounds_0(commandBuffer, minDepthBounds, maxDepthBounds);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void> CommandSetDepthBounds_0;
	public static void CommandSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask) => CommandSetStencilCompareMask_0(commandBuffer, faceMask, compareMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilCompareMask_0;
	public static void CommandSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask) => CommandSetStencilWriteMask_0(commandBuffer, faceMask, writeMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilWriteMask_0;
	public static void CommandSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference) => CommandSetStencilReference_0(commandBuffer, faceMask, reference);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilReference_0;
	public static void CommandBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets) => CommandBindDescriptorSets_0(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet[], uint, uint[], void> CommandBindDescriptorSets_0;
	public static void CommandBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) => CommandBindIndexBuffer_0(commandBuffer, buffer, offset, indexType);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void> CommandBindIndexBuffer_0;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets) => CommandBindVertexBuffers_0(commandBuffer, firstBinding, bindingCount, buffers, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void> CommandBindVertexBuffers_0;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets) => CommandBindVertexBuffers_1(commandBuffer, firstBinding, bindingCount, buffers, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, void> CommandBindVertexBuffers_1;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets) => CommandBindVertexBuffers_2(commandBuffer, firstBinding, bindingCount, ref buffers, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, void> CommandBindVertexBuffers_2;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets) => CommandBindVertexBuffers_3(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, void> CommandBindVertexBuffers_3;
	public static void CommandDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance) => CommandDraw_0(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void> CommandDraw_0;
	public static void CommandDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance) => CommandDrawIndexed_0(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void> CommandDrawIndexed_0;
	public static void CommandDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawIndirect_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirect_0;
	public static void CommandDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawIndexedIndirect_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirect_0;
	public static void CommandDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDispatch_0(commandBuffer, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void> CommandDispatch_0;
	public static void CommandDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => CommandDispatchIndirect_0(commandBuffer, buffer, offset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void> CommandDispatchIndirect_0;
	public static void CommandCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer sourceBuffer, VkBuffer destinationBuffer, uint regionCount, VkBufferCopy[] regions) => CommandCopyBuffer_0(commandBuffer, sourceBuffer, destinationBuffer, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy[], void> CommandCopyBuffer_0;
	public static void CommandCopyImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageCopy[] regions) => CommandCopyImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy[], void> CommandCopyImage_0;
	public static void CommandBlitImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageBlit[] regions, VkFilter filter) => CommandBlitImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions, filter);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit[], VkFilter, void> CommandBlitImage_0;
	public static void CommandCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer sourceBuffer, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkBufferImageCopy[] regions) => CommandCopyBufferToImage_0(commandBuffer, sourceBuffer, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy[], void> CommandCopyBufferToImage_0;
	public static void CommandCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkBuffer destinationBuffer, uint regionCount, VkBufferImageCopy[] regions) => CommandCopyImageToBuffer_0(commandBuffer, sourceImage, sourceImageLayout, destinationBuffer, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy[], void> CommandCopyImageToBuffer_0;
	public static void CommandUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize dataSize, void* data) => CommandUpdateBuffer_0(commandBuffer, destinationBuffer, destinationOffset, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void> CommandUpdateBuffer_0;
	public static void CommandFillBuffer(VkCommandBuffer commandBuffer, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize size, uint data) => CommandFillBuffer_0(commandBuffer, destinationBuffer, destinationOffset, size, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void> CommandFillBuffer_0;
	public static void CommandClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearColorImage_0(commandBuffer, image, imageLayout, color, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange[], void> CommandClearColorImage_0;
	public static void CommandClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearColorImage_1(commandBuffer, image, imageLayout, ref color, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearColorValue, uint, VkImageSubresourceRange[], void> CommandClearColorImage_1;
	public static void CommandClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearDepthStencilImage_0(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange[], void> CommandClearDepthStencilImage_0;
	public static void CommandClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearDepthStencilImage_1(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearDepthStencilValue, uint, VkImageSubresourceRange[], void> CommandClearDepthStencilImage_1;
	public static void CommandClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, VkClearRect[] rects) => CommandClearAttachments_0(commandBuffer, attachmentCount, attachments, rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkClearAttachment[], uint, VkClearRect[], void> CommandClearAttachments_0;
	public static void CommandResolveImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageResolve[] regions) => CommandResolveImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve[], void> CommandResolveImage_0;
	public static void CommandSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => CommandSetEvent_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> CommandSetEvent_0;
	public static void CommandResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => CommandResetEvent_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> CommandResetEvent_0;
	public static void CommandWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent[] events, VkPipelineStageFlags sourceStageMask, VkPipelineStageFlags destinationStageMask, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => CommandWaitEvents_0(commandBuffer, eventCount, events, sourceStageMask, destinationStageMask, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void> CommandWaitEvents_0;
	public static void CommandPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags sourceStageMask, VkPipelineStageFlags destinationStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => CommandPipelineBarrier_0(commandBuffer, sourceStageMask, destinationStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void> CommandPipelineBarrier_0;
	public static void CommandBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags) => CommandBeginQuery_0(commandBuffer, queryPool, query, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void> CommandBeginQuery_0;
	public static void CommandEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query) => CommandEndQuery_0(commandBuffer, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void> CommandEndQuery_0;
	public static void CommandResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount) => CommandResetQueryPool_0(commandBuffer, queryPool, firstQuery, queryCount);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void> CommandResetQueryPool_0;
	public static void CommandWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query) => CommandWriteTimestamp_0(commandBuffer, pipelineStage, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void> CommandWriteTimestamp_0;
	public static void CommandCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize stride, VkQueryResultFlags flags) => CommandCopyQueryPoolResults_0(commandBuffer, queryPool, firstQuery, queryCount, destinationBuffer, destinationOffset, stride, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void> CommandCopyQueryPoolResults_0;
	public static void CommandPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values) => CommandPushConstants_0(commandBuffer, layout, stageFlags, offset, size, values);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void> CommandPushConstants_0;
	public static void CommandBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents) => CommandBeginRenderPass_0(commandBuffer, renderPassBegin, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void> CommandBeginRenderPass_0;
	public static void CommandBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents) => CommandBeginRenderPass_1(commandBuffer, ref renderPassBegin, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassContents, void> CommandBeginRenderPass_1;
	public static void CommandNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) => CommandNextSubpass_0(commandBuffer, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void> CommandNextSubpass_0;
	public static void CommandEndRenderPass(VkCommandBuffer commandBuffer) => CommandEndRenderPass_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndRenderPass_0;
	public static void CommandExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => CommandExecuteCommands_0(commandBuffer, commandBufferCount, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkCommandBuffer[], void> CommandExecuteCommands_0;
	public static VkResult EnumerateInstanceVersion([In, Out] uint[] apiVersion) => EnumerateInstanceVersion_0(apiVersion);
	private static delegate* unmanaged[Cdecl]<uint[], VkResult> EnumerateInstanceVersion_0;
	public static VkResult BindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo[] bindInfos) => BindBufferMemory2_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfo[], VkResult> BindBufferMemory2_0;
	public static VkResult BindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo[] bindInfos) => BindImageMemory2_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfo[], VkResult> BindImageMemory2_0;
	public static void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures) => GetDeviceGroupPeerMemoryFeatures_0(device, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlags, void> GetDeviceGroupPeerMemoryFeatures_0;
	public static void CommandSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask) => CommandSetDeviceMask_0(commandBuffer, deviceMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetDeviceMask_0;
	public static void CommandDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDispatchBase_0(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> CommandDispatchBase_0;
	public static VkResult EnumeratePhysicalDeviceGroups(VkInstance instance, uint* physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroups_0(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupProperties[], VkResult> EnumeratePhysicalDeviceGroups_0;
	public static VkResult EnumeratePhysicalDeviceGroups(VkInstance instance, ref uint physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroups_1(instance, ref physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupProperties[], VkResult> EnumeratePhysicalDeviceGroups_1;
	public static void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements) => GetImageMemoryRequirements2_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2*, out VkMemoryRequirements2, void> GetImageMemoryRequirements2_0;
	public static void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => GetImageMemoryRequirements2_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2, out VkMemoryRequirements2, void> GetImageMemoryRequirements2_1;
	public static void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements) => GetBufferMemoryRequirements2_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2*, out VkMemoryRequirements2, void> GetBufferMemoryRequirements2_0;
	public static void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => GetBufferMemoryRequirements2_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2, out VkMemoryRequirements2, void> GetBufferMemoryRequirements2_1;
	public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2_0(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2_0;
	public static void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2_1(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, ref uint, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2_1;
	public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2_2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, uint*, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2_2;
	public static void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2_3(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, ref uint, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2_3;
	public static void GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features) => GetPhysicalDeviceFeatures2_0(physicalDevice, out features);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2, void> GetPhysicalDeviceFeatures2_0;
	public static void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties) => GetPhysicalDeviceProperties2_0(physicalDevice, out properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2, void> GetPhysicalDeviceProperties2_0;
	public static void GetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties) => GetPhysicalDeviceFormatProperties2_0(physicalDevice, format, out formatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2, void> GetPhysicalDeviceFormatProperties2_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2_0(physicalDevice, imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, out VkImageFormatProperties2, VkResult> GetPhysicalDeviceImageFormatProperties2_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2_1(physicalDevice, ref imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2, out VkImageFormatProperties2, VkResult> GetPhysicalDeviceImageFormatProperties2_1;
	public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2_0(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2[], void> GetPhysicalDeviceQueueFamilyProperties2_0;
	public static void GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2_1(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2[], void> GetPhysicalDeviceQueueFamilyProperties2_1;
	public static void GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties) => GetPhysicalDeviceMemoryProperties2_0(physicalDevice, out memoryProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2, void> GetPhysicalDeviceMemoryProperties2_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2_0(physicalDevice, formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2_1(physicalDevice, formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, ref uint, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2_1;
	public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2_2(physicalDevice, ref formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, uint*, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2_2;
	public static void GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2_3(physicalDevice, ref formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, ref uint, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2_3;
	public static void TrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) => TrimCommandPool_0(device, commandPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void> TrimCommandPool_0;
	public static void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, out VkQueue queue) => GetDeviceQueue2_0(device, queueInfo, out queue);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceQueueInfo2*, out VkQueue, void> GetDeviceQueue2_0;
	public static void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 queueInfo, out VkQueue queue) => GetDeviceQueue2_1(device, ref queueInfo, out queue);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceQueueInfo2, out VkQueue, void> GetDeviceQueue2_1;
	public static VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversion_0(device, createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, VkResult> CreateSamplerYcbcrConversion_0;
	public static VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversion_1(device, createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, VkResult> CreateSamplerYcbcrConversion_1;
	public static VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversion_2(device, ref createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, VkResult> CreateSamplerYcbcrConversion_2;
	public static VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversion_3(device, ref createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, VkResult> CreateSamplerYcbcrConversion_3;
	public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator) => DestroySamplerYcbcrConversion_0(device, ycbcrConversion, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void> DestroySamplerYcbcrConversion_0;
	public static void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator) => DestroySamplerYcbcrConversion_1(device, ycbcrConversion, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, ref VkAllocationCallbacks, void> DestroySamplerYcbcrConversion_1;
	public static VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplate_0(device, createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, VkResult> CreateDescriptorUpdateTemplate_0;
	public static VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplate_1(device, createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, VkResult> CreateDescriptorUpdateTemplate_1;
	public static VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplate_2(device, ref createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, VkResult> CreateDescriptorUpdateTemplate_2;
	public static VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplate_3(device, ref createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, VkResult> CreateDescriptorUpdateTemplate_3;
	public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator) => DestroyDescriptorUpdateTemplate_0(device, descriptorUpdateTemplate, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void> DestroyDescriptorUpdateTemplate_0;
	public static void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator) => DestroyDescriptorUpdateTemplate_1(device, descriptorUpdateTemplate, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, ref VkAllocationCallbacks, void> DestroyDescriptorUpdateTemplate_1;
	public static void UpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data) => UpdateDescriptorSetWithTemplate_0(device, descriptorSet, descriptorUpdateTemplate, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void> UpdateDescriptorSetWithTemplate_0;
	public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => GetPhysicalDeviceExternalBufferProperties_0(physicalDevice, externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, out VkExternalBufferProperties, void> GetPhysicalDeviceExternalBufferProperties_0;
	public static void GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => GetPhysicalDeviceExternalBufferProperties_1(physicalDevice, ref externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfo, out VkExternalBufferProperties, void> GetPhysicalDeviceExternalBufferProperties_1;
	public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => GetPhysicalDeviceExternalFenceProperties_0(physicalDevice, externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, out VkExternalFenceProperties, void> GetPhysicalDeviceExternalFenceProperties_0;
	public static void GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => GetPhysicalDeviceExternalFenceProperties_1(physicalDevice, ref externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfo, out VkExternalFenceProperties, void> GetPhysicalDeviceExternalFenceProperties_1;
	public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphoreProperties_0(physicalDevice, externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, out VkExternalSemaphoreProperties, void> GetPhysicalDeviceExternalSemaphoreProperties_0;
	public static void GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphoreProperties_1(physicalDevice, ref externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo, out VkExternalSemaphoreProperties, void> GetPhysicalDeviceExternalSemaphoreProperties_1;
	public static void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, out VkDescriptorSetLayoutSupport support) => GetDescriptorSetLayoutSupport_0(device, createInfo, out support);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, out VkDescriptorSetLayoutSupport, void> GetDescriptorSetLayoutSupport_0;
	public static void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, out VkDescriptorSetLayoutSupport support) => GetDescriptorSetLayoutSupport_1(device, ref createInfo, out support);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, out VkDescriptorSetLayoutSupport, void> GetDescriptorSetLayoutSupport_1;
	public static void CommandDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndirectCount_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirectCount_0;
	public static void CommandDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndexedIndirectCount_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirectCount_0;
	public static VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass2_0(device, createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass2_0;
	public static VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass2_1(device, createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass2_1;
	public static VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass2_2(device, ref createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass2_2;
	public static VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass2_3(device, ref createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass2_3;
	public static void CommandBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo) => CommandBeginRenderPass2_0(commandBuffer, renderPassBegin, subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> CommandBeginRenderPass2_0;
	public static void CommandBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => CommandBeginRenderPass2_1(commandBuffer, renderPassBegin, ref subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, ref VkSubpassBeginInfo, void> CommandBeginRenderPass2_1;
	public static void CommandBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo) => CommandBeginRenderPass2_2(commandBuffer, ref renderPassBegin, subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassBeginInfo*, void> CommandBeginRenderPass2_2;
	public static void CommandBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => CommandBeginRenderPass2_3(commandBuffer, ref renderPassBegin, ref subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, ref VkSubpassBeginInfo, void> CommandBeginRenderPass2_3;
	public static void CommandNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo) => CommandNextSubpass2_0(commandBuffer, subpassBeginInfo, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> CommandNextSubpass2_0;
	public static void CommandNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => CommandNextSubpass2_1(commandBuffer, subpassBeginInfo, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, ref VkSubpassEndInfo, void> CommandNextSubpass2_1;
	public static void CommandNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo) => CommandNextSubpass2_2(commandBuffer, ref subpassBeginInfo, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, VkSubpassEndInfo*, void> CommandNextSubpass2_2;
	public static void CommandNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => CommandNextSubpass2_3(commandBuffer, ref subpassBeginInfo, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, ref VkSubpassEndInfo, void> CommandNextSubpass2_3;
	public static void CommandEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo) => CommandEndRenderPass2_0(commandBuffer, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassEndInfo*, void> CommandEndRenderPass2_0;
	public static void CommandEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo) => CommandEndRenderPass2_1(commandBuffer, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassEndInfo, void> CommandEndRenderPass2_1;
	public static void ResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount) => ResetQueryPool_0(device, queryPool, firstQuery, queryCount);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void> ResetQueryPool_0;
	public static VkResult GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, out ulong value) => GetSemaphoreCounterValue_0(device, semaphore, out value);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, out ulong, VkResult> GetSemaphoreCounterValue_0;
	public static VkResult WaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout) => WaitSemaphores_0(device, waitInfo, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult> WaitSemaphores_0;
	public static VkResult WaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout) => WaitSemaphores_1(device, ref waitInfo, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreWaitInfo, ulong, VkResult> WaitSemaphores_1;
	public static VkResult SignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* signalInfo) => SignalSemaphore_0(device, signalInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreSignalInfo*, VkResult> SignalSemaphore_0;
	public static VkResult SignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo signalInfo) => SignalSemaphore_1(device, ref signalInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreSignalInfo, VkResult> SignalSemaphore_1;
	public static VkDeviceAddress GetBufferDeviceAddress(VkDevice device, out VkBufferDeviceAddressInfo info) => GetBufferDeviceAddress_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, VkDeviceAddress> GetBufferDeviceAddress_0;
	public static ulong GetBufferOpaqueCaptureAddress(VkDevice device, out VkBufferDeviceAddressInfo info) => GetBufferOpaqueCaptureAddress_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, ulong> GetBufferOpaqueCaptureAddress_0;
	public static ulong GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, out VkDeviceMemoryOpaqueCaptureAddressInfo info) => GetDeviceMemoryOpaqueCaptureAddress_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceMemoryOpaqueCaptureAddressInfo, ulong> GetDeviceMemoryOpaqueCaptureAddress_0;
	public static VkResult GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint* toolCount, [In, Out] VkPhysicalDeviceToolProperties[] toolProperties) => GetPhysicalDeviceToolProperties_0(physicalDevice, toolCount, toolProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties[], VkResult> GetPhysicalDeviceToolProperties_0;
	public static VkResult GetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, ref uint toolCount, [In, Out] VkPhysicalDeviceToolProperties[] toolProperties) => GetPhysicalDeviceToolProperties_1(physicalDevice, ref toolCount, toolProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceToolProperties[], VkResult> GetPhysicalDeviceToolProperties_1;
	public static VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlot_0(device, createInfo, allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, out VkPrivateDataSlot, VkResult> CreatePrivateDataSlot_0;
	public static VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlot_1(device, createInfo, ref allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, ref VkAllocationCallbacks, out VkPrivateDataSlot, VkResult> CreatePrivateDataSlot_1;
	public static VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlot_2(device, ref createInfo, allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, VkAllocationCallbacks*, out VkPrivateDataSlot, VkResult> CreatePrivateDataSlot_2;
	public static VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlot_3(device, ref createInfo, ref allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, ref VkAllocationCallbacks, out VkPrivateDataSlot, VkResult> CreatePrivateDataSlot_3;
	public static void DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* allocator) => DestroyPrivateDataSlot_0(device, privateDataSlot, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void> DestroyPrivateDataSlot_0;
	public static void DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, ref VkAllocationCallbacks allocator) => DestroyPrivateDataSlot_1(device, privateDataSlot, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, ref VkAllocationCallbacks, void> DestroyPrivateDataSlot_1;
	public static VkResult SetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data) => SetPrivateData_0(device, objectType, objectHandle, privateDataSlot, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult> SetPrivateData_0;
	public static void GetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, out ulong data) => GetPrivateData_0(device, objectType, objectHandle, privateDataSlot, out data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, out ulong, void> GetPrivateData_0;
	public static void CommandSetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* dependencyInfo) => CommandSetEvent2_0(commandBuffer, @event, dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkDependencyInfo*, void> CommandSetEvent2_0;
	public static void CommandSetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, ref VkDependencyInfo dependencyInfo) => CommandSetEvent2_1(commandBuffer, @event, ref dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ref VkDependencyInfo, void> CommandSetEvent2_1;
	public static void CommandResetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask) => CommandResetEvent2_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void> CommandResetEvent2_0;
	public static void CommandWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent[] events, VkDependencyInfo[] dependencyInfos) => CommandWaitEvents2_0(commandBuffer, eventCount, events, dependencyInfos);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkDependencyInfo[], void> CommandWaitEvents2_0;
	public static void CommandPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* dependencyInfo) => CommandPipelineBarrier2_0(commandBuffer, dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDependencyInfo*, void> CommandPipelineBarrier2_0;
	public static void CommandPipelineBarrier2(VkCommandBuffer commandBuffer, ref VkDependencyInfo dependencyInfo) => CommandPipelineBarrier2_1(commandBuffer, ref dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDependencyInfo, void> CommandPipelineBarrier2_1;
	public static void CommandWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query) => CommandWriteTimestamp2_0(commandBuffer, stage, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void> CommandWriteTimestamp2_0;
	public static VkResult QueueSubmit2(VkQueue queue, uint submitCount, VkSubmitInfo2[] submits, VkFence fence) => QueueSubmit2_0(queue, submitCount, submits, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo2[], VkFence, VkResult> QueueSubmit2_0;
	public static void CommandCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* copyBufferInfo) => CommandCopyBuffer2_0(commandBuffer, copyBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferInfo2*, void> CommandCopyBuffer2_0;
	public static void CommandCopyBuffer2(VkCommandBuffer commandBuffer, ref VkCopyBufferInfo2 copyBufferInfo) => CommandCopyBuffer2_1(commandBuffer, ref copyBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferInfo2, void> CommandCopyBuffer2_1;
	public static void CommandCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* copyImageInfo) => CommandCopyImage2_0(commandBuffer, copyImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageInfo2*, void> CommandCopyImage2_0;
	public static void CommandCopyImage2(VkCommandBuffer commandBuffer, ref VkCopyImageInfo2 copyImageInfo) => CommandCopyImage2_1(commandBuffer, ref copyImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageInfo2, void> CommandCopyImage2_1;
	public static void CommandCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* copyBufferToImageInfo) => CommandCopyBufferToImage2_0(commandBuffer, copyBufferToImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferToImageInfo2*, void> CommandCopyBufferToImage2_0;
	public static void CommandCopyBufferToImage2(VkCommandBuffer commandBuffer, ref VkCopyBufferToImageInfo2 copyBufferToImageInfo) => CommandCopyBufferToImage2_1(commandBuffer, ref copyBufferToImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferToImageInfo2, void> CommandCopyBufferToImage2_1;
	public static void CommandCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* copyImageToBufferInfo) => CommandCopyImageToBuffer2_0(commandBuffer, copyImageToBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageToBufferInfo2*, void> CommandCopyImageToBuffer2_0;
	public static void CommandCopyImageToBuffer2(VkCommandBuffer commandBuffer, ref VkCopyImageToBufferInfo2 copyImageToBufferInfo) => CommandCopyImageToBuffer2_1(commandBuffer, ref copyImageToBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageToBufferInfo2, void> CommandCopyImageToBuffer2_1;
	public static void CommandBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* blitImageInfo) => CommandBlitImage2_0(commandBuffer, blitImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBlitImageInfo2*, void> CommandBlitImage2_0;
	public static void CommandBlitImage2(VkCommandBuffer commandBuffer, ref VkBlitImageInfo2 blitImageInfo) => CommandBlitImage2_1(commandBuffer, ref blitImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkBlitImageInfo2, void> CommandBlitImage2_1;
	public static void CommandResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* resolveImageInfo) => CommandResolveImage2_0(commandBuffer, resolveImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResolveImageInfo2*, void> CommandResolveImage2_0;
	public static void CommandResolveImage2(VkCommandBuffer commandBuffer, ref VkResolveImageInfo2 resolveImageInfo) => CommandResolveImage2_1(commandBuffer, ref resolveImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkResolveImageInfo2, void> CommandResolveImage2_1;
	public static void CommandBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* renderingInfo) => CommandBeginRendering_0(commandBuffer, renderingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInfo*, void> CommandBeginRendering_0;
	public static void CommandBeginRendering(VkCommandBuffer commandBuffer, ref VkRenderingInfo renderingInfo) => CommandBeginRendering_1(commandBuffer, ref renderingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderingInfo, void> CommandBeginRendering_1;
	public static void CommandEndRendering(VkCommandBuffer commandBuffer) => CommandEndRendering_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndRendering_0;
	public static void CommandSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) => CommandSetCullMode_0(commandBuffer, cullMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void> CommandSetCullMode_0;
	public static void CommandSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) => CommandSetFrontFace_0(commandBuffer, frontFace);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void> CommandSetFrontFace_0;
	public static void CommandSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) => CommandSetPrimitiveTopology_0(commandBuffer, primitiveTopology);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void> CommandSetPrimitiveTopology_0;
	public static void CommandSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport[] viewports) => CommandSetViewportWithCount_0(commandBuffer, viewportCount, viewports);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkViewport[], void> CommandSetViewportWithCount_0;
	public static void CommandSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D[] scissors) => CommandSetScissorWithCount_0(commandBuffer, scissorCount, scissors);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkRect2D[], void> CommandSetScissorWithCount_0;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_0(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2_0;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_1(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2_1;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_2(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2_2;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_3(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2_3;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_4(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2_4;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_5(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2_5;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_6(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2_6;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_7(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2_7;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_8(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2_8;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_9(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2_9;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_10(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2_10;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_11(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2_11;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_12(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2_12;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_13(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2_13;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2_14(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2_14;
	public static void CommandBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2_15(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2_15;
	public static void CommandSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) => CommandSetDepthTestEnable_0(commandBuffer, depthTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthTestEnable_0;
	public static void CommandSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) => CommandSetDepthWriteEnable_0(commandBuffer, depthWriteEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthWriteEnable_0;
	public static void CommandSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) => CommandSetDepthCompareOp_0(commandBuffer, depthCompareOp);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void> CommandSetDepthCompareOp_0;
	public static void CommandSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) => CommandSetDepthBoundsTestEnable_0(commandBuffer, depthBoundsTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthBoundsTestEnable_0;
	public static void CommandSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) => CommandSetStencilTestEnable_0(commandBuffer, stencilTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetStencilTestEnable_0;
	public static void CommandSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) => CommandSetStencilOp_0(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> CommandSetStencilOp_0;
	public static void CommandSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) => CommandSetRasterizerDiscardEnable_0(commandBuffer, rasterizerDiscardEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetRasterizerDiscardEnable_0;
	public static void CommandSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) => CommandSetDepthBiasEnable_0(commandBuffer, depthBiasEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthBiasEnable_0;
	public static void CommandSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) => CommandSetPrimitiveRestartEnable_0(commandBuffer, primitiveRestartEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetPrimitiveRestartEnable_0;
	public static void GetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceBufferMemoryRequirements_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceBufferMemoryRequirements*, out VkMemoryRequirements2, void> GetDeviceBufferMemoryRequirements_0;
	public static void GetDeviceBufferMemoryRequirements(VkDevice device, ref VkDeviceBufferMemoryRequirements info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceBufferMemoryRequirements_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceBufferMemoryRequirements, out VkMemoryRequirements2, void> GetDeviceBufferMemoryRequirements_1;
	public static void GetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceImageMemoryRequirements_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, out VkMemoryRequirements2, void> GetDeviceImageMemoryRequirements_0;
	public static void GetDeviceImageMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceImageMemoryRequirements_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, out VkMemoryRequirements2, void> GetDeviceImageMemoryRequirements_1;
	public static void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirements_0(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirements_0;
	public static void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirements_1(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, ref uint, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirements_1;
	public static void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirements_2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, uint*, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirements_2;
	public static void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirements_3(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, ref uint, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirements_3;
	public static void DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator) => DestroySurfaceKHR_0(instance, surface, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void> DestroySurfaceKHR_0;
	public static void DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, ref VkAllocationCallbacks allocator) => DestroySurfaceKHR_1(instance, surface, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, ref VkAllocationCallbacks, void> DestroySurfaceKHR_1;
	public static VkResult GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 supported) => GetPhysicalDeviceSurfaceSupportKHR_0(physicalDevice, queueFamilyIndex, surface, out supported);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkSurfaceKHR, out VkBool32, VkResult> GetPhysicalDeviceSurfaceSupportKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilitiesKHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilitiesKHR_0(physicalDevice, surface, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilitiesKHR, VkResult> GetPhysicalDeviceSurfaceCapabilitiesKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* surfaceFormatCount, [In, Out] VkSurfaceFormatKHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormatsKHR_0(physicalDevice, surface, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR[], VkResult> GetPhysicalDeviceSurfaceFormatsKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormatKHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormatsKHR_1(physicalDevice, surface, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkSurfaceFormatKHR[], VkResult> GetPhysicalDeviceSurfaceFormatsKHR_1;
	public static VkResult GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModesKHR_0(physicalDevice, surface, presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModesKHR_0;
	public static VkResult GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModesKHR_1(physicalDevice, surface, ref presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModesKHR_1;
	public static VkResult CreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_0(device, createInfo, allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_0;
	public static VkResult CreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_1(device, createInfo, ref allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_1;
	public static VkResult CreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_2(device, ref createInfo, allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_2;
	public static VkResult CreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_3(device, ref createInfo, ref allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_3;
	public static void DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* allocator) => DestroySwapchainKHR_0(device, swapchain, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void> DestroySwapchainKHR_0;
	public static void DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, ref VkAllocationCallbacks allocator) => DestroySwapchainKHR_1(device, swapchain, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref VkAllocationCallbacks, void> DestroySwapchainKHR_1;
	public static VkResult GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint* swapchainImageCount, [In, Out] VkImage[] swapchainImages) => GetSwapchainImagesKHR_0(device, swapchain, swapchainImageCount, swapchainImages);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkImage[], VkResult> GetSwapchainImagesKHR_0;
	public static VkResult GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, ref uint swapchainImageCount, [In, Out] VkImage[] swapchainImages) => GetSwapchainImagesKHR_1(device, swapchain, ref swapchainImageCount, swapchainImages);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkImage[], VkResult> GetSwapchainImagesKHR_1;
	public static VkResult AcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, out uint imageIndex) => AcquireNextImageKHR_0(device, swapchain, timeout, semaphore, fence, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, out uint, VkResult> AcquireNextImageKHR_0;
	public static VkResult QueuePresentKHR(VkQueue queue, VkPresentInfoKHR* presentInfo) => QueuePresentKHR_0(queue, presentInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkPresentInfoKHR*, VkResult> QueuePresentKHR_0;
	public static VkResult QueuePresentKHR(VkQueue queue, ref VkPresentInfoKHR presentInfo) => QueuePresentKHR_1(queue, ref presentInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref VkPresentInfoKHR, VkResult> QueuePresentKHR_1;
	public static VkResult GetDeviceGroupPresentCapabilitiesKHR(VkDevice device, out VkDeviceGroupPresentCapabilitiesKHR deviceGroupPresentCapabilities) => GetDeviceGroupPresentCapabilitiesKHR_0(device, out deviceGroupPresentCapabilities);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceGroupPresentCapabilitiesKHR, VkResult> GetDeviceGroupPresentCapabilitiesKHR_0;
	public static VkResult GetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, out VkDeviceGroupPresentModeFlagsKHR modes) => GetDeviceGroupSurfacePresentModesKHR_0(device, surface, out modes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSurfaceKHR, out VkDeviceGroupPresentModeFlagsKHR, VkResult> GetDeviceGroupSurfacePresentModesKHR_0;
	public static VkResult GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* rectCount, [In, Out] VkRect2D[] rects) => GetPhysicalDevicePresentRectanglesKHR_0(physicalDevice, surface, rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D[], VkResult> GetPhysicalDevicePresentRectanglesKHR_0;
	public static VkResult GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint rectCount, [In, Out] VkRect2D[] rects) => GetPhysicalDevicePresentRectanglesKHR_1(physicalDevice, surface, ref rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkRect2D[], VkResult> GetPhysicalDevicePresentRectanglesKHR_1;
	public static VkResult AcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* acquireInfo, out uint imageIndex) => AcquireNextImage2KHR_0(device, acquireInfo, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAcquireNextImageInfoKHR*, out uint, VkResult> AcquireNextImage2KHR_0;
	public static VkResult AcquireNextImage2KHR(VkDevice device, ref VkAcquireNextImageInfoKHR acquireInfo, out uint imageIndex) => AcquireNextImage2KHR_1(device, ref acquireInfo, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireNextImageInfoKHR, out uint, VkResult> AcquireNextImage2KHR_1;
	public static VkResult GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayPropertiesKHR[] properties) => GetPhysicalDeviceDisplayPropertiesKHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPropertiesKHR_0;
	public static VkResult GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayPropertiesKHR[] properties) => GetPhysicalDeviceDisplayPropertiesKHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPropertiesKHR_1;
	public static VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayPlanePropertiesKHR[] properties) => GetPhysicalDeviceDisplayPlanePropertiesKHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPlanePropertiesKHR_0;
	public static VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayPlanePropertiesKHR[] properties) => GetPhysicalDeviceDisplayPlanePropertiesKHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlanePropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPlanePropertiesKHR_1;
	public static VkResult GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint* displayCount, [In, Out] VkDisplayKHR[] displays) => GetDisplayPlaneSupportedDisplaysKHR_0(physicalDevice, planeIndex, displayCount, displays);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkDisplayKHR[], VkResult> GetDisplayPlaneSupportedDisplaysKHR_0;
	public static VkResult GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, [In, Out] VkDisplayKHR[] displays) => GetDisplayPlaneSupportedDisplaysKHR_1(physicalDevice, planeIndex, ref displayCount, displays);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkDisplayKHR[], VkResult> GetDisplayPlaneSupportedDisplaysKHR_1;
	public static VkResult GetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, [In, Out] VkDisplayModePropertiesKHR[] properties) => GetDisplayModePropertiesKHR_0(physicalDevice, display, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR[], VkResult> GetDisplayModePropertiesKHR_0;
	public static VkResult GetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref uint propertyCount, [In, Out] VkDisplayModePropertiesKHR[] properties) => GetDisplayModePropertiesKHR_1(physicalDevice, display, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModePropertiesKHR[], VkResult> GetDisplayModePropertiesKHR_1;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_0(physicalDevice, display, createInfo, allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_0;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_1(physicalDevice, display, createInfo, ref allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_1;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref VkDisplayModeCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_2(physicalDevice, display, ref createInfo, allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_2;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref VkDisplayModeCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_3(physicalDevice, display, ref createInfo, ref allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_3;
	public static VkResult GetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, out VkDisplayPlaneCapabilitiesKHR capabilities) => GetDisplayPlaneCapabilitiesKHR_0(physicalDevice, mode, planeIndex, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayModeKHR, uint, out VkDisplayPlaneCapabilitiesKHR, VkResult> GetDisplayPlaneCapabilitiesKHR_0;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_0;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_1;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_2;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_3;
	public static VkResult CreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR[] createInfos, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchains) => CreateSharedSwapchainsKHR_0(device, swapchainCount, createInfos, allocator, out swapchains);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSharedSwapchainsKHR_0;
	public static VkResult CreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR[] createInfos, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchains) => CreateSharedSwapchainsKHR_1(device, swapchainCount, createInfos, ref allocator, out swapchains);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSharedSwapchainsKHR_1;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_0;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_1;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, ref VkXlibSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_2;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, ref VkXlibSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* dpy, IntPtr visualID) => GetPhysicalDeviceXlibPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, dpy, visualID);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32> GetPhysicalDeviceXlibPresentationSupportKHR_0;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_0;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_1;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, ref VkXcbSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_2;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, ref VkXcbSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* connection, IntPtr visual_id) => GetPhysicalDeviceXcbPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, connection, visual_id);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32> GetPhysicalDeviceXcbPresentationSupportKHR_0;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_0;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_1;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_2;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* display) => GetPhysicalDeviceWaylandPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, VkBool32> GetPhysicalDeviceWaylandPresentationSupportKHR_0;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_0;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_1;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_2;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_3;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_0;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_1;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_2;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex) => GetPhysicalDeviceWin32PresentationSupportKHR_0(physicalDevice, queueFamilyIndex);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkBool32> GetPhysicalDeviceWin32PresentationSupportKHR_0;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_0(instance, createInfo, allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_0;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_1(instance, createInfo, ref allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_1;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_2(instance, ref createInfo, allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_2;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_3(instance, ref createInfo, ref allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_3;
	public static void DestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* allocator) => DestroyDebugReportCallbackEXT_0(instance, callback, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void> DestroyDebugReportCallbackEXT_0;
	public static void DestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, ref VkAllocationCallbacks allocator) => DestroyDebugReportCallbackEXT_1(instance, callback, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, ref VkAllocationCallbacks, void> DestroyDebugReportCallbackEXT_1;
	public static void DebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, nuint location, int messageCode, string layerPrefix, string message) => DebugReportMessageEXT_0(instance, flags, objectType, @object, location, messageCode, layerPrefix, message);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, string, string, void> DebugReportMessageEXT_0;
	public static VkResult DebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* tagInfo) => DebugMarkerSetObjectTagEXT_0(device, tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult> DebugMarkerSetObjectTagEXT_0;
	public static VkResult DebugMarkerSetObjectTagEXT(VkDevice device, ref VkDebugMarkerObjectTagInfoEXT tagInfo) => DebugMarkerSetObjectTagEXT_1(device, ref tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectTagInfoEXT, VkResult> DebugMarkerSetObjectTagEXT_1;
	public static VkResult DebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* nameInfo) => DebugMarkerSetObjectNameEXT_0(device, nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult> DebugMarkerSetObjectNameEXT_0;
	public static VkResult DebugMarkerSetObjectNameEXT(VkDevice device, ref VkDebugMarkerObjectNameInfoEXT nameInfo) => DebugMarkerSetObjectNameEXT_1(device, ref nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectNameInfoEXT, VkResult> DebugMarkerSetObjectNameEXT_1;
	public static void CommandDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo) => CommandDebugMarkerBeginEXT_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> CommandDebugMarkerBeginEXT_0;
	public static void CommandDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfoEXT markerInfo) => CommandDebugMarkerBeginEXT_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void> CommandDebugMarkerBeginEXT_1;
	public static void CommandDebugMarkerEndEXT(VkCommandBuffer commandBuffer) => CommandDebugMarkerEndEXT_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandDebugMarkerEndEXT_0;
	public static void CommandDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo) => CommandDebugMarkerInsertEXT_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> CommandDebugMarkerInsertEXT_0;
	public static void CommandDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfoEXT markerInfo) => CommandDebugMarkerInsertEXT_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void> CommandDebugMarkerInsertEXT_1;
	public static VkResult GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* videoProfile, out VkVideoCapabilitiesKHR capabilities) => GetPhysicalDeviceVideoCapabilitiesKHR_0(physicalDevice, videoProfile, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkVideoProfileInfoKHR*, out VkVideoCapabilitiesKHR, VkResult> GetPhysicalDeviceVideoCapabilitiesKHR_0;
	public static VkResult GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, ref VkVideoProfileInfoKHR videoProfile, out VkVideoCapabilitiesKHR capabilities) => GetPhysicalDeviceVideoCapabilitiesKHR_1(physicalDevice, ref videoProfile, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkVideoProfileInfoKHR, out VkVideoCapabilitiesKHR, VkResult> GetPhysicalDeviceVideoCapabilitiesKHR_1;
	public static VkResult GetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* videoFormatInfo, uint* videoFormatPropertyCount, [In, Out] VkVideoFormatPropertiesKHR[] videoFormatProperties) => GetPhysicalDeviceVideoFormatPropertiesKHR_0(physicalDevice, videoFormatInfo, videoFormatPropertyCount, videoFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, uint*, VkVideoFormatPropertiesKHR[], VkResult> GetPhysicalDeviceVideoFormatPropertiesKHR_0;
	public static VkResult GetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* videoFormatInfo, ref uint videoFormatPropertyCount, [In, Out] VkVideoFormatPropertiesKHR[] videoFormatProperties) => GetPhysicalDeviceVideoFormatPropertiesKHR_1(physicalDevice, videoFormatInfo, ref videoFormatPropertyCount, videoFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, ref uint, VkVideoFormatPropertiesKHR[], VkResult> GetPhysicalDeviceVideoFormatPropertiesKHR_1;
	public static VkResult GetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR videoFormatInfo, uint* videoFormatPropertyCount, [In, Out] VkVideoFormatPropertiesKHR[] videoFormatProperties) => GetPhysicalDeviceVideoFormatPropertiesKHR_2(physicalDevice, ref videoFormatInfo, videoFormatPropertyCount, videoFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR, uint*, VkVideoFormatPropertiesKHR[], VkResult> GetPhysicalDeviceVideoFormatPropertiesKHR_2;
	public static VkResult GetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR videoFormatInfo, ref uint videoFormatPropertyCount, [In, Out] VkVideoFormatPropertiesKHR[] videoFormatProperties) => GetPhysicalDeviceVideoFormatPropertiesKHR_3(physicalDevice, ref videoFormatInfo, ref videoFormatPropertyCount, videoFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR, ref uint, VkVideoFormatPropertiesKHR[], VkResult> GetPhysicalDeviceVideoFormatPropertiesKHR_3;
	public static VkResult CreateVideoSessionKHR(VkDevice device, VkVideoSessionCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkVideoSessionKHR videoSession) => CreateVideoSessionKHR_0(device, createInfo, allocator, out videoSession);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, out VkVideoSessionKHR, VkResult> CreateVideoSessionKHR_0;
	public static VkResult CreateVideoSessionKHR(VkDevice device, VkVideoSessionCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkVideoSessionKHR videoSession) => CreateVideoSessionKHR_1(device, createInfo, ref allocator, out videoSession);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionCreateInfoKHR*, ref VkAllocationCallbacks, out VkVideoSessionKHR, VkResult> CreateVideoSessionKHR_1;
	public static VkResult CreateVideoSessionKHR(VkDevice device, ref VkVideoSessionCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkVideoSessionKHR videoSession) => CreateVideoSessionKHR_2(device, ref createInfo, allocator, out videoSession);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionCreateInfoKHR, VkAllocationCallbacks*, out VkVideoSessionKHR, VkResult> CreateVideoSessionKHR_2;
	public static VkResult CreateVideoSessionKHR(VkDevice device, ref VkVideoSessionCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkVideoSessionKHR videoSession) => CreateVideoSessionKHR_3(device, ref createInfo, ref allocator, out videoSession);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionCreateInfoKHR, ref VkAllocationCallbacks, out VkVideoSessionKHR, VkResult> CreateVideoSessionKHR_3;
	public static void DestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, VkAllocationCallbacks* allocator) => DestroyVideoSessionKHR_0(device, videoSession, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, VkAllocationCallbacks*, void> DestroyVideoSessionKHR_0;
	public static void DestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, ref VkAllocationCallbacks allocator) => DestroyVideoSessionKHR_1(device, videoSession, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, ref VkAllocationCallbacks, void> DestroyVideoSessionKHR_1;
	public static VkResult GetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint* memoryRequirementsCount, [In, Out] VkVideoSessionMemoryRequirementsKHR[] memoryRequirements) => GetVideoSessionMemoryRequirementsKHR_0(device, videoSession, memoryRequirementsCount, memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, uint*, VkVideoSessionMemoryRequirementsKHR[], VkResult> GetVideoSessionMemoryRequirementsKHR_0;
	public static VkResult GetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, ref uint memoryRequirementsCount, [In, Out] VkVideoSessionMemoryRequirementsKHR[] memoryRequirements) => GetVideoSessionMemoryRequirementsKHR_1(device, videoSession, ref memoryRequirementsCount, memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, ref uint, VkVideoSessionMemoryRequirementsKHR[], VkResult> GetVideoSessionMemoryRequirementsKHR_1;
	public static VkResult BindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR[] bindSessionMemoryInfos) => BindVideoSessionMemoryKHR_0(device, videoSession, bindSessionMemoryInfoCount, bindSessionMemoryInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, uint, VkBindVideoSessionMemoryInfoKHR[], VkResult> BindVideoSessionMemoryKHR_0;
	public static VkResult CreateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkVideoSessionParametersKHR videoSessionParameters) => CreateVideoSessionParametersKHR_0(device, createInfo, allocator, out videoSessionParameters);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, out VkVideoSessionParametersKHR, VkResult> CreateVideoSessionParametersKHR_0;
	public static VkResult CreateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkVideoSessionParametersKHR videoSessionParameters) => CreateVideoSessionParametersKHR_1(device, createInfo, ref allocator, out videoSessionParameters);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersCreateInfoKHR*, ref VkAllocationCallbacks, out VkVideoSessionParametersKHR, VkResult> CreateVideoSessionParametersKHR_1;
	public static VkResult CreateVideoSessionParametersKHR(VkDevice device, ref VkVideoSessionParametersCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkVideoSessionParametersKHR videoSessionParameters) => CreateVideoSessionParametersKHR_2(device, ref createInfo, allocator, out videoSessionParameters);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionParametersCreateInfoKHR, VkAllocationCallbacks*, out VkVideoSessionParametersKHR, VkResult> CreateVideoSessionParametersKHR_2;
	public static VkResult CreateVideoSessionParametersKHR(VkDevice device, ref VkVideoSessionParametersCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkVideoSessionParametersKHR videoSessionParameters) => CreateVideoSessionParametersKHR_3(device, ref createInfo, ref allocator, out videoSessionParameters);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionParametersCreateInfoKHR, ref VkAllocationCallbacks, out VkVideoSessionParametersKHR, VkResult> CreateVideoSessionParametersKHR_3;
	public static VkResult UpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR* updateInfo) => UpdateVideoSessionParametersKHR_0(device, videoSessionParameters, updateInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, VkVideoSessionParametersUpdateInfoKHR*, VkResult> UpdateVideoSessionParametersKHR_0;
	public static VkResult UpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, ref VkVideoSessionParametersUpdateInfoKHR updateInfo) => UpdateVideoSessionParametersKHR_1(device, videoSessionParameters, ref updateInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, ref VkVideoSessionParametersUpdateInfoKHR, VkResult> UpdateVideoSessionParametersKHR_1;
	public static void DestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks* allocator) => DestroyVideoSessionParametersKHR_0(device, videoSessionParameters, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, VkAllocationCallbacks*, void> DestroyVideoSessionParametersKHR_0;
	public static void DestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, ref VkAllocationCallbacks allocator) => DestroyVideoSessionParametersKHR_1(device, videoSessionParameters, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, ref VkAllocationCallbacks, void> DestroyVideoSessionParametersKHR_1;
	public static void CommandBeginVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* beginInfo) => CommandBeginVideoCodingKHR_0(commandBuffer, beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoBeginCodingInfoKHR*, void> CommandBeginVideoCodingKHR_0;
	public static void CommandBeginVideoCodingKHR(VkCommandBuffer commandBuffer, ref VkVideoBeginCodingInfoKHR beginInfo) => CommandBeginVideoCodingKHR_1(commandBuffer, ref beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoBeginCodingInfoKHR, void> CommandBeginVideoCodingKHR_1;
	public static void CommandEndVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* endCodingInfo) => CommandEndVideoCodingKHR_0(commandBuffer, endCodingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoEndCodingInfoKHR*, void> CommandEndVideoCodingKHR_0;
	public static void CommandEndVideoCodingKHR(VkCommandBuffer commandBuffer, ref VkVideoEndCodingInfoKHR endCodingInfo) => CommandEndVideoCodingKHR_1(commandBuffer, ref endCodingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoEndCodingInfoKHR, void> CommandEndVideoCodingKHR_1;
	public static void CommandControlVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* codingControlInfo) => CommandControlVideoCodingKHR_0(commandBuffer, codingControlInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoCodingControlInfoKHR*, void> CommandControlVideoCodingKHR_0;
	public static void CommandControlVideoCodingKHR(VkCommandBuffer commandBuffer, ref VkVideoCodingControlInfoKHR codingControlInfo) => CommandControlVideoCodingKHR_1(commandBuffer, ref codingControlInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoCodingControlInfoKHR, void> CommandControlVideoCodingKHR_1;
	public static void CommandDecodeVideoKHR(VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* decodeInfo) => CommandDecodeVideoKHR_0(commandBuffer, decodeInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoDecodeInfoKHR*, void> CommandDecodeVideoKHR_0;
	public static void CommandDecodeVideoKHR(VkCommandBuffer commandBuffer, ref VkVideoDecodeInfoKHR decodeInfo) => CommandDecodeVideoKHR_1(commandBuffer, ref decodeInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoDecodeInfoKHR, void> CommandDecodeVideoKHR_1;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, VkDeviceSize* sizes) => CommandBindTransformFeedbackBuffersEXT_0(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, void> CommandBindTransformFeedbackBuffersEXT_0;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes) => CommandBindTransformFeedbackBuffersEXT_1(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, void> CommandBindTransformFeedbackBuffersEXT_1;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes) => CommandBindTransformFeedbackBuffersEXT_2(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, void> CommandBindTransformFeedbackBuffersEXT_2;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes) => CommandBindTransformFeedbackBuffersEXT_3(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindTransformFeedbackBuffersEXT_3;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, VkDeviceSize* sizes) => CommandBindTransformFeedbackBuffersEXT_4(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, void> CommandBindTransformFeedbackBuffersEXT_4;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes) => CommandBindTransformFeedbackBuffersEXT_5(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, void> CommandBindTransformFeedbackBuffersEXT_5;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes) => CommandBindTransformFeedbackBuffersEXT_6(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, void> CommandBindTransformFeedbackBuffersEXT_6;
	public static void CommandBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes) => CommandBindTransformFeedbackBuffersEXT_7(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindTransformFeedbackBuffersEXT_7;
	public static void CommandBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize* counterBufferOffsets) => CommandBeginTransformFeedbackEXT_0(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], VkDeviceSize*, void> CommandBeginTransformFeedbackEXT_0;
	public static void CommandBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets) => CommandBeginTransformFeedbackEXT_1(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, ref counterBufferOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], ref VkDeviceSize, void> CommandBeginTransformFeedbackEXT_1;
	public static void CommandEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, VkDeviceSize* counterBufferOffsets) => CommandEndTransformFeedbackEXT_0(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], VkDeviceSize*, void> CommandEndTransformFeedbackEXT_0;
	public static void CommandEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer[] counterBuffers, ref VkDeviceSize counterBufferOffsets) => CommandEndTransformFeedbackEXT_1(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, ref counterBufferOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], ref VkDeviceSize, void> CommandEndTransformFeedbackEXT_1;
	public static void CommandBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags, uint index) => CommandBeginQueryIndexedEXT_0(commandBuffer, queryPool, query, flags, index);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void> CommandBeginQueryIndexedEXT_0;
	public static void CommandEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, uint index) => CommandEndQueryIndexedEXT_0(commandBuffer, queryPool, query, index);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void> CommandEndQueryIndexedEXT_0;
	public static void CommandDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride) => CommandDrawIndirectByteCountEXT_0(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirectByteCountEXT_0;
	public static VkResult CreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, out VkCuModuleNVX module) => CreateCuModuleNVX_0(device, createInfo, allocator, out module);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, out VkCuModuleNVX, VkResult> CreateCuModuleNVX_0;
	public static VkResult CreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* createInfo, ref VkAllocationCallbacks allocator, out VkCuModuleNVX module) => CreateCuModuleNVX_1(device, createInfo, ref allocator, out module);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleCreateInfoNVX*, ref VkAllocationCallbacks, out VkCuModuleNVX, VkResult> CreateCuModuleNVX_1;
	public static VkResult CreateCuModuleNVX(VkDevice device, ref VkCuModuleCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, out VkCuModuleNVX module) => CreateCuModuleNVX_2(device, ref createInfo, allocator, out module);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCuModuleCreateInfoNVX, VkAllocationCallbacks*, out VkCuModuleNVX, VkResult> CreateCuModuleNVX_2;
	public static VkResult CreateCuModuleNVX(VkDevice device, ref VkCuModuleCreateInfoNVX createInfo, ref VkAllocationCallbacks allocator, out VkCuModuleNVX module) => CreateCuModuleNVX_3(device, ref createInfo, ref allocator, out module);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCuModuleCreateInfoNVX, ref VkAllocationCallbacks, out VkCuModuleNVX, VkResult> CreateCuModuleNVX_3;
	public static VkResult CreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, out VkCuFunctionNVX function) => CreateCuFunctionNVX_0(device, createInfo, allocator, out function);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, out VkCuFunctionNVX, VkResult> CreateCuFunctionNVX_0;
	public static VkResult CreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* createInfo, ref VkAllocationCallbacks allocator, out VkCuFunctionNVX function) => CreateCuFunctionNVX_1(device, createInfo, ref allocator, out function);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionCreateInfoNVX*, ref VkAllocationCallbacks, out VkCuFunctionNVX, VkResult> CreateCuFunctionNVX_1;
	public static VkResult CreateCuFunctionNVX(VkDevice device, ref VkCuFunctionCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, out VkCuFunctionNVX function) => CreateCuFunctionNVX_2(device, ref createInfo, allocator, out function);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCuFunctionCreateInfoNVX, VkAllocationCallbacks*, out VkCuFunctionNVX, VkResult> CreateCuFunctionNVX_2;
	public static VkResult CreateCuFunctionNVX(VkDevice device, ref VkCuFunctionCreateInfoNVX createInfo, ref VkAllocationCallbacks allocator, out VkCuFunctionNVX function) => CreateCuFunctionNVX_3(device, ref createInfo, ref allocator, out function);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCuFunctionCreateInfoNVX, ref VkAllocationCallbacks, out VkCuFunctionNVX, VkResult> CreateCuFunctionNVX_3;
	public static void DestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, VkAllocationCallbacks* allocator) => DestroyCuModuleNVX_0(device, module, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void> DestroyCuModuleNVX_0;
	public static void DestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, ref VkAllocationCallbacks allocator) => DestroyCuModuleNVX_1(device, module, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleNVX, ref VkAllocationCallbacks, void> DestroyCuModuleNVX_1;
	public static void DestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, VkAllocationCallbacks* allocator) => DestroyCuFunctionNVX_0(device, function, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void> DestroyCuFunctionNVX_0;
	public static void DestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, ref VkAllocationCallbacks allocator) => DestroyCuFunctionNVX_1(device, function, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionNVX, ref VkAllocationCallbacks, void> DestroyCuFunctionNVX_1;
	public static void CommandCuLaunchKernelNVX(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* launchInfo) => CommandCuLaunchKernelNVX_0(commandBuffer, launchInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCuLaunchInfoNVX*, void> CommandCuLaunchKernelNVX_0;
	public static void CommandCuLaunchKernelNVX(VkCommandBuffer commandBuffer, ref VkCuLaunchInfoNVX launchInfo) => CommandCuLaunchKernelNVX_1(commandBuffer, ref launchInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCuLaunchInfoNVX, void> CommandCuLaunchKernelNVX_1;
	public static uint GetImageViewHandleNVX(VkDevice device, out VkImageViewHandleInfoNVX info) => GetImageViewHandleNVX_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkImageViewHandleInfoNVX, uint> GetImageViewHandleNVX_0;
	public static VkResult GetImageViewAddressNVX(VkDevice device, VkImageView imageView, out VkImageViewAddressPropertiesNVX properties) => GetImageViewAddressNVX_0(device, imageView, out properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageView, out VkImageViewAddressPropertiesNVX, VkResult> GetImageViewAddressNVX_0;
	[Obsolete("Use CommandDrawIndirectCount")]
	public static void CommandDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndirectCountAMD_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirectCountAMD_0;
	[Obsolete("Use CommandDrawIndexedIndirectCount")]
	public static void CommandDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndexedIndirectCountAMD_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirectCountAMD_0;
	public static VkResult GetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, nuint* infoSize, void* info) => GetShaderInfoAMD_0(device, pipeline, shaderStage, infoType, infoSize, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, nuint*, void*, VkResult> GetShaderInfoAMD_0;
	public static VkResult GetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ref nuint infoSize, void* info) => GetShaderInfoAMD_1(device, pipeline, shaderStage, infoType, ref infoSize, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, ref nuint, void*, VkResult> GetShaderInfoAMD_1;
	[Obsolete("Use CommandBeginRendering")]
	public static void CommandBeginRenderingKHR(VkCommandBuffer commandBuffer, VkRenderingInfo* renderingInfo) => CommandBeginRenderingKHR_0(commandBuffer, renderingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInfo*, void> CommandBeginRenderingKHR_0;
	[Obsolete("Use CommandBeginRendering")]
	public static void CommandBeginRenderingKHR(VkCommandBuffer commandBuffer, ref VkRenderingInfo renderingInfo) => CommandBeginRenderingKHR_1(commandBuffer, ref renderingInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderingInfo, void> CommandBeginRenderingKHR_1;
	[Obsolete("Use CommandEndRendering")]
	public static void CommandEndRenderingKHR(VkCommandBuffer commandBuffer) => CommandEndRenderingKHR_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndRenderingKHR_0;
	public static VkResult GetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, out VkExternalImageFormatPropertiesNV externalImageFormatProperties) => GetPhysicalDeviceExternalImageFormatPropertiesNV_0(physicalDevice, format, type, tiling, usage, flags, externalHandleType, out externalImageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, out VkExternalImageFormatPropertiesNV, VkResult> GetPhysicalDeviceExternalImageFormatPropertiesNV_0;
	public static VkResult GetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, out IntPtr handle) => GetMemoryWin32HandleNV_0(device, memory, handleType, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, out IntPtr, VkResult> GetMemoryWin32HandleNV_0;
	[Obsolete("Use GetPhysicalDeviceFeatures2")]
	public static void GetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features) => GetPhysicalDeviceFeatures2KHR_0(physicalDevice, out features);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2, void> GetPhysicalDeviceFeatures2KHR_0;
	[Obsolete("Use GetPhysicalDeviceProperties2")]
	public static void GetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties) => GetPhysicalDeviceProperties2KHR_0(physicalDevice, out properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2, void> GetPhysicalDeviceProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceFormatProperties2")]
	public static void GetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties) => GetPhysicalDeviceFormatProperties2KHR_0(physicalDevice, format, out formatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2, void> GetPhysicalDeviceFormatProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceImageFormatProperties2")]
	public static void GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2KHR_0(physicalDevice, imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, out VkImageFormatProperties2, void> GetPhysicalDeviceImageFormatProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceImageFormatProperties2")]
	public static void GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2KHR_1(physicalDevice, ref imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2, out VkImageFormatProperties2, void> GetPhysicalDeviceImageFormatProperties2KHR_1;
	[Obsolete("Use GetPhysicalDeviceQueueFamilyProperties2")]
	public static void GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2KHR_0(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2[], void> GetPhysicalDeviceQueueFamilyProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceQueueFamilyProperties2")]
	public static void GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2KHR_1(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2[], void> GetPhysicalDeviceQueueFamilyProperties2KHR_1;
	[Obsolete("Use GetPhysicalDeviceMemoryProperties2")]
	public static void GetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties) => GetPhysicalDeviceMemoryProperties2KHR_0(physicalDevice, out memoryProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2, void> GetPhysicalDeviceMemoryProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceSparseImageFormatProperties2")]
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_0(physicalDevice, formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_0;
	[Obsolete("Use GetPhysicalDeviceSparseImageFormatProperties2")]
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_1(physicalDevice, formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, ref uint, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_1;
	[Obsolete("Use GetPhysicalDeviceSparseImageFormatProperties2")]
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_2(physicalDevice, ref formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, uint*, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_2;
	[Obsolete("Use GetPhysicalDeviceSparseImageFormatProperties2")]
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_3(physicalDevice, ref formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, ref uint, VkSparseImageFormatProperties2[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_3;
	[Obsolete("Use GetDeviceGroupPeerMemoryFeatures")]
	public static void GetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures) => GetDeviceGroupPeerMemoryFeaturesKHR_0(device, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlags, void> GetDeviceGroupPeerMemoryFeaturesKHR_0;
	[Obsolete("Use CommandSetDeviceMask")]
	public static void CommandSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint deviceMask) => CommandSetDeviceMaskKHR_0(commandBuffer, deviceMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetDeviceMaskKHR_0;
	[Obsolete("Use CommandDispatchBase")]
	public static void CommandDispatchBaseKHR(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDispatchBaseKHR_0(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> CommandDispatchBaseKHR_0;
	[Obsolete("Use TrimCommandPool")]
	public static void TrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) => TrimCommandPoolKHR_0(device, commandPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void> TrimCommandPoolKHR_0;
	[Obsolete("Use EnumeratePhysicalDeviceGroups")]
	public static void EnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint* physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroupsKHR_0(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupProperties[], void> EnumeratePhysicalDeviceGroupsKHR_0;
	[Obsolete("Use EnumeratePhysicalDeviceGroups")]
	public static void EnumeratePhysicalDeviceGroupsKHR(VkInstance instance, ref uint physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupProperties[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroupsKHR_1(instance, ref physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupProperties[], void> EnumeratePhysicalDeviceGroupsKHR_1;
	[Obsolete("Use GetPhysicalDeviceExternalBufferProperties")]
	public static void GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => GetPhysicalDeviceExternalBufferPropertiesKHR_0(physicalDevice, externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, out VkExternalBufferProperties, void> GetPhysicalDeviceExternalBufferPropertiesKHR_0;
	[Obsolete("Use GetPhysicalDeviceExternalBufferProperties")]
	public static void GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, out VkExternalBufferProperties externalBufferProperties) => GetPhysicalDeviceExternalBufferPropertiesKHR_1(physicalDevice, ref externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfo, out VkExternalBufferProperties, void> GetPhysicalDeviceExternalBufferPropertiesKHR_1;
	public static VkResult GetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetMemoryWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetMemoryWin32HandleKHR_0;
	public static VkResult GetMemoryWin32HandleKHR(VkDevice device, ref VkMemoryGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetMemoryWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetWin32HandleInfoKHR, out IntPtr, VkResult> GetMemoryWin32HandleKHR_1;
	public static VkResult GetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, IntPtr handle, out VkMemoryWin32HandlePropertiesKHR memoryWin32HandleProperties) => GetMemoryWin32HandlePropertiesKHR_0(device, handleType, handle, out memoryWin32HandleProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, IntPtr, out VkMemoryWin32HandlePropertiesKHR, VkResult> GetMemoryWin32HandlePropertiesKHR_0;
	public static VkResult GetMemoryFileDescriptorKHR(VkDevice device, VkMemoryGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetMemoryFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetFdInfoKHR*, out int, VkResult> GetMemoryFileDescriptorKHR_0;
	public static VkResult GetMemoryFileDescriptorKHR(VkDevice device, ref VkMemoryGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetMemoryFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetFdInfoKHR, out int, VkResult> GetMemoryFileDescriptorKHR_1;
	public static VkResult GetMemoryFileDescriptorPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fileDescriptor, out VkMemoryFdPropertiesKHR memoryFileDescriptorProperties) => GetMemoryFileDescriptorPropertiesKHR_0(device, handleType, fileDescriptor, out memoryFileDescriptorProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, int, out VkMemoryFdPropertiesKHR, VkResult> GetMemoryFileDescriptorPropertiesKHR_0;
	[Obsolete("Use GetPhysicalDeviceExternalSemaphoreProperties")]
	public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphorePropertiesKHR_0(physicalDevice, externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, out VkExternalSemaphoreProperties, void> GetPhysicalDeviceExternalSemaphorePropertiesKHR_0;
	[Obsolete("Use GetPhysicalDeviceExternalSemaphoreProperties")]
	public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphorePropertiesKHR_1(physicalDevice, ref externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo, out VkExternalSemaphoreProperties, void> GetPhysicalDeviceExternalSemaphorePropertiesKHR_1;
	public static VkResult ImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* importSemaphoreWin32HandleInfo) => ImportSemaphoreWin32HandleKHR_0(device, importSemaphoreWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult> ImportSemaphoreWin32HandleKHR_0;
	public static VkResult ImportSemaphoreWin32HandleKHR(VkDevice device, ref VkImportSemaphoreWin32HandleInfoKHR importSemaphoreWin32HandleInfo) => ImportSemaphoreWin32HandleKHR_1(device, ref importSemaphoreWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreWin32HandleInfoKHR, VkResult> ImportSemaphoreWin32HandleKHR_1;
	public static VkResult GetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetSemaphoreWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetSemaphoreWin32HandleKHR_0;
	public static VkResult GetSemaphoreWin32HandleKHR(VkDevice device, ref VkSemaphoreGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetSemaphoreWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetWin32HandleInfoKHR, out IntPtr, VkResult> GetSemaphoreWin32HandleKHR_1;
	public static VkResult ImportSemaphoreFileDescriptorKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* importSemaphoreFileDescriptorInfo) => ImportSemaphoreFileDescriptorKHR_0(device, importSemaphoreFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult> ImportSemaphoreFileDescriptorKHR_0;
	public static VkResult ImportSemaphoreFileDescriptorKHR(VkDevice device, ref VkImportSemaphoreFdInfoKHR importSemaphoreFileDescriptorInfo) => ImportSemaphoreFileDescriptorKHR_1(device, ref importSemaphoreFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreFdInfoKHR, VkResult> ImportSemaphoreFileDescriptorKHR_1;
	public static VkResult GetSemaphoreFileDescriptorKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetSemaphoreFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetFdInfoKHR*, out int, VkResult> GetSemaphoreFileDescriptorKHR_0;
	public static VkResult GetSemaphoreFileDescriptorKHR(VkDevice device, ref VkSemaphoreGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetSemaphoreFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetFdInfoKHR, out int, VkResult> GetSemaphoreFileDescriptorKHR_1;
	public static void CommandPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites) => CommandPushDescriptorSetKHR_0(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet[], void> CommandPushDescriptorSetKHR_0;
	public static void CommandPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data) => CommandPushDescriptorSetWithTemplateKHR_0(commandBuffer, descriptorUpdateTemplate, layout, set, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void> CommandPushDescriptorSetWithTemplateKHR_0;
	public static void CommandBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* conditionalRenderingBegin) => CommandBeginConditionalRenderingEXT_0(commandBuffer, conditionalRenderingBegin);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void> CommandBeginConditionalRenderingEXT_0;
	public static void CommandBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, ref VkConditionalRenderingBeginInfoEXT conditionalRenderingBegin) => CommandBeginConditionalRenderingEXT_1(commandBuffer, ref conditionalRenderingBegin);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkConditionalRenderingBeginInfoEXT, void> CommandBeginConditionalRenderingEXT_1;
	public static void CommandEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) => CommandEndConditionalRenderingEXT_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndConditionalRenderingEXT_0;
	[Obsolete("Use CreateDescriptorUpdateTemplate")]
	public static void CreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_0(device, createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, void> CreateDescriptorUpdateTemplateKHR_0;
	[Obsolete("Use CreateDescriptorUpdateTemplate")]
	public static void CreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_1(device, createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, void> CreateDescriptorUpdateTemplateKHR_1;
	[Obsolete("Use CreateDescriptorUpdateTemplate")]
	public static void CreateDescriptorUpdateTemplateKHR(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_2(device, ref createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, void> CreateDescriptorUpdateTemplateKHR_2;
	[Obsolete("Use CreateDescriptorUpdateTemplate")]
	public static void CreateDescriptorUpdateTemplateKHR(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_3(device, ref createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, void> CreateDescriptorUpdateTemplateKHR_3;
	[Obsolete("Use DestroyDescriptorUpdateTemplate")]
	public static void DestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator) => DestroyDescriptorUpdateTemplateKHR_0(device, descriptorUpdateTemplate, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void> DestroyDescriptorUpdateTemplateKHR_0;
	[Obsolete("Use DestroyDescriptorUpdateTemplate")]
	public static void DestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks allocator) => DestroyDescriptorUpdateTemplateKHR_1(device, descriptorUpdateTemplate, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, ref VkAllocationCallbacks, void> DestroyDescriptorUpdateTemplateKHR_1;
	[Obsolete("Use UpdateDescriptorSetWithTemplate")]
	public static void UpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data) => UpdateDescriptorSetWithTemplateKHR_0(device, descriptorSet, descriptorUpdateTemplate, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void> UpdateDescriptorSetWithTemplateKHR_0;
	public static void CommandSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* viewportWScalings) => CommandSetViewportWScalingNV_0(commandBuffer, firstViewport, viewportCount, viewportWScalings);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void> CommandSetViewportWScalingNV_0;
	public static void CommandSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewportWScalingNV viewportWScalings) => CommandSetViewportWScalingNV_1(commandBuffer, firstViewport, viewportCount, ref viewportWScalings);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportWScalingNV, void> CommandSetViewportWScalingNV_1;
	public static VkResult ReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) => ReleaseDisplayEXT_0(physicalDevice, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult> ReleaseDisplayEXT_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilities2EXT surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2EXT_0(physicalDevice, surface, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilities2EXT, VkResult> GetPhysicalDeviceSurfaceCapabilities2EXT_0;
	public static VkResult DisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* displayPowerInfo) => DisplayPowerControlEXT_0(device, display, displayPowerInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult> DisplayPowerControlEXT_0;
	public static VkResult DisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayPowerInfoEXT displayPowerInfo) => DisplayPowerControlEXT_1(device, display, ref displayPowerInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayPowerInfoEXT, VkResult> DisplayPowerControlEXT_1;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDeviceEventEXT_0(device, deviceEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDeviceEventEXT_0;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDeviceEventEXT_1(device, deviceEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDeviceEventEXT_1;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDeviceEventEXT_2(device, deviceEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDeviceEventEXT_2;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDeviceEventEXT_3(device, deviceEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDeviceEventEXT_3;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDeviceEventEXT_4(device, ref deviceEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDeviceEventEXT_4;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDeviceEventEXT_5(device, ref deviceEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDeviceEventEXT_5;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDeviceEventEXT_6(device, ref deviceEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDeviceEventEXT_6;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDeviceEventEXT_7(device, ref deviceEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDeviceEventEXT_7;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDisplayEventEXT_0(device, display, displayEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDisplayEventEXT_0;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDisplayEventEXT_1(device, display, displayEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDisplayEventEXT_1;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDisplayEventEXT_2(device, display, displayEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDisplayEventEXT_2;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDisplayEventEXT_3(device, display, displayEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDisplayEventEXT_3;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDisplayEventEXT_4(device, display, ref displayEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDisplayEventEXT_4;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDisplayEventEXT_5(device, display, ref displayEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDisplayEventEXT_5;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDisplayEventEXT_6(device, display, ref displayEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDisplayEventEXT_6;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDisplayEventEXT_7(device, display, ref displayEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDisplayEventEXT_7;
	public static VkResult GetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagsEXT counter, out ulong counterValue) => GetSwapchainCounterEXT_0(device, swapchain, counter, out counterValue);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, out ulong, VkResult> GetSwapchainCounterEXT_0;
	public static VkResult GetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, out VkRefreshCycleDurationGOOGLE displayTimingProperties) => GetRefreshCycleDurationGOOGLE_0(device, swapchain, out displayTimingProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, out VkRefreshCycleDurationGOOGLE, VkResult> GetRefreshCycleDurationGOOGLE_0;
	public static VkResult GetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint* presentationTimingCount, [In, Out] VkPastPresentationTimingGOOGLE[] presentationTimings) => GetPastPresentationTimingGOOGLE_0(device, swapchain, presentationTimingCount, presentationTimings);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE[], VkResult> GetPastPresentationTimingGOOGLE_0;
	public static VkResult GetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, ref uint presentationTimingCount, [In, Out] VkPastPresentationTimingGOOGLE[] presentationTimings) => GetPastPresentationTimingGOOGLE_1(device, swapchain, ref presentationTimingCount, presentationTimings);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkPastPresentationTimingGOOGLE[], VkResult> GetPastPresentationTimingGOOGLE_1;
	public static void CommandSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D[] discardRectangles) => CommandSetDiscardRectangleEXT_0(commandBuffer, firstDiscardRectangle, discardRectangleCount, discardRectangles);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void> CommandSetDiscardRectangleEXT_0;
	public static void SetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR[] swapchains, VkHdrMetadataEXT* metadata) => SetHdrMetadataEXT_0(device, swapchainCount, swapchains, metadata);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], VkHdrMetadataEXT*, void> SetHdrMetadataEXT_0;
	public static void SetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR[] swapchains, ref VkHdrMetadataEXT metadata) => SetHdrMetadataEXT_1(device, swapchainCount, swapchains, ref metadata);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], ref VkHdrMetadataEXT, void> SetHdrMetadataEXT_1;
	[Obsolete("Use CreateRenderPass2")]
	public static void CreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass2KHR_0(device, createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, out VkRenderPass, void> CreateRenderPass2KHR_0;
	[Obsolete("Use CreateRenderPass2")]
	public static void CreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass2KHR_1(device, createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, ref VkAllocationCallbacks, out VkRenderPass, void> CreateRenderPass2KHR_1;
	[Obsolete("Use CreateRenderPass2")]
	public static void CreateRenderPass2KHR(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass2KHR_2(device, ref createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, VkAllocationCallbacks*, out VkRenderPass, void> CreateRenderPass2KHR_2;
	[Obsolete("Use CreateRenderPass2")]
	public static void CreateRenderPass2KHR(VkDevice device, ref VkRenderPassCreateInfo2 createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass2KHR_3(device, ref createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, ref VkAllocationCallbacks, out VkRenderPass, void> CreateRenderPass2KHR_3;
	[Obsolete("Use CommandBeginRenderPass2")]
	public static void CommandBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo) => CommandBeginRenderPass2KHR_0(commandBuffer, renderPassBegin, subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> CommandBeginRenderPass2KHR_0;
	[Obsolete("Use CommandBeginRenderPass2")]
	public static void CommandBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => CommandBeginRenderPass2KHR_1(commandBuffer, renderPassBegin, ref subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, ref VkSubpassBeginInfo, void> CommandBeginRenderPass2KHR_1;
	[Obsolete("Use CommandBeginRenderPass2")]
	public static void CommandBeginRenderPass2KHR(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo) => CommandBeginRenderPass2KHR_2(commandBuffer, ref renderPassBegin, subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassBeginInfo*, void> CommandBeginRenderPass2KHR_2;
	[Obsolete("Use CommandBeginRenderPass2")]
	public static void CommandBeginRenderPass2KHR(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, ref VkSubpassBeginInfo subpassBeginInfo) => CommandBeginRenderPass2KHR_3(commandBuffer, ref renderPassBegin, ref subpassBeginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, ref VkSubpassBeginInfo, void> CommandBeginRenderPass2KHR_3;
	[Obsolete("Use CommandNextSubpass2")]
	public static void CommandNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo) => CommandNextSubpass2KHR_0(commandBuffer, subpassBeginInfo, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> CommandNextSubpass2KHR_0;
	[Obsolete("Use CommandNextSubpass2")]
	public static void CommandNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => CommandNextSubpass2KHR_1(commandBuffer, subpassBeginInfo, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, ref VkSubpassEndInfo, void> CommandNextSubpass2KHR_1;
	[Obsolete("Use CommandNextSubpass2")]
	public static void CommandNextSubpass2KHR(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo) => CommandNextSubpass2KHR_2(commandBuffer, ref subpassBeginInfo, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, VkSubpassEndInfo*, void> CommandNextSubpass2KHR_2;
	[Obsolete("Use CommandNextSubpass2")]
	public static void CommandNextSubpass2KHR(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo subpassBeginInfo, ref VkSubpassEndInfo subpassEndInfo) => CommandNextSubpass2KHR_3(commandBuffer, ref subpassBeginInfo, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, ref VkSubpassEndInfo, void> CommandNextSubpass2KHR_3;
	[Obsolete("Use CommandEndRenderPass2")]
	public static void CommandEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo) => CommandEndRenderPass2KHR_0(commandBuffer, subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassEndInfo*, void> CommandEndRenderPass2KHR_0;
	[Obsolete("Use CommandEndRenderPass2")]
	public static void CommandEndRenderPass2KHR(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo subpassEndInfo) => CommandEndRenderPass2KHR_1(commandBuffer, ref subpassEndInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassEndInfo, void> CommandEndRenderPass2KHR_1;
	public static VkResult GetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) => GetSwapchainStatusKHR_0(device, swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult> GetSwapchainStatusKHR_0;
	[Obsolete("Use GetPhysicalDeviceExternalFenceProperties")]
	public static void GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => GetPhysicalDeviceExternalFencePropertiesKHR_0(physicalDevice, externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, out VkExternalFenceProperties, void> GetPhysicalDeviceExternalFencePropertiesKHR_0;
	[Obsolete("Use GetPhysicalDeviceExternalFenceProperties")]
	public static void GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, out VkExternalFenceProperties externalFenceProperties) => GetPhysicalDeviceExternalFencePropertiesKHR_1(physicalDevice, ref externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfo, out VkExternalFenceProperties, void> GetPhysicalDeviceExternalFencePropertiesKHR_1;
	public static VkResult ImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfoKHR* importFenceWin32HandleInfo) => ImportFenceWin32HandleKHR_0(device, importFenceWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult> ImportFenceWin32HandleKHR_0;
	public static VkResult ImportFenceWin32HandleKHR(VkDevice device, ref VkImportFenceWin32HandleInfoKHR importFenceWin32HandleInfo) => ImportFenceWin32HandleKHR_1(device, ref importFenceWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceWin32HandleInfoKHR, VkResult> ImportFenceWin32HandleKHR_1;
	public static VkResult GetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetFenceWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetFenceWin32HandleKHR_0;
	public static VkResult GetFenceWin32HandleKHR(VkDevice device, ref VkFenceGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetFenceWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetWin32HandleInfoKHR, out IntPtr, VkResult> GetFenceWin32HandleKHR_1;
	public static VkResult ImportFenceFileDescriptorKHR(VkDevice device, VkImportFenceFdInfoKHR* importFenceFileDescriptorInfo) => ImportFenceFileDescriptorKHR_0(device, importFenceFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceFdInfoKHR*, VkResult> ImportFenceFileDescriptorKHR_0;
	public static VkResult ImportFenceFileDescriptorKHR(VkDevice device, ref VkImportFenceFdInfoKHR importFenceFileDescriptorInfo) => ImportFenceFileDescriptorKHR_1(device, ref importFenceFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceFdInfoKHR, VkResult> ImportFenceFileDescriptorKHR_1;
	public static VkResult GetFenceFileDescriptorKHR(VkDevice device, VkFenceGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetFenceFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetFdInfoKHR*, out int, VkResult> GetFenceFileDescriptorKHR_0;
	public static VkResult GetFenceFileDescriptorKHR(VkDevice device, ref VkFenceGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetFenceFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetFdInfoKHR, out int, VkResult> GetFenceFileDescriptorKHR_1;
	public static VkResult EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* counterCount, VkPerformanceCounterKHR[] counters, [In, Out] VkPerformanceCounterDescriptionKHR[] counterDescriptions) => EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_0(physicalDevice, queueFamilyIndex, counterCount, counters, counterDescriptions);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR[], VkPerformanceCounterDescriptionKHR[], VkResult> EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_0;
	public static VkResult EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint counterCount, VkPerformanceCounterKHR[] counters, [In, Out] VkPerformanceCounterDescriptionKHR[] counterDescriptions) => EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_1(physicalDevice, queueFamilyIndex, ref counterCount, counters, counterDescriptions);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkPerformanceCounterKHR[], VkPerformanceCounterDescriptionKHR[], VkResult> EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_1;
	public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* performanceQueryCreateInfo, out uint numPasses) => GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_0(physicalDevice, performanceQueryCreateInfo, out numPasses);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, out uint, void> GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_0;
	public static void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, ref VkQueryPoolPerformanceCreateInfoKHR performanceQueryCreateInfo, out uint numPasses) => GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_1(physicalDevice, ref performanceQueryCreateInfo, out numPasses);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkQueryPoolPerformanceCreateInfoKHR, out uint, void> GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_1;
	public static VkResult AcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfoKHR* info) => AcquireProfilingLockKHR_0(device, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult> AcquireProfilingLockKHR_0;
	public static VkResult AcquireProfilingLockKHR(VkDevice device, ref VkAcquireProfilingLockInfoKHR info) => AcquireProfilingLockKHR_1(device, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireProfilingLockInfoKHR, VkResult> AcquireProfilingLockKHR_1;
	public static void ReleaseProfilingLockKHR(VkDevice device) => ReleaseProfilingLockKHR_0(device);
	private static delegate* unmanaged[Cdecl]<VkDevice, void> ReleaseProfilingLockKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, out VkSurfaceCapabilities2KHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2KHR_0(physicalDevice, surfaceInfo, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkSurfaceCapabilities2KHR, VkResult> GetPhysicalDeviceSurfaceCapabilities2KHR_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, out VkSurfaceCapabilities2KHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2KHR_1(physicalDevice, ref surfaceInfo, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkSurfaceCapabilities2KHR, VkResult> GetPhysicalDeviceSurfaceCapabilities2KHR_1;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_0(physicalDevice, surfaceInfo, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_1(physicalDevice, surfaceInfo, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_1;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, uint* surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_2(physicalDevice, ref surfaceInfo, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_2;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_3(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_3;
	public static VkResult GetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayProperties2KHR[] properties) => GetPhysicalDeviceDisplayProperties2KHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayProperties2KHR[], VkResult> GetPhysicalDeviceDisplayProperties2KHR_0;
	public static VkResult GetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayProperties2KHR[] properties) => GetPhysicalDeviceDisplayProperties2KHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayProperties2KHR[], VkResult> GetPhysicalDeviceDisplayProperties2KHR_1;
	public static VkResult GetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayPlaneProperties2KHR[] properties) => GetPhysicalDeviceDisplayPlaneProperties2KHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR[], VkResult> GetPhysicalDeviceDisplayPlaneProperties2KHR_0;
	public static VkResult GetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayPlaneProperties2KHR[] properties) => GetPhysicalDeviceDisplayPlaneProperties2KHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlaneProperties2KHR[], VkResult> GetPhysicalDeviceDisplayPlaneProperties2KHR_1;
	public static VkResult GetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, [In, Out] VkDisplayModeProperties2KHR[] properties) => GetDisplayModeProperties2KHR_0(physicalDevice, display, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR[], VkResult> GetDisplayModeProperties2KHR_0;
	public static VkResult GetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref uint propertyCount, [In, Out] VkDisplayModeProperties2KHR[] properties) => GetDisplayModeProperties2KHR_1(physicalDevice, display, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModeProperties2KHR[], VkResult> GetDisplayModeProperties2KHR_1;
	public static VkResult GetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* displayPlaneInfo, out VkDisplayPlaneCapabilities2KHR capabilities) => GetDisplayPlaneCapabilities2KHR_0(physicalDevice, displayPlaneInfo, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, out VkDisplayPlaneCapabilities2KHR, VkResult> GetDisplayPlaneCapabilities2KHR_0;
	public static VkResult GetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkDisplayPlaneInfo2KHR displayPlaneInfo, out VkDisplayPlaneCapabilities2KHR capabilities) => GetDisplayPlaneCapabilities2KHR_1(physicalDevice, ref displayPlaneInfo, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDisplayPlaneInfo2KHR, out VkDisplayPlaneCapabilities2KHR, VkResult> GetDisplayPlaneCapabilities2KHR_1;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_0;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_1;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, ref VkMacOSSurfaceCreateInfoMVK createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_2;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, ref VkMacOSSurfaceCreateInfoMVK createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_3;
	public static VkResult SetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* nameInfo) => SetDebugUtilsObjectNameEXT_0(device, nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult> SetDebugUtilsObjectNameEXT_0;
	public static VkResult SetDebugUtilsObjectNameEXT(VkDevice device, ref VkDebugUtilsObjectNameInfoEXT nameInfo) => SetDebugUtilsObjectNameEXT_1(device, ref nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugUtilsObjectNameInfoEXT, VkResult> SetDebugUtilsObjectNameEXT_1;
	public static VkResult SetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* tagInfo) => SetDebugUtilsObjectTagEXT_0(device, tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult> SetDebugUtilsObjectTagEXT_0;
	public static VkResult SetDebugUtilsObjectTagEXT(VkDevice device, ref VkDebugUtilsObjectTagInfoEXT tagInfo) => SetDebugUtilsObjectTagEXT_1(device, ref tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugUtilsObjectTagInfoEXT, VkResult> SetDebugUtilsObjectTagEXT_1;
	public static void QueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo) => QueueBeginDebugUtilsLabelEXT_0(queue, labelInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkDebugUtilsLabelEXT*, void> QueueBeginDebugUtilsLabelEXT_0;
	public static void QueueBeginDebugUtilsLabelEXT(VkQueue queue, ref VkDebugUtilsLabelEXT labelInfo) => QueueBeginDebugUtilsLabelEXT_1(queue, ref labelInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref VkDebugUtilsLabelEXT, void> QueueBeginDebugUtilsLabelEXT_1;
	public static void QueueEndDebugUtilsLabelEXT(VkQueue queue) => QueueEndDebugUtilsLabelEXT_0(queue);
	private static delegate* unmanaged[Cdecl]<VkQueue, void> QueueEndDebugUtilsLabelEXT_0;
	public static void QueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo) => QueueInsertDebugUtilsLabelEXT_0(queue, labelInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkDebugUtilsLabelEXT*, void> QueueInsertDebugUtilsLabelEXT_0;
	public static void QueueInsertDebugUtilsLabelEXT(VkQueue queue, ref VkDebugUtilsLabelEXT labelInfo) => QueueInsertDebugUtilsLabelEXT_1(queue, ref labelInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref VkDebugUtilsLabelEXT, void> QueueInsertDebugUtilsLabelEXT_1;
	public static void CommandBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo) => CommandBeginDebugUtilsLabelEXT_0(commandBuffer, labelInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugUtilsLabelEXT*, void> CommandBeginDebugUtilsLabelEXT_0;
	public static void CommandBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabelEXT labelInfo) => CommandBeginDebugUtilsLabelEXT_1(commandBuffer, ref labelInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugUtilsLabelEXT, void> CommandBeginDebugUtilsLabelEXT_1;
	public static void CommandEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) => CommandEndDebugUtilsLabelEXT_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndDebugUtilsLabelEXT_0;
	public static void CommandInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo) => CommandInsertDebugUtilsLabelEXT_0(commandBuffer, labelInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugUtilsLabelEXT*, void> CommandInsertDebugUtilsLabelEXT_0;
	public static void CommandInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, ref VkDebugUtilsLabelEXT labelInfo) => CommandInsertDebugUtilsLabelEXT_1(commandBuffer, ref labelInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugUtilsLabelEXT, void> CommandInsertDebugUtilsLabelEXT_1;
	public static VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkDebugUtilsMessengerEXT messenger) => CreateDebugUtilsMessengerEXT_0(instance, createInfo, allocator, out messenger);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugUtilsMessengerEXT, VkResult> CreateDebugUtilsMessengerEXT_0;
	public static VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkDebugUtilsMessengerEXT messenger) => CreateDebugUtilsMessengerEXT_1(instance, createInfo, ref allocator, out messenger);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugUtilsMessengerEXT, VkResult> CreateDebugUtilsMessengerEXT_1;
	public static VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkDebugUtilsMessengerEXT messenger) => CreateDebugUtilsMessengerEXT_2(instance, ref createInfo, allocator, out messenger);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugUtilsMessengerCreateInfoEXT, VkAllocationCallbacks*, out VkDebugUtilsMessengerEXT, VkResult> CreateDebugUtilsMessengerEXT_2;
	public static VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, ref VkDebugUtilsMessengerCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkDebugUtilsMessengerEXT messenger) => CreateDebugUtilsMessengerEXT_3(instance, ref createInfo, ref allocator, out messenger);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugUtilsMessengerCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugUtilsMessengerEXT, VkResult> CreateDebugUtilsMessengerEXT_3;
	public static void DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* allocator) => DestroyDebugUtilsMessengerEXT_0(instance, messenger, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void> DestroyDebugUtilsMessengerEXT_0;
	public static void DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, ref VkAllocationCallbacks allocator) => DestroyDebugUtilsMessengerEXT_1(instance, messenger, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerEXT, ref VkAllocationCallbacks, void> DestroyDebugUtilsMessengerEXT_1;
	public static void SubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* callbackData) => SubmitDebugUtilsMessageEXT_0(instance, messageSeverity, messageTypes, callbackData);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void> SubmitDebugUtilsMessageEXT_0;
	public static void SubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, ref VkDebugUtilsMessengerCallbackDataEXT callbackData) => SubmitDebugUtilsMessageEXT_1(instance, messageSeverity, messageTypes, ref callbackData);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, ref VkDebugUtilsMessengerCallbackDataEXT, void> SubmitDebugUtilsMessageEXT_1;
	public static VkResult GetAndroidHardwareBufferPropertiesANDROID(VkDevice device, void* buffer, out VkAndroidHardwareBufferPropertiesANDROID properties) => GetAndroidHardwareBufferPropertiesANDROID_0(device, buffer, out properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, void*, out VkAndroidHardwareBufferPropertiesANDROID, VkResult> GetAndroidHardwareBufferPropertiesANDROID_0;
	public static VkResult GetMemoryAndroidHardwareBufferANDROID(VkDevice device, VkMemoryGetAndroidHardwareBufferInfoANDROID* info, void** buffer) => GetMemoryAndroidHardwareBufferANDROID_0(device, info, buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetAndroidHardwareBufferInfoANDROID*, void**, VkResult> GetMemoryAndroidHardwareBufferANDROID_0;
	public static VkResult GetMemoryAndroidHardwareBufferANDROID(VkDevice device, ref VkMemoryGetAndroidHardwareBufferInfoANDROID info, void** buffer) => GetMemoryAndroidHardwareBufferANDROID_1(device, ref info, buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetAndroidHardwareBufferInfoANDROID, void**, VkResult> GetMemoryAndroidHardwareBufferANDROID_1;
	public static void CommandSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* sampleLocationsInfo) => CommandSetSampleLocationsEXT_0(commandBuffer, sampleLocationsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleLocationsInfoEXT*, void> CommandSetSampleLocationsEXT_0;
	public static void CommandSetSampleLocationsEXT(VkCommandBuffer commandBuffer, ref VkSampleLocationsInfoEXT sampleLocationsInfo) => CommandSetSampleLocationsEXT_1(commandBuffer, ref sampleLocationsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSampleLocationsInfoEXT, void> CommandSetSampleLocationsEXT_1;
	public static void GetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, out VkMultisamplePropertiesEXT multisampleProperties) => GetPhysicalDeviceMultisamplePropertiesEXT_0(physicalDevice, samples, out multisampleProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSampleCountFlags, out VkMultisamplePropertiesEXT, void> GetPhysicalDeviceMultisamplePropertiesEXT_0;
	[Obsolete("Use GetImageMemoryRequirements2")]
	public static void GetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements) => GetImageMemoryRequirements2KHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2*, out VkMemoryRequirements2, void> GetImageMemoryRequirements2KHR_0;
	[Obsolete("Use GetImageMemoryRequirements2")]
	public static void GetImageMemoryRequirements2KHR(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => GetImageMemoryRequirements2KHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2, out VkMemoryRequirements2, void> GetImageMemoryRequirements2KHR_1;
	[Obsolete("Use GetBufferMemoryRequirements2")]
	public static void GetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements) => GetBufferMemoryRequirements2KHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2*, out VkMemoryRequirements2, void> GetBufferMemoryRequirements2KHR_0;
	[Obsolete("Use GetBufferMemoryRequirements2")]
	public static void GetBufferMemoryRequirements2KHR(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements) => GetBufferMemoryRequirements2KHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2, out VkMemoryRequirements2, void> GetBufferMemoryRequirements2KHR_1;
	[Obsolete("Use GetImageSparseMemoryRequirements2")]
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_0(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2KHR_0;
	[Obsolete("Use GetImageSparseMemoryRequirements2")]
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_1(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, ref uint, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2KHR_1;
	[Obsolete("Use GetImageSparseMemoryRequirements2")]
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, uint*, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2KHR_2;
	[Obsolete("Use GetImageSparseMemoryRequirements2")]
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_3(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, ref uint, VkSparseImageMemoryRequirements2[], void> GetImageSparseMemoryRequirements2KHR_3;
	public static VkResult CreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkAccelerationStructureKHR accelerationStructure) => CreateAccelerationStructureKHR_0(device, createInfo, allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, out VkAccelerationStructureKHR, VkResult> CreateAccelerationStructureKHR_0;
	public static VkResult CreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkAccelerationStructureKHR accelerationStructure) => CreateAccelerationStructureKHR_1(device, createInfo, ref allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoKHR*, ref VkAllocationCallbacks, out VkAccelerationStructureKHR, VkResult> CreateAccelerationStructureKHR_1;
	public static VkResult CreateAccelerationStructureKHR(VkDevice device, ref VkAccelerationStructureCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkAccelerationStructureKHR accelerationStructure) => CreateAccelerationStructureKHR_2(device, ref createInfo, allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoKHR, VkAllocationCallbacks*, out VkAccelerationStructureKHR, VkResult> CreateAccelerationStructureKHR_2;
	public static VkResult CreateAccelerationStructureKHR(VkDevice device, ref VkAccelerationStructureCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkAccelerationStructureKHR accelerationStructure) => CreateAccelerationStructureKHR_3(device, ref createInfo, ref allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoKHR, ref VkAllocationCallbacks, out VkAccelerationStructureKHR, VkResult> CreateAccelerationStructureKHR_3;
	public static void DestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* allocator) => DestroyAccelerationStructureKHR_0(device, accelerationStructure, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void> DestroyAccelerationStructureKHR_0;
	public static void DestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, ref VkAllocationCallbacks allocator) => DestroyAccelerationStructureKHR_1(device, accelerationStructure, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureKHR, ref VkAllocationCallbacks, void> DestroyAccelerationStructureKHR_1;
	public static void CommandBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkAccelerationStructureBuildRangeInfoKHR[] buildRangeInfos) => CommandBuildAccelerationStructuresKHR_0(commandBuffer, infoCount, infos, buildRangeInfos);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkAccelerationStructureBuildRangeInfoKHR[], void> CommandBuildAccelerationStructuresKHR_0;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkDeviceAddress* indirectDeviceAddresses, uint* indirectStrides, uint** maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_0(commandBuffer, infoCount, infos, indirectDeviceAddresses, indirectStrides, maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, uint*, uint**, void> CommandBuildAccelerationStructuresIndirectKHR_0;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkDeviceAddress* indirectDeviceAddresses, uint* indirectStrides, ref uint maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_1(commandBuffer, infoCount, infos, indirectDeviceAddresses, indirectStrides, ref maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, uint*, ref uint, void> CommandBuildAccelerationStructuresIndirectKHR_1;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkDeviceAddress* indirectDeviceAddresses, ref uint indirectStrides, uint** maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_2(commandBuffer, infoCount, infos, indirectDeviceAddresses, ref indirectStrides, maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, ref uint, uint**, void> CommandBuildAccelerationStructuresIndirectKHR_2;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkDeviceAddress* indirectDeviceAddresses, ref uint indirectStrides, ref uint maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_3(commandBuffer, infoCount, infos, indirectDeviceAddresses, ref indirectStrides, ref maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, ref uint, ref uint, void> CommandBuildAccelerationStructuresIndirectKHR_3;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, ref VkDeviceAddress indirectDeviceAddresses, uint* indirectStrides, uint** maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_4(commandBuffer, infoCount, infos, ref indirectDeviceAddresses, indirectStrides, maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, uint*, uint**, void> CommandBuildAccelerationStructuresIndirectKHR_4;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, ref VkDeviceAddress indirectDeviceAddresses, uint* indirectStrides, ref uint maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_5(commandBuffer, infoCount, infos, ref indirectDeviceAddresses, indirectStrides, ref maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, uint*, ref uint, void> CommandBuildAccelerationStructuresIndirectKHR_5;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, ref VkDeviceAddress indirectDeviceAddresses, ref uint indirectStrides, uint** maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_6(commandBuffer, infoCount, infos, ref indirectDeviceAddresses, ref indirectStrides, maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, ref uint, uint**, void> CommandBuildAccelerationStructuresIndirectKHR_6;
	public static void CommandBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, ref VkDeviceAddress indirectDeviceAddresses, ref uint indirectStrides, ref uint maxPrimitiveCounts) => CommandBuildAccelerationStructuresIndirectKHR_7(commandBuffer, infoCount, infos, ref indirectDeviceAddresses, ref indirectStrides, ref maxPrimitiveCounts);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, ref uint, ref uint, void> CommandBuildAccelerationStructuresIndirectKHR_7;
	public static VkResult BuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR[] infos, VkAccelerationStructureBuildRangeInfoKHR[] buildRangeInfos) => BuildAccelerationStructuresKHR_0(device, deferredOperation, infoCount, infos, buildRangeInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkAccelerationStructureBuildRangeInfoKHR[], VkResult> BuildAccelerationStructuresKHR_0;
	public static VkResult CopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* info) => CopyAccelerationStructureKHR_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult> CopyAccelerationStructureKHR_0;
	public static VkResult CopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyAccelerationStructureInfoKHR info) => CopyAccelerationStructureKHR_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyAccelerationStructureInfoKHR, VkResult> CopyAccelerationStructureKHR_1;
	public static VkResult CopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* info) => CopyAccelerationStructureToMemoryKHR_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult> CopyAccelerationStructureToMemoryKHR_0;
	public static VkResult CopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyAccelerationStructureToMemoryInfoKHR info) => CopyAccelerationStructureToMemoryKHR_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyAccelerationStructureToMemoryInfoKHR, VkResult> CopyAccelerationStructureToMemoryKHR_1;
	public static VkResult CopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* info) => CopyMemoryToAccelerationStructureKHR_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult> CopyMemoryToAccelerationStructureKHR_0;
	public static VkResult CopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyMemoryToAccelerationStructureInfoKHR info) => CopyMemoryToAccelerationStructureKHR_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMemoryToAccelerationStructureInfoKHR, VkResult> CopyMemoryToAccelerationStructureKHR_1;
	public static VkResult WriteAccelerationStructuresPropertiesKHR(VkDevice device, uint accelerationStructureCount, VkAccelerationStructureKHR[] accelerationStructures, VkQueryType queryType, nuint dataSize, void* data, nuint stride) => WriteAccelerationStructuresPropertiesKHR_0(device, accelerationStructureCount, accelerationStructures, queryType, dataSize, data, stride);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkAccelerationStructureKHR[], VkQueryType, nuint, void*, nuint, VkResult> WriteAccelerationStructuresPropertiesKHR_0;
	public static void CommandCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* info) => CommandCopyAccelerationStructureKHR_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void> CommandCopyAccelerationStructureKHR_0;
	public static void CommandCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, ref VkCopyAccelerationStructureInfoKHR info) => CommandCopyAccelerationStructureKHR_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyAccelerationStructureInfoKHR, void> CommandCopyAccelerationStructureKHR_1;
	public static void CommandCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* info) => CommandCopyAccelerationStructureToMemoryKHR_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void> CommandCopyAccelerationStructureToMemoryKHR_0;
	public static void CommandCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, ref VkCopyAccelerationStructureToMemoryInfoKHR info) => CommandCopyAccelerationStructureToMemoryKHR_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyAccelerationStructureToMemoryInfoKHR, void> CommandCopyAccelerationStructureToMemoryKHR_1;
	public static void CommandCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* info) => CommandCopyMemoryToAccelerationStructureKHR_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void> CommandCopyMemoryToAccelerationStructureKHR_0;
	public static void CommandCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, ref VkCopyMemoryToAccelerationStructureInfoKHR info) => CommandCopyMemoryToAccelerationStructureKHR_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMemoryToAccelerationStructureInfoKHR, void> CommandCopyMemoryToAccelerationStructureKHR_1;
	public static VkDeviceAddress GetAccelerationStructureDeviceAddressKHR(VkDevice device, out VkAccelerationStructureDeviceAddressInfoKHR info) => GetAccelerationStructureDeviceAddressKHR_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkAccelerationStructureDeviceAddressInfoKHR, VkDeviceAddress> GetAccelerationStructureDeviceAddressKHR_0;
	public static void CommandWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR[] accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => CommandWriteAccelerationStructuresPropertiesKHR_0(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureKHR[], VkQueryType, VkQueryPool, uint, void> CommandWriteAccelerationStructuresPropertiesKHR_0;
	public static void GetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, VkAccelerationStructureVersionInfoKHR* versionInfo, out VkAccelerationStructureCompatibilityKHR compatibility) => GetDeviceAccelerationStructureCompatibilityKHR_0(device, versionInfo, out compatibility);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureVersionInfoKHR*, out VkAccelerationStructureCompatibilityKHR, void> GetDeviceAccelerationStructureCompatibilityKHR_0;
	public static void GetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, ref VkAccelerationStructureVersionInfoKHR versionInfo, out VkAccelerationStructureCompatibilityKHR compatibility) => GetDeviceAccelerationStructureCompatibilityKHR_1(device, ref versionInfo, out compatibility);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureVersionInfoKHR, out VkAccelerationStructureCompatibilityKHR, void> GetDeviceAccelerationStructureCompatibilityKHR_1;
	public static void GetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* buildInfo, uint* maxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR sizeInfo) => GetAccelerationStructureBuildSizesKHR_0(device, buildType, buildInfo, maxPrimitiveCounts, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, out VkAccelerationStructureBuildSizesInfoKHR, void> GetAccelerationStructureBuildSizesKHR_0;
	public static void GetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* buildInfo, ref uint maxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR sizeInfo) => GetAccelerationStructureBuildSizesKHR_1(device, buildType, buildInfo, ref maxPrimitiveCounts, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, ref uint, out VkAccelerationStructureBuildSizesInfoKHR, void> GetAccelerationStructureBuildSizesKHR_1;
	public static void GetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, ref VkAccelerationStructureBuildGeometryInfoKHR buildInfo, uint* maxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR sizeInfo) => GetAccelerationStructureBuildSizesKHR_2(device, buildType, ref buildInfo, maxPrimitiveCounts, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkAccelerationStructureBuildGeometryInfoKHR, uint*, out VkAccelerationStructureBuildSizesInfoKHR, void> GetAccelerationStructureBuildSizesKHR_2;
	public static void GetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, ref VkAccelerationStructureBuildGeometryInfoKHR buildInfo, ref uint maxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR sizeInfo) => GetAccelerationStructureBuildSizesKHR_3(device, buildType, ref buildInfo, ref maxPrimitiveCounts, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkAccelerationStructureBuildGeometryInfoKHR, ref uint, out VkAccelerationStructureBuildSizesInfoKHR, void> GetAccelerationStructureBuildSizesKHR_3;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_0(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_0;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_1(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_1;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_2(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_2;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_3(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_3;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_4(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_4;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_5(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_5;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_6(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_6;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_7(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_7;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_8(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_8;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_9(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_9;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_10(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_10;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_11(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_11;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_12(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_12;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_13(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_13;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_14(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> CommandTraceRaysKHR_14;
	public static void CommandTraceRaysKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, uint width, uint height, uint depth) => CommandTraceRaysKHR_15(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void> CommandTraceRaysKHR_15;
	public static VkResult CreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateRayTracingPipelinesKHR_0(device, deferredOperation, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateRayTracingPipelinesKHR_0;
	public static VkResult CreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateRayTracingPipelinesKHR_1(device, deferredOperation, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateRayTracingPipelinesKHR_1;
	public static VkResult GetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* data) => GetRayTracingShaderGroupHandlesKHR_0(device, pipeline, firstGroup, groupCount, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult> GetRayTracingShaderGroupHandlesKHR_0;
	public static VkResult GetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* data) => GetRayTracingCaptureReplayShaderGroupHandlesKHR_0(device, pipeline, firstGroup, groupCount, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult> GetRayTracingCaptureReplayShaderGroupHandlesKHR_0;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_0(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_0;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_1(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_1;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_2(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_2;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_3(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_3;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_4(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_4;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_5(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_5;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_6(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_6;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_7(commandBuffer, raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_7;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_8(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_8;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_9(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_9;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_10(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_10;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_11(commandBuffer, ref raygenShaderBindingTable, missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_11;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_12(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_12;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_13(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_13;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_14(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_14;
	public static void CommandTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, ref VkStridedDeviceAddressRegionKHR raygenShaderBindingTable, ref VkStridedDeviceAddressRegionKHR missShaderBindingTable, ref VkStridedDeviceAddressRegionKHR hitShaderBindingTable, ref VkStridedDeviceAddressRegionKHR callableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirectKHR_15(commandBuffer, ref raygenShaderBindingTable, ref missShaderBindingTable, ref hitShaderBindingTable, ref callableShaderBindingTable, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void> CommandTraceRaysIndirectKHR_15;
	public static VkDeviceSize GetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint group, VkShaderGroupShaderKHR groupShader) => GetRayTracingShaderGroupStackSizeKHR_0(device, pipeline, group, groupShader);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, VkDeviceSize> GetRayTracingShaderGroupStackSizeKHR_0;
	public static void CommandSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint pipelineStackSize) => CommandSetRayTracingPipelineStackSizeKHR_0(commandBuffer, pipelineStackSize);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetRayTracingPipelineStackSizeKHR_0;
	[Obsolete("Use CreateSamplerYcbcrConversion")]
	public static void CreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversionKHR_0(device, createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, void> CreateSamplerYcbcrConversionKHR_0;
	[Obsolete("Use CreateSamplerYcbcrConversion")]
	public static void CreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversionKHR_1(device, createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, void> CreateSamplerYcbcrConversionKHR_1;
	[Obsolete("Use CreateSamplerYcbcrConversion")]
	public static void CreateSamplerYcbcrConversionKHR(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversionKHR_2(device, ref createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, void> CreateSamplerYcbcrConversionKHR_2;
	[Obsolete("Use CreateSamplerYcbcrConversion")]
	public static void CreateSamplerYcbcrConversionKHR(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversion ycbcrConversion) => CreateSamplerYcbcrConversionKHR_3(device, ref createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, void> CreateSamplerYcbcrConversionKHR_3;
	[Obsolete("Use DestroySamplerYcbcrConversion")]
	public static void DestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator) => DestroySamplerYcbcrConversionKHR_0(device, ycbcrConversion, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void> DestroySamplerYcbcrConversionKHR_0;
	[Obsolete("Use DestroySamplerYcbcrConversion")]
	public static void DestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks allocator) => DestroySamplerYcbcrConversionKHR_1(device, ycbcrConversion, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, ref VkAllocationCallbacks, void> DestroySamplerYcbcrConversionKHR_1;
	[Obsolete("Use BindBufferMemory2")]
	public static void BindBufferMemory2KHR(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo[] bindInfos) => BindBufferMemory2KHR_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfo[], void> BindBufferMemory2KHR_0;
	[Obsolete("Use BindImageMemory2")]
	public static void BindImageMemory2KHR(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo[] bindInfos) => BindImageMemory2KHR_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfo[], void> BindImageMemory2KHR_0;
	public static VkResult GetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, out VkImageDrmFormatModifierPropertiesEXT properties) => GetImageDrmFormatModifierPropertiesEXT_0(device, image, out properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkImageDrmFormatModifierPropertiesEXT, VkResult> GetImageDrmFormatModifierPropertiesEXT_0;
	public static VkResult CreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_0(device, createInfo, allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_0;
	public static VkResult CreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_1(device, createInfo, ref allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_1;
	public static VkResult CreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_2(device, ref createInfo, allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_2;
	public static VkResult CreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_3(device, ref createInfo, ref allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_3;
	public static void DestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* allocator) => DestroyValidationCacheEXT_0(device, validationCache, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void> DestroyValidationCacheEXT_0;
	public static void DestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, ref VkAllocationCallbacks allocator) => DestroyValidationCacheEXT_1(device, validationCache, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref VkAllocationCallbacks, void> DestroyValidationCacheEXT_1;
	public static VkResult MergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT destinationCache, uint sourceCacheCount, VkValidationCacheEXT[] sourceCaches) => MergeValidationCachesEXT_0(device, destinationCache, sourceCacheCount, sourceCaches);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT[], VkResult> MergeValidationCachesEXT_0;
	public static VkResult GetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, nuint* dataSize, void* data) => GetValidationCacheDataEXT_0(device, validationCache, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, nuint*, void*, VkResult> GetValidationCacheDataEXT_0;
	public static VkResult GetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, ref nuint dataSize, void* data) => GetValidationCacheDataEXT_1(device, validationCache, ref dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref nuint, void*, VkResult> GetValidationCacheDataEXT_1;
	public static void CommandBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) => CommandBindShadingRateImageNV_0(commandBuffer, imageView, imageLayout);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImageView, VkImageLayout, void> CommandBindShadingRateImageNV_0;
	public static void CommandSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* shadingRatePalettes) => CommandSetViewportShadingRatePaletteNV_0(commandBuffer, firstViewport, viewportCount, shadingRatePalettes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void> CommandSetViewportShadingRatePaletteNV_0;
	public static void CommandSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkShadingRatePaletteNV shadingRatePalettes) => CommandSetViewportShadingRatePaletteNV_1(commandBuffer, firstViewport, viewportCount, ref shadingRatePalettes);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkShadingRatePaletteNV, void> CommandSetViewportShadingRatePaletteNV_1;
	public static void CommandSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV[] customSampleOrders) => CommandSetCoarseSampleOrderNV_0(commandBuffer, sampleOrderType, customSampleOrderCount, customSampleOrders);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV[], void> CommandSetCoarseSampleOrderNV_0;
	public static VkResult CreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, out VkAccelerationStructureNV accelerationStructure) => CreateAccelerationStructureNV_0(device, createInfo, allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, out VkAccelerationStructureNV, VkResult> CreateAccelerationStructureNV_0;
	public static VkResult CreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* createInfo, ref VkAllocationCallbacks allocator, out VkAccelerationStructureNV accelerationStructure) => CreateAccelerationStructureNV_1(device, createInfo, ref allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoNV*, ref VkAllocationCallbacks, out VkAccelerationStructureNV, VkResult> CreateAccelerationStructureNV_1;
	public static VkResult CreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfoNV createInfo, VkAllocationCallbacks* allocator, out VkAccelerationStructureNV accelerationStructure) => CreateAccelerationStructureNV_2(device, ref createInfo, allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoNV, VkAllocationCallbacks*, out VkAccelerationStructureNV, VkResult> CreateAccelerationStructureNV_2;
	public static VkResult CreateAccelerationStructureNV(VkDevice device, ref VkAccelerationStructureCreateInfoNV createInfo, ref VkAllocationCallbacks allocator, out VkAccelerationStructureNV accelerationStructure) => CreateAccelerationStructureNV_3(device, ref createInfo, ref allocator, out accelerationStructure);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoNV, ref VkAllocationCallbacks, out VkAccelerationStructureNV, VkResult> CreateAccelerationStructureNV_3;
	public static void DestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* allocator) => DestroyAccelerationStructureNV_0(device, accelerationStructure, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*, void> DestroyAccelerationStructureNV_0;
	public static void DestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, ref VkAllocationCallbacks allocator) => DestroyAccelerationStructureNV_1(device, accelerationStructure, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, ref VkAllocationCallbacks, void> DestroyAccelerationStructureNV_1;
	public static void GetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* info, out VkMemoryRequirements2KHR memoryRequirements) => GetAccelerationStructureMemoryRequirementsNV_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, out VkMemoryRequirements2KHR, void> GetAccelerationStructureMemoryRequirementsNV_0;
	public static void GetAccelerationStructureMemoryRequirementsNV(VkDevice device, ref VkAccelerationStructureMemoryRequirementsInfoNV info, out VkMemoryRequirements2KHR memoryRequirements) => GetAccelerationStructureMemoryRequirementsNV_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureMemoryRequirementsInfoNV, out VkMemoryRequirements2KHR, void> GetAccelerationStructureMemoryRequirementsNV_1;
	public static VkResult BindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoNV[] bindInfos) => BindAccelerationStructureMemoryNV_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV[], VkResult> BindAccelerationStructureMemoryNV_0;
	public static void CommandBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV destination, VkAccelerationStructureNV source, VkBuffer scratch, VkDeviceSize scratchOffset) => CommandBuildAccelerationStructureNV_0(commandBuffer, info, instanceData, instanceOffset, update, destination, source, scratch, scratchOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void> CommandBuildAccelerationStructureNV_0;
	public static void CommandBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, ref VkAccelerationStructureInfoNV info, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV destination, VkAccelerationStructureNV source, VkBuffer scratch, VkDeviceSize scratchOffset) => CommandBuildAccelerationStructureNV_1(commandBuffer, ref info, instanceData, instanceOffset, update, destination, source, scratch, scratchOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void> CommandBuildAccelerationStructureNV_1;
	public static void CommandCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV destination, VkAccelerationStructureNV source, VkCopyAccelerationStructureModeKHR mode) => CommandCopyAccelerationStructureNV_0(commandBuffer, destination, source, mode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR, void> CommandCopyAccelerationStructureNV_0;
	public static void CommandTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth) => CommandTraceRaysNV_0(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint, uint, uint, void> CommandTraceRaysNV_0;
	public static VkResult CreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateRayTracingPipelinesNV_0(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateRayTracingPipelinesNV_0;
	public static VkResult CreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateRayTracingPipelinesNV_1(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateRayTracingPipelinesNV_1;
	[Obsolete("Use GetRayTracingShaderGroupHandlesKHR")]
	public static void GetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* data) => GetRayTracingShaderGroupHandlesNV_0(device, pipeline, firstGroup, groupCount, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, void> GetRayTracingShaderGroupHandlesNV_0;
	public static VkResult GetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, nuint dataSize, void* data) => GetAccelerationStructureHandleNV_0(device, accelerationStructure, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, nuint, void*, VkResult> GetAccelerationStructureHandleNV_0;
	public static void CommandWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureNV[] accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => CommandWriteAccelerationStructuresPropertiesNV_0(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureNV[], VkQueryType, VkQueryPool, uint, void> CommandWriteAccelerationStructuresPropertiesNV_0;
	public static VkResult CompileDeferredNV(VkDevice device, VkPipeline pipeline, uint shader) => CompileDeferredNV_0(device, pipeline, shader);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, VkResult> CompileDeferredNV_0;
	[Obsolete("Use GetDescriptorSetLayoutSupport")]
	public static void GetDescriptorSetLayoutSupportKHR(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, out VkDescriptorSetLayoutSupport support) => GetDescriptorSetLayoutSupportKHR_0(device, createInfo, out support);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, out VkDescriptorSetLayoutSupport, void> GetDescriptorSetLayoutSupportKHR_0;
	[Obsolete("Use GetDescriptorSetLayoutSupport")]
	public static void GetDescriptorSetLayoutSupportKHR(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, out VkDescriptorSetLayoutSupport support) => GetDescriptorSetLayoutSupportKHR_1(device, ref createInfo, out support);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, out VkDescriptorSetLayoutSupport, void> GetDescriptorSetLayoutSupportKHR_1;
	[Obsolete("Use CommandDrawIndirectCount")]
	public static void CommandDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndirectCountKHR_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirectCountKHR_0;
	[Obsolete("Use CommandDrawIndexedIndirectCount")]
	public static void CommandDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndexedIndirectCountKHR_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirectCountKHR_0;
	public static VkResult GetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, out VkMemoryHostPointerPropertiesEXT memoryHostPointerProperties) => GetMemoryHostPointerPropertiesEXT_0(device, handleType, hostPointer, out memoryHostPointerProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, void*, out VkMemoryHostPointerPropertiesEXT, VkResult> GetMemoryHostPointerPropertiesEXT_0;
	public static void CommandWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, uint marker) => CommandWriteBufferMarkerAMD_0(commandBuffer, pipelineStage, destinationBuffer, destinationOffset, marker);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, VkDeviceSize, uint, void> CommandWriteBufferMarkerAMD_0;
	public static VkResult GetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint* timeDomainCount, [In, Out] VkTimeDomainEXT[] timeDomains) => GetPhysicalDeviceCalibrateableTimeDomainsEXT_0(physicalDevice, timeDomainCount, timeDomains);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkTimeDomainEXT[], VkResult> GetPhysicalDeviceCalibrateableTimeDomainsEXT_0;
	public static VkResult GetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, ref uint timeDomainCount, [In, Out] VkTimeDomainEXT[] timeDomains) => GetPhysicalDeviceCalibrateableTimeDomainsEXT_1(physicalDevice, ref timeDomainCount, timeDomains);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkTimeDomainEXT[], VkResult> GetPhysicalDeviceCalibrateableTimeDomainsEXT_1;
	public static VkResult GetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoEXT[] timestampInfos, ulong* timestamps, out ulong maxDeviation) => GetCalibratedTimestampsEXT_0(device, timestampCount, timestampInfos, timestamps, out maxDeviation);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkCalibratedTimestampInfoEXT[], ulong*, out ulong, VkResult> GetCalibratedTimestampsEXT_0;
	public static VkResult GetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoEXT[] timestampInfos, ref ulong timestamps, out ulong maxDeviation) => GetCalibratedTimestampsEXT_1(device, timestampCount, timestampInfos, ref timestamps, out maxDeviation);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkCalibratedTimestampInfoEXT[], ref ulong, out ulong, VkResult> GetCalibratedTimestampsEXT_1;
	public static void CommandDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask) => CommandDrawMeshTasksNV_0(commandBuffer, taskCount, firstTask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, void> CommandDrawMeshTasksNV_0;
	public static void CommandDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawMeshTasksIndirectNV_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawMeshTasksIndirectNV_0;
	public static void CommandDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawMeshTasksIndirectCountNV_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawMeshTasksIndirectCountNV_0;
	public static void CommandSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D[] exclusiveScissors) => CommandSetExclusiveScissorNV_0(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, exclusiveScissors);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void> CommandSetExclusiveScissorNV_0;
	public static void CommandSetCheckpointNV(VkCommandBuffer commandBuffer, void* checkpointMarker) => CommandSetCheckpointNV_0(commandBuffer, checkpointMarker);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void*, void> CommandSetCheckpointNV_0;
	public static void GetQueueCheckpointDataNV(VkQueue queue, uint* checkpointDataCount, [In, Out] VkCheckpointDataNV[] checkpointData) => GetQueueCheckpointDataNV_0(queue, checkpointDataCount, checkpointData);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint*, VkCheckpointDataNV[], void> GetQueueCheckpointDataNV_0;
	public static void GetQueueCheckpointDataNV(VkQueue queue, ref uint checkpointDataCount, [In, Out] VkCheckpointDataNV[] checkpointData) => GetQueueCheckpointDataNV_1(queue, ref checkpointDataCount, checkpointData);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref uint, VkCheckpointDataNV[], void> GetQueueCheckpointDataNV_1;
	[Obsolete("Use GetSemaphoreCounterValue")]
	public static void GetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, out ulong value) => GetSemaphoreCounterValueKHR_0(device, semaphore, out value);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, out ulong, void> GetSemaphoreCounterValueKHR_0;
	[Obsolete("Use WaitSemaphores")]
	public static void WaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout) => WaitSemaphoresKHR_0(device, waitInfo, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreWaitInfo*, ulong, void> WaitSemaphoresKHR_0;
	[Obsolete("Use WaitSemaphores")]
	public static void WaitSemaphoresKHR(VkDevice device, ref VkSemaphoreWaitInfo waitInfo, ulong timeout) => WaitSemaphoresKHR_1(device, ref waitInfo, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreWaitInfo, ulong, void> WaitSemaphoresKHR_1;
	[Obsolete("Use SignalSemaphore")]
	public static void SignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfo* signalInfo) => SignalSemaphoreKHR_0(device, signalInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreSignalInfo*, void> SignalSemaphoreKHR_0;
	[Obsolete("Use SignalSemaphore")]
	public static void SignalSemaphoreKHR(VkDevice device, ref VkSemaphoreSignalInfo signalInfo) => SignalSemaphoreKHR_1(device, ref signalInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreSignalInfo, void> SignalSemaphoreKHR_1;
	public static VkResult InitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* initializeInfo) => InitializePerformanceApiINTEL_0(device, initializeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult> InitializePerformanceApiINTEL_0;
	public static VkResult InitializePerformanceApiINTEL(VkDevice device, ref VkInitializePerformanceApiInfoINTEL initializeInfo) => InitializePerformanceApiINTEL_1(device, ref initializeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkInitializePerformanceApiInfoINTEL, VkResult> InitializePerformanceApiINTEL_1;
	public static void UninitializePerformanceApiINTEL(VkDevice device) => UninitializePerformanceApiINTEL_0(device);
	private static delegate* unmanaged[Cdecl]<VkDevice, void> UninitializePerformanceApiINTEL_0;
	public static VkResult CommandSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* markerInfo) => CommandSetPerformanceMarkerINTEL_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult> CommandSetPerformanceMarkerINTEL_0;
	public static VkResult CommandSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, ref VkPerformanceMarkerInfoINTEL markerInfo) => CommandSetPerformanceMarkerINTEL_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceMarkerInfoINTEL, VkResult> CommandSetPerformanceMarkerINTEL_1;
	public static VkResult CommandSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* markerInfo) => CommandSetPerformanceStreamMarkerINTEL_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult> CommandSetPerformanceStreamMarkerINTEL_0;
	public static VkResult CommandSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, ref VkPerformanceStreamMarkerInfoINTEL markerInfo) => CommandSetPerformanceStreamMarkerINTEL_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceStreamMarkerInfoINTEL, VkResult> CommandSetPerformanceStreamMarkerINTEL_1;
	public static VkResult CommandSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* overrideInfo) => CommandSetPerformanceOverrideINTEL_0(commandBuffer, overrideInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult> CommandSetPerformanceOverrideINTEL_0;
	public static VkResult CommandSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, ref VkPerformanceOverrideInfoINTEL overrideInfo) => CommandSetPerformanceOverrideINTEL_1(commandBuffer, ref overrideInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceOverrideInfoINTEL, VkResult> CommandSetPerformanceOverrideINTEL_1;
	public static VkResult AcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* acquireInfo, VkPerformanceConfigurationINTEL* configuration) => AcquirePerformanceConfigurationINTEL_0(device, acquireInfo, configuration);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult> AcquirePerformanceConfigurationINTEL_0;
	public static VkResult AcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* acquireInfo, ref VkPerformanceConfigurationINTEL configuration) => AcquirePerformanceConfigurationINTEL_1(device, acquireInfo, ref configuration);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, ref VkPerformanceConfigurationINTEL, VkResult> AcquirePerformanceConfigurationINTEL_1;
	public static VkResult AcquirePerformanceConfigurationINTEL(VkDevice device, ref VkPerformanceConfigurationAcquireInfoINTEL acquireInfo, VkPerformanceConfigurationINTEL* configuration) => AcquirePerformanceConfigurationINTEL_2(device, ref acquireInfo, configuration);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPerformanceConfigurationAcquireInfoINTEL, VkPerformanceConfigurationINTEL*, VkResult> AcquirePerformanceConfigurationINTEL_2;
	public static VkResult AcquirePerformanceConfigurationINTEL(VkDevice device, ref VkPerformanceConfigurationAcquireInfoINTEL acquireInfo, ref VkPerformanceConfigurationINTEL configuration) => AcquirePerformanceConfigurationINTEL_3(device, ref acquireInfo, ref configuration);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPerformanceConfigurationAcquireInfoINTEL, ref VkPerformanceConfigurationINTEL, VkResult> AcquirePerformanceConfigurationINTEL_3;
	public static VkResult ReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration) => ReleasePerformanceConfigurationINTEL_0(device, configuration);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationINTEL, VkResult> ReleasePerformanceConfigurationINTEL_0;
	public static VkResult QueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration) => QueueSetPerformanceConfigurationINTEL_0(queue, configuration);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkPerformanceConfigurationINTEL, VkResult> QueueSetPerformanceConfigurationINTEL_0;
	public static VkResult GetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, out VkPerformanceValueINTEL value) => GetPerformanceParameterINTEL_0(device, parameter, out value);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceParameterTypeINTEL, out VkPerformanceValueINTEL, VkResult> GetPerformanceParameterINTEL_0;
	public static void SetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) => SetLocalDimmingAMD_0(device, swapChain, localDimmingEnable);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkBool32, void> SetLocalDimmingAMD_0;
	public static VkResult GetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint* fragmentShadingRateCount, [In, Out] VkPhysicalDeviceFragmentShadingRateKHR[] fragmentShadingRates) => GetPhysicalDeviceFragmentShadingRatesKHR_0(physicalDevice, fragmentShadingRateCount, fragmentShadingRates);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR[], VkResult> GetPhysicalDeviceFragmentShadingRatesKHR_0;
	public static VkResult GetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, ref uint fragmentShadingRateCount, [In, Out] VkPhysicalDeviceFragmentShadingRateKHR[] fragmentShadingRates) => GetPhysicalDeviceFragmentShadingRatesKHR_1(physicalDevice, ref fragmentShadingRateCount, fragmentShadingRates);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceFragmentShadingRateKHR[], VkResult> GetPhysicalDeviceFragmentShadingRatesKHR_1;
	public static void CommandSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, VkExtent2D* fragmentSize, VkFragmentShadingRateCombinerOpKHR combinerOps) => CommandSetFragmentShadingRateKHR_0(commandBuffer, fragmentSize, combinerOps);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR, void> CommandSetFragmentShadingRateKHR_0;
	public static void CommandSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, ref VkExtent2D fragmentSize, VkFragmentShadingRateCombinerOpKHR combinerOps) => CommandSetFragmentShadingRateKHR_1(commandBuffer, ref fragmentSize, combinerOps);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkExtent2D, VkFragmentShadingRateCombinerOpKHR, void> CommandSetFragmentShadingRateKHR_1;
	[Obsolete("Use GetBufferDeviceAddress")]
	public static void GetBufferDeviceAddressEXT(VkDevice device, out VkBufferDeviceAddressInfo info) => GetBufferDeviceAddressEXT_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void> GetBufferDeviceAddressEXT_0;
	[Obsolete("Use GetPhysicalDeviceToolProperties")]
	public static void GetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint* toolCount, [In, Out] VkPhysicalDeviceToolProperties[] toolProperties) => GetPhysicalDeviceToolPropertiesEXT_0(physicalDevice, toolCount, toolProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties[], void> GetPhysicalDeviceToolPropertiesEXT_0;
	[Obsolete("Use GetPhysicalDeviceToolProperties")]
	public static void GetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, ref uint toolCount, [In, Out] VkPhysicalDeviceToolProperties[] toolProperties) => GetPhysicalDeviceToolPropertiesEXT_1(physicalDevice, ref toolCount, toolProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceToolProperties[], void> GetPhysicalDeviceToolPropertiesEXT_1;
	public static VkResult WaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, ulong presentId, ulong timeout) => WaitForPresentKHR_0(device, swapchain, presentId, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, ulong, VkResult> WaitForPresentKHR_0;
	public static VkResult GetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkCooperativeMatrixPropertiesNV[] properties) => GetPhysicalDeviceCooperativeMatrixPropertiesNV_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV[], VkResult> GetPhysicalDeviceCooperativeMatrixPropertiesNV_0;
	public static VkResult GetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkCooperativeMatrixPropertiesNV[] properties) => GetPhysicalDeviceCooperativeMatrixPropertiesNV_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkCooperativeMatrixPropertiesNV[], VkResult> GetPhysicalDeviceCooperativeMatrixPropertiesNV_1;
	public static VkResult GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint* combinationCount, [In, Out] VkFramebufferMixedSamplesCombinationNV[] combinations) => GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_0(physicalDevice, combinationCount, combinations);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV[], VkResult> GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_0;
	public static VkResult GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, ref uint combinationCount, [In, Out] VkFramebufferMixedSamplesCombinationNV[] combinations) => GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_1(physicalDevice, ref combinationCount, combinations);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkFramebufferMixedSamplesCombinationNV[], VkResult> GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_1;
	public static VkResult GetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModes2EXT_0(physicalDevice, surfaceInfo, presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModes2EXT_0;
	public static VkResult GetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, ref uint presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModes2EXT_1(physicalDevice, surfaceInfo, ref presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModes2EXT_1;
	public static VkResult GetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, uint* presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModes2EXT_2(physicalDevice, ref surfaceInfo, presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModes2EXT_2;
	public static VkResult GetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, ref uint presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModes2EXT_3(physicalDevice, ref surfaceInfo, ref presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModes2EXT_3;
	public static VkResult AcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) => AcquireFullScreenExclusiveModeEXT_0(device, swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult> AcquireFullScreenExclusiveModeEXT_0;
	public static VkResult ReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) => ReleaseFullScreenExclusiveModeEXT_0(device, swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult> ReleaseFullScreenExclusiveModeEXT_0;
	public static VkResult GetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, out VkDeviceGroupPresentModeFlagsKHR modes) => GetDeviceGroupSurfacePresentModes2EXT_0(device, surfaceInfo, out modes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkDeviceGroupPresentModeFlagsKHR, VkResult> GetDeviceGroupSurfacePresentModes2EXT_0;
	public static VkResult GetDeviceGroupSurfacePresentModes2EXT(VkDevice device, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, out VkDeviceGroupPresentModeFlagsKHR modes) => GetDeviceGroupSurfacePresentModes2EXT_1(device, ref surfaceInfo, out modes);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkDeviceGroupPresentModeFlagsKHR, VkResult> GetDeviceGroupSurfacePresentModes2EXT_1;
	public static VkResult CreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateHeadlessSurfaceEXT_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateHeadlessSurfaceEXT_0;
	public static VkResult CreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateHeadlessSurfaceEXT_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateHeadlessSurfaceEXT_1;
	public static VkResult CreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateHeadlessSurfaceEXT_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkHeadlessSurfaceCreateInfoEXT, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateHeadlessSurfaceEXT_2;
	public static VkResult CreateHeadlessSurfaceEXT(VkInstance instance, ref VkHeadlessSurfaceCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateHeadlessSurfaceEXT_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkHeadlessSurfaceCreateInfoEXT, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateHeadlessSurfaceEXT_3;
	[Obsolete("Use GetBufferDeviceAddress")]
	public static void GetBufferDeviceAddressKHR(VkDevice device, out VkBufferDeviceAddressInfo info) => GetBufferDeviceAddressKHR_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void> GetBufferDeviceAddressKHR_0;
	[Obsolete("Use GetBufferOpaqueCaptureAddress")]
	public static void GetBufferOpaqueCaptureAddressKHR(VkDevice device, out VkBufferDeviceAddressInfo info) => GetBufferOpaqueCaptureAddressKHR_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void> GetBufferOpaqueCaptureAddressKHR_0;
	[Obsolete("Use GetDeviceMemoryOpaqueCaptureAddress")]
	public static void GetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, out VkDeviceMemoryOpaqueCaptureAddressInfo info) => GetDeviceMemoryOpaqueCaptureAddressKHR_0(device, out info);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceMemoryOpaqueCaptureAddressInfo, void> GetDeviceMemoryOpaqueCaptureAddressKHR_0;
	public static void CommandSetLineStippleEXT(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern) => CommandSetLineStippleEXT_0(commandBuffer, lineStippleFactor, lineStipplePattern);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ushort, void> CommandSetLineStippleEXT_0;
	[Obsolete("Use ResetQueryPool")]
	public static void ResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount) => ResetQueryPoolEXT_0(device, queryPool, firstQuery, queryCount);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void> ResetQueryPoolEXT_0;
	[Obsolete("Use CommandSetCullMode")]
	public static void CommandSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) => CommandSetCullModeEXT_0(commandBuffer, cullMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void> CommandSetCullModeEXT_0;
	[Obsolete("Use CommandSetFrontFace")]
	public static void CommandSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) => CommandSetFrontFaceEXT_0(commandBuffer, frontFace);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void> CommandSetFrontFaceEXT_0;
	[Obsolete("Use CommandSetPrimitiveTopology")]
	public static void CommandSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) => CommandSetPrimitiveTopologyEXT_0(commandBuffer, primitiveTopology);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void> CommandSetPrimitiveTopologyEXT_0;
	[Obsolete("Use CommandSetViewportWithCount")]
	public static void CommandSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport[] viewports) => CommandSetViewportWithCountEXT_0(commandBuffer, viewportCount, viewports);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkViewport[], void> CommandSetViewportWithCountEXT_0;
	[Obsolete("Use CommandSetScissorWithCount")]
	public static void CommandSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D[] scissors) => CommandSetScissorWithCountEXT_0(commandBuffer, scissorCount, scissors);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkRect2D[], void> CommandSetScissorWithCountEXT_0;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_0(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_0;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_1(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_1;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_2(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_2;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_3(commandBuffer, firstBinding, bindingCount, buffers, offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_3;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_4(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_4;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_5(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_5;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_6(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_6;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_7(commandBuffer, firstBinding, bindingCount, buffers, ref offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_7;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_8(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_8;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_9(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_9;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_10(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_10;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_11(commandBuffer, firstBinding, bindingCount, ref buffers, offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_11;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_12(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_12;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, VkDeviceSize* sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_13(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_13;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, VkDeviceSize* strides) => CommandBindVertexBuffers2EXT_14(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes, strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void> CommandBindVertexBuffers2EXT_14;
	[Obsolete("Use CommandBindVertexBuffers2")]
	public static void CommandBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets, ref VkDeviceSize sizes, ref VkDeviceSize strides) => CommandBindVertexBuffers2EXT_15(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets, ref sizes, ref strides);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void> CommandBindVertexBuffers2EXT_15;
	[Obsolete("Use CommandSetDepthTestEnable")]
	public static void CommandSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) => CommandSetDepthTestEnableEXT_0(commandBuffer, depthTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthTestEnableEXT_0;
	[Obsolete("Use CommandSetDepthWriteEnable")]
	public static void CommandSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) => CommandSetDepthWriteEnableEXT_0(commandBuffer, depthWriteEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthWriteEnableEXT_0;
	[Obsolete("Use CommandSetDepthCompareOp")]
	public static void CommandSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) => CommandSetDepthCompareOpEXT_0(commandBuffer, depthCompareOp);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void> CommandSetDepthCompareOpEXT_0;
	[Obsolete("Use CommandSetDepthBoundsTestEnable")]
	public static void CommandSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) => CommandSetDepthBoundsTestEnableEXT_0(commandBuffer, depthBoundsTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthBoundsTestEnableEXT_0;
	[Obsolete("Use CommandSetStencilTestEnable")]
	public static void CommandSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) => CommandSetStencilTestEnableEXT_0(commandBuffer, stencilTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetStencilTestEnableEXT_0;
	[Obsolete("Use CommandSetStencilOp")]
	public static void CommandSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) => CommandSetStencilOpEXT_0(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> CommandSetStencilOpEXT_0;
	public static VkResult CreateDeferredOperationKHR(VkDevice device, VkAllocationCallbacks* allocator, out VkDeferredOperationKHR deferredOperation) => CreateDeferredOperationKHR_0(device, allocator, out deferredOperation);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, out VkDeferredOperationKHR, VkResult> CreateDeferredOperationKHR_0;
	public static VkResult CreateDeferredOperationKHR(VkDevice device, ref VkAllocationCallbacks allocator, out VkDeferredOperationKHR deferredOperation) => CreateDeferredOperationKHR_1(device, ref allocator, out deferredOperation);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, out VkDeferredOperationKHR, VkResult> CreateDeferredOperationKHR_1;
	public static void DestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* allocator) => DestroyDeferredOperationKHR_0(device, operation, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void> DestroyDeferredOperationKHR_0;
	public static void DestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, ref VkAllocationCallbacks allocator) => DestroyDeferredOperationKHR_1(device, operation, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkAllocationCallbacks, void> DestroyDeferredOperationKHR_1;
	public static uint GetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) => GetDeferredOperationMaxConcurrencyKHR_0(device, operation);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint> GetDeferredOperationMaxConcurrencyKHR_0;
	public static VkResult GetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) => GetDeferredOperationResultKHR_0(device, operation);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkResult> GetDeferredOperationResultKHR_0;
	public static VkResult DeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) => DeferredOperationJoinKHR_0(device, operation);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkResult> DeferredOperationJoinKHR_0;
	public static VkResult GetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pipelineInfo, uint* executableCount, [In, Out] VkPipelineExecutablePropertiesKHR[] properties) => GetPipelineExecutablePropertiesKHR_0(device, pipelineInfo, executableCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR[], VkResult> GetPipelineExecutablePropertiesKHR_0;
	public static VkResult GetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pipelineInfo, ref uint executableCount, [In, Out] VkPipelineExecutablePropertiesKHR[] properties) => GetPipelineExecutablePropertiesKHR_1(device, pipelineInfo, ref executableCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoKHR*, ref uint, VkPipelineExecutablePropertiesKHR[], VkResult> GetPipelineExecutablePropertiesKHR_1;
	public static VkResult GetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfoKHR pipelineInfo, uint* executableCount, [In, Out] VkPipelineExecutablePropertiesKHR[] properties) => GetPipelineExecutablePropertiesKHR_2(device, ref pipelineInfo, executableCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoKHR, uint*, VkPipelineExecutablePropertiesKHR[], VkResult> GetPipelineExecutablePropertiesKHR_2;
	public static VkResult GetPipelineExecutablePropertiesKHR(VkDevice device, ref VkPipelineInfoKHR pipelineInfo, ref uint executableCount, [In, Out] VkPipelineExecutablePropertiesKHR[] properties) => GetPipelineExecutablePropertiesKHR_3(device, ref pipelineInfo, ref executableCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoKHR, ref uint, VkPipelineExecutablePropertiesKHR[], VkResult> GetPipelineExecutablePropertiesKHR_3;
	public static VkResult GetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* statisticCount, [In, Out] VkPipelineExecutableStatisticKHR[] statistics) => GetPipelineExecutableStatisticsKHR_0(device, executableInfo, statisticCount, statistics);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR[], VkResult> GetPipelineExecutableStatisticsKHR_0;
	public static VkResult GetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, ref uint statisticCount, [In, Out] VkPipelineExecutableStatisticKHR[] statistics) => GetPipelineExecutableStatisticsKHR_1(device, executableInfo, ref statisticCount, statistics);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, ref uint, VkPipelineExecutableStatisticKHR[], VkResult> GetPipelineExecutableStatisticsKHR_1;
	public static VkResult GetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfoKHR executableInfo, uint* statisticCount, [In, Out] VkPipelineExecutableStatisticKHR[] statistics) => GetPipelineExecutableStatisticsKHR_2(device, ref executableInfo, statisticCount, statistics);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, uint*, VkPipelineExecutableStatisticKHR[], VkResult> GetPipelineExecutableStatisticsKHR_2;
	public static VkResult GetPipelineExecutableStatisticsKHR(VkDevice device, ref VkPipelineExecutableInfoKHR executableInfo, ref uint statisticCount, [In, Out] VkPipelineExecutableStatisticKHR[] statistics) => GetPipelineExecutableStatisticsKHR_3(device, ref executableInfo, ref statisticCount, statistics);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, ref uint, VkPipelineExecutableStatisticKHR[], VkResult> GetPipelineExecutableStatisticsKHR_3;
	public static VkResult GetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* internalRepresentationCount, [In, Out] VkPipelineExecutableInternalRepresentationKHR[] internalRepresentations) => GetPipelineExecutableInternalRepresentationsKHR_0(device, executableInfo, internalRepresentationCount, internalRepresentations);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR[], VkResult> GetPipelineExecutableInternalRepresentationsKHR_0;
	public static VkResult GetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, ref uint internalRepresentationCount, [In, Out] VkPipelineExecutableInternalRepresentationKHR[] internalRepresentations) => GetPipelineExecutableInternalRepresentationsKHR_1(device, executableInfo, ref internalRepresentationCount, internalRepresentations);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, ref uint, VkPipelineExecutableInternalRepresentationKHR[], VkResult> GetPipelineExecutableInternalRepresentationsKHR_1;
	public static VkResult GetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfoKHR executableInfo, uint* internalRepresentationCount, [In, Out] VkPipelineExecutableInternalRepresentationKHR[] internalRepresentations) => GetPipelineExecutableInternalRepresentationsKHR_2(device, ref executableInfo, internalRepresentationCount, internalRepresentations);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, uint*, VkPipelineExecutableInternalRepresentationKHR[], VkResult> GetPipelineExecutableInternalRepresentationsKHR_2;
	public static VkResult GetPipelineExecutableInternalRepresentationsKHR(VkDevice device, ref VkPipelineExecutableInfoKHR executableInfo, ref uint internalRepresentationCount, [In, Out] VkPipelineExecutableInternalRepresentationKHR[] internalRepresentations) => GetPipelineExecutableInternalRepresentationsKHR_3(device, ref executableInfo, ref internalRepresentationCount, internalRepresentations);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, ref uint, VkPipelineExecutableInternalRepresentationKHR[], VkResult> GetPipelineExecutableInternalRepresentationsKHR_3;
	public static VkResult ReleaseSwapchainImagesEXT(VkDevice device, VkReleaseSwapchainImagesInfoEXT* releaseInfo) => ReleaseSwapchainImagesEXT_0(device, releaseInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkReleaseSwapchainImagesInfoEXT*, VkResult> ReleaseSwapchainImagesEXT_0;
	public static VkResult ReleaseSwapchainImagesEXT(VkDevice device, ref VkReleaseSwapchainImagesInfoEXT releaseInfo) => ReleaseSwapchainImagesEXT_1(device, ref releaseInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkReleaseSwapchainImagesInfoEXT, VkResult> ReleaseSwapchainImagesEXT_1;
	public static void GetGeneratedCommandsMemoryRequirementsNV(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* info, out VkMemoryRequirements2 memoryRequirements) => GetGeneratedCommandsMemoryRequirementsNV_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, out VkMemoryRequirements2, void> GetGeneratedCommandsMemoryRequirementsNV_0;
	public static void GetGeneratedCommandsMemoryRequirementsNV(VkDevice device, ref VkGeneratedCommandsMemoryRequirementsInfoNV info, out VkMemoryRequirements2 memoryRequirements) => GetGeneratedCommandsMemoryRequirementsNV_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkGeneratedCommandsMemoryRequirementsInfoNV, out VkMemoryRequirements2, void> GetGeneratedCommandsMemoryRequirementsNV_1;
	public static void CommandPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* generatedCommandsInfo) => CommandPreprocessGeneratedCommandsNV_0(commandBuffer, generatedCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void> CommandPreprocessGeneratedCommandsNV_0;
	public static void CommandPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, ref VkGeneratedCommandsInfoNV generatedCommandsInfo) => CommandPreprocessGeneratedCommandsNV_1(commandBuffer, ref generatedCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkGeneratedCommandsInfoNV, void> CommandPreprocessGeneratedCommandsNV_1;
	public static void CommandExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* generatedCommandsInfo) => CommandExecuteGeneratedCommandsNV_0(commandBuffer, isPreprocessed, generatedCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void> CommandExecuteGeneratedCommandsNV_0;
	public static void CommandExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, ref VkGeneratedCommandsInfoNV generatedCommandsInfo) => CommandExecuteGeneratedCommandsNV_1(commandBuffer, isPreprocessed, ref generatedCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, ref VkGeneratedCommandsInfoNV, void> CommandExecuteGeneratedCommandsNV_1;
	public static void CommandBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint groupIndex) => CommandBindPipelineShaderGroupNV_0(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void> CommandBindPipelineShaderGroupNV_0;
	public static VkResult CreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, out VkIndirectCommandsLayoutNV indirectCommandsLayout) => CreateIndirectCommandsLayoutNV_0(device, createInfo, allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNV, VkResult> CreateIndirectCommandsLayoutNV_0;
	public static VkResult CreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* createInfo, ref VkAllocationCallbacks allocator, out VkIndirectCommandsLayoutNV indirectCommandsLayout) => CreateIndirectCommandsLayoutNV_1(device, createInfo, ref allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNV, VkResult> CreateIndirectCommandsLayoutNV_1;
	public static VkResult CreateIndirectCommandsLayoutNV(VkDevice device, ref VkIndirectCommandsLayoutCreateInfoNV createInfo, VkAllocationCallbacks* allocator, out VkIndirectCommandsLayoutNV indirectCommandsLayout) => CreateIndirectCommandsLayoutNV_2(device, ref createInfo, allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNV, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNV, VkResult> CreateIndirectCommandsLayoutNV_2;
	public static VkResult CreateIndirectCommandsLayoutNV(VkDevice device, ref VkIndirectCommandsLayoutCreateInfoNV createInfo, ref VkAllocationCallbacks allocator, out VkIndirectCommandsLayoutNV indirectCommandsLayout) => CreateIndirectCommandsLayoutNV_3(device, ref createInfo, ref allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNV, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNV, VkResult> CreateIndirectCommandsLayoutNV_3;
	public static void DestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* allocator) => DestroyIndirectCommandsLayoutNV_0(device, indirectCommandsLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void> DestroyIndirectCommandsLayoutNV_0;
	public static void DestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, ref VkAllocationCallbacks allocator) => DestroyIndirectCommandsLayoutNV_1(device, indirectCommandsLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNV, ref VkAllocationCallbacks, void> DestroyIndirectCommandsLayoutNV_1;
	public static VkResult AcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFileDescriptor, VkDisplayKHR display) => AcquireDrmDisplayEXT_0(physicalDevice, drmFileDescriptor, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, int, VkDisplayKHR, VkResult> AcquireDrmDisplayEXT_0;
	public static VkResult GetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFileDescriptor, uint connectorId, out VkDisplayKHR display) => GetDrmDisplayEXT_0(physicalDevice, drmFileDescriptor, connectorId, out display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, int, uint, out VkDisplayKHR, VkResult> GetDrmDisplayEXT_0;
	[Obsolete("Use CreatePrivateDataSlot")]
	public static void CreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlotEXT_0(device, createInfo, allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, out VkPrivateDataSlot, void> CreatePrivateDataSlotEXT_0;
	[Obsolete("Use CreatePrivateDataSlot")]
	public static void CreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlotEXT_1(device, createInfo, ref allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, ref VkAllocationCallbacks, out VkPrivateDataSlot, void> CreatePrivateDataSlotEXT_1;
	[Obsolete("Use CreatePrivateDataSlot")]
	public static void CreatePrivateDataSlotEXT(VkDevice device, ref VkPrivateDataSlotCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlotEXT_2(device, ref createInfo, allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, VkAllocationCallbacks*, out VkPrivateDataSlot, void> CreatePrivateDataSlotEXT_2;
	[Obsolete("Use CreatePrivateDataSlot")]
	public static void CreatePrivateDataSlotEXT(VkDevice device, ref VkPrivateDataSlotCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPrivateDataSlot privateDataSlot) => CreatePrivateDataSlotEXT_3(device, ref createInfo, ref allocator, out privateDataSlot);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, ref VkAllocationCallbacks, out VkPrivateDataSlot, void> CreatePrivateDataSlotEXT_3;
	[Obsolete("Use DestroyPrivateDataSlot")]
	public static void DestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* allocator) => DestroyPrivateDataSlotEXT_0(device, privateDataSlot, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void> DestroyPrivateDataSlotEXT_0;
	[Obsolete("Use DestroyPrivateDataSlot")]
	public static void DestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, ref VkAllocationCallbacks allocator) => DestroyPrivateDataSlotEXT_1(device, privateDataSlot, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, ref VkAllocationCallbacks, void> DestroyPrivateDataSlotEXT_1;
	[Obsolete("Use SetPrivateData")]
	public static void SetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data) => SetPrivateDataEXT_0(device, objectType, objectHandle, privateDataSlot, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, void> SetPrivateDataEXT_0;
	[Obsolete("Use GetPrivateData")]
	public static void GetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, out ulong data) => GetPrivateDataEXT_0(device, objectType, objectHandle, privateDataSlot, out data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, out ulong, void> GetPrivateDataEXT_0;
	[Obsolete("Use CommandSetEvent2")]
	public static void CommandSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* dependencyInfo) => CommandSetEvent2KHR_0(commandBuffer, @event, dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkDependencyInfo*, void> CommandSetEvent2KHR_0;
	[Obsolete("Use CommandSetEvent2")]
	public static void CommandSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, ref VkDependencyInfo dependencyInfo) => CommandSetEvent2KHR_1(commandBuffer, @event, ref dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ref VkDependencyInfo, void> CommandSetEvent2KHR_1;
	[Obsolete("Use CommandResetEvent2")]
	public static void CommandResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask) => CommandResetEvent2KHR_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void> CommandResetEvent2KHR_0;
	[Obsolete("Use CommandWaitEvents2")]
	public static void CommandWaitEvents2KHR(VkCommandBuffer commandBuffer, uint eventCount, VkEvent[] events, VkDependencyInfo[] dependencyInfos) => CommandWaitEvents2KHR_0(commandBuffer, eventCount, events, dependencyInfos);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkDependencyInfo[], void> CommandWaitEvents2KHR_0;
	[Obsolete("Use CommandPipelineBarrier2")]
	public static void CommandPipelineBarrier2KHR(VkCommandBuffer commandBuffer, VkDependencyInfo* dependencyInfo) => CommandPipelineBarrier2KHR_0(commandBuffer, dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDependencyInfo*, void> CommandPipelineBarrier2KHR_0;
	[Obsolete("Use CommandPipelineBarrier2")]
	public static void CommandPipelineBarrier2KHR(VkCommandBuffer commandBuffer, ref VkDependencyInfo dependencyInfo) => CommandPipelineBarrier2KHR_1(commandBuffer, ref dependencyInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDependencyInfo, void> CommandPipelineBarrier2KHR_1;
	[Obsolete("Use CommandWriteTimestamp2")]
	public static void CommandWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query) => CommandWriteTimestamp2KHR_0(commandBuffer, stage, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void> CommandWriteTimestamp2KHR_0;
	[Obsolete("Use QueueSubmit2")]
	public static void QueueSubmit2KHR(VkQueue queue, uint submitCount, VkSubmitInfo2[] submits, VkFence fence) => QueueSubmit2KHR_0(queue, submitCount, submits, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo2[], VkFence, void> QueueSubmit2KHR_0;
	public static void CommandWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, uint marker) => CommandWriteBufferMarker2AMD_0(commandBuffer, stage, destinationBuffer, destinationOffset, marker);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint, void> CommandWriteBufferMarker2AMD_0;
	public static void GetQueueCheckpointData2NV(VkQueue queue, uint* checkpointDataCount, [In, Out] VkCheckpointData2NV[] checkpointData) => GetQueueCheckpointData2NV_0(queue, checkpointDataCount, checkpointData);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint*, VkCheckpointData2NV[], void> GetQueueCheckpointData2NV_0;
	public static void GetQueueCheckpointData2NV(VkQueue queue, ref uint checkpointDataCount, [In, Out] VkCheckpointData2NV[] checkpointData) => GetQueueCheckpointData2NV_1(queue, ref checkpointDataCount, checkpointData);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref uint, VkCheckpointData2NV[], void> GetQueueCheckpointData2NV_1;
	public static void GetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, out VkDeviceSize layoutSizeInBytes) => GetDescriptorSetLayoutSizeEXT_0(device, layout, out layoutSizeInBytes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, out VkDeviceSize, void> GetDescriptorSetLayoutSizeEXT_0;
	public static void GetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint binding, out VkDeviceSize offset) => GetDescriptorSetLayoutBindingOffsetEXT_0(device, layout, binding, out offset);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, uint, out VkDeviceSize, void> GetDescriptorSetLayoutBindingOffsetEXT_0;
	public static void GetDescriptorEXT(VkDevice device, VkDescriptorGetInfoEXT* descriptorInfo, nuint dataSize, void* descriptor) => GetDescriptorEXT_0(device, descriptorInfo, dataSize, descriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorGetInfoEXT*, nuint, void*, void> GetDescriptorEXT_0;
	public static void GetDescriptorEXT(VkDevice device, ref VkDescriptorGetInfoEXT descriptorInfo, nuint dataSize, void* descriptor) => GetDescriptorEXT_1(device, ref descriptorInfo, dataSize, descriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorGetInfoEXT, nuint, void*, void> GetDescriptorEXT_1;
	public static void CommandBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint bufferCount, VkDescriptorBufferBindingInfoEXT[] bindingInfos) => CommandBindDescriptorBuffersEXT_0(commandBuffer, bufferCount, bindingInfos);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkDescriptorBufferBindingInfoEXT[], void> CommandBindDescriptorBuffersEXT_0;
	public static void CommandSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint setCount, uint* bufferIndices, VkDeviceSize* offsets) => CommandSetDescriptorBufferOffsetsEXT_0(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, bufferIndices, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, uint*, VkDeviceSize*, void> CommandSetDescriptorBufferOffsetsEXT_0;
	public static void CommandSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint setCount, uint* bufferIndices, ref VkDeviceSize offsets) => CommandSetDescriptorBufferOffsetsEXT_1(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, bufferIndices, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, uint*, ref VkDeviceSize, void> CommandSetDescriptorBufferOffsetsEXT_1;
	public static void CommandSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint setCount, ref uint bufferIndices, VkDeviceSize* offsets) => CommandSetDescriptorBufferOffsetsEXT_2(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, ref bufferIndices, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, ref uint, VkDeviceSize*, void> CommandSetDescriptorBufferOffsetsEXT_2;
	public static void CommandSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint setCount, ref uint bufferIndices, ref VkDeviceSize offsets) => CommandSetDescriptorBufferOffsetsEXT_3(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, ref bufferIndices, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, ref uint, ref VkDeviceSize, void> CommandSetDescriptorBufferOffsetsEXT_3;
	public static void CommandBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set) => CommandBindDescriptorBufferEmbeddedSamplersEXT_0(commandBuffer, pipelineBindPoint, layout, set);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, void> CommandBindDescriptorBufferEmbeddedSamplersEXT_0;
	public static VkResult GetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* info, void* data) => GetBufferOpaqueCaptureDescriptorDataEXT_0(device, info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferCaptureDescriptorDataInfoEXT*, void*, VkResult> GetBufferOpaqueCaptureDescriptorDataEXT_0;
	public static VkResult GetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, ref VkBufferCaptureDescriptorDataInfoEXT info, void* data) => GetBufferOpaqueCaptureDescriptorDataEXT_1(device, ref info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCaptureDescriptorDataInfoEXT, void*, VkResult> GetBufferOpaqueCaptureDescriptorDataEXT_1;
	public static VkResult GetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageCaptureDescriptorDataInfoEXT* info, void* data) => GetImageOpaqueCaptureDescriptorDataEXT_0(device, info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageCaptureDescriptorDataInfoEXT*, void*, VkResult> GetImageOpaqueCaptureDescriptorDataEXT_0;
	public static VkResult GetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, ref VkImageCaptureDescriptorDataInfoEXT info, void* data) => GetImageOpaqueCaptureDescriptorDataEXT_1(device, ref info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCaptureDescriptorDataInfoEXT, void*, VkResult> GetImageOpaqueCaptureDescriptorDataEXT_1;
	public static VkResult GetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* info, void* data) => GetImageViewOpaqueCaptureDescriptorDataEXT_0(device, info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCaptureDescriptorDataInfoEXT*, void*, VkResult> GetImageViewOpaqueCaptureDescriptorDataEXT_0;
	public static VkResult GetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, ref VkImageViewCaptureDescriptorDataInfoEXT info, void* data) => GetImageViewOpaqueCaptureDescriptorDataEXT_1(device, ref info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCaptureDescriptorDataInfoEXT, void*, VkResult> GetImageViewOpaqueCaptureDescriptorDataEXT_1;
	public static VkResult GetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* info, void* data) => GetSamplerOpaqueCaptureDescriptorDataEXT_0(device, info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCaptureDescriptorDataInfoEXT*, void*, VkResult> GetSamplerOpaqueCaptureDescriptorDataEXT_0;
	public static VkResult GetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, ref VkSamplerCaptureDescriptorDataInfoEXT info, void* data) => GetSamplerOpaqueCaptureDescriptorDataEXT_1(device, ref info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCaptureDescriptorDataInfoEXT, void*, VkResult> GetSamplerOpaqueCaptureDescriptorDataEXT_1;
	public static VkResult GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* info, void* data) => GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_0(device, info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, VkResult> GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_0;
	public static VkResult GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, ref VkAccelerationStructureCaptureDescriptorDataInfoEXT info, void* data) => GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_1(device, ref info, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCaptureDescriptorDataInfoEXT, void*, VkResult> GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_1;
	public static void CommandSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR combinerOps) => CommandSetFragmentShadingRateEnumNV_0(commandBuffer, shadingRate, combinerOps);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR, void> CommandSetFragmentShadingRateEnumNV_0;
	public static void CommandDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDrawMeshTasksEXT_0(commandBuffer, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void> CommandDrawMeshTasksEXT_0;
	public static void CommandDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawMeshTasksIndirectEXT_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawMeshTasksIndirectEXT_0;
	public static void CommandDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawMeshTasksIndirectCountEXT_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawMeshTasksIndirectCountEXT_0;
	[Obsolete("Use CommandCopyBuffer2")]
	public static void CommandCopyBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* copyBufferInfo) => CommandCopyBuffer2KHR_0(commandBuffer, copyBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferInfo2*, void> CommandCopyBuffer2KHR_0;
	[Obsolete("Use CommandCopyBuffer2")]
	public static void CommandCopyBuffer2KHR(VkCommandBuffer commandBuffer, ref VkCopyBufferInfo2 copyBufferInfo) => CommandCopyBuffer2KHR_1(commandBuffer, ref copyBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferInfo2, void> CommandCopyBuffer2KHR_1;
	[Obsolete("Use CommandCopyImage2")]
	public static void CommandCopyImage2KHR(VkCommandBuffer commandBuffer, VkCopyImageInfo2* copyImageInfo) => CommandCopyImage2KHR_0(commandBuffer, copyImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageInfo2*, void> CommandCopyImage2KHR_0;
	[Obsolete("Use CommandCopyImage2")]
	public static void CommandCopyImage2KHR(VkCommandBuffer commandBuffer, ref VkCopyImageInfo2 copyImageInfo) => CommandCopyImage2KHR_1(commandBuffer, ref copyImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageInfo2, void> CommandCopyImage2KHR_1;
	[Obsolete("Use CommandCopyBufferToImage2")]
	public static void CommandCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* copyBufferToImageInfo) => CommandCopyBufferToImage2KHR_0(commandBuffer, copyBufferToImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferToImageInfo2*, void> CommandCopyBufferToImage2KHR_0;
	[Obsolete("Use CommandCopyBufferToImage2")]
	public static void CommandCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, ref VkCopyBufferToImageInfo2 copyBufferToImageInfo) => CommandCopyBufferToImage2KHR_1(commandBuffer, ref copyBufferToImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferToImageInfo2, void> CommandCopyBufferToImage2KHR_1;
	[Obsolete("Use CommandCopyImageToBuffer2")]
	public static void CommandCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* copyImageToBufferInfo) => CommandCopyImageToBuffer2KHR_0(commandBuffer, copyImageToBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageToBufferInfo2*, void> CommandCopyImageToBuffer2KHR_0;
	[Obsolete("Use CommandCopyImageToBuffer2")]
	public static void CommandCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, ref VkCopyImageToBufferInfo2 copyImageToBufferInfo) => CommandCopyImageToBuffer2KHR_1(commandBuffer, ref copyImageToBufferInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageToBufferInfo2, void> CommandCopyImageToBuffer2KHR_1;
	[Obsolete("Use CommandBlitImage2")]
	public static void CommandBlitImage2KHR(VkCommandBuffer commandBuffer, VkBlitImageInfo2* blitImageInfo) => CommandBlitImage2KHR_0(commandBuffer, blitImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBlitImageInfo2*, void> CommandBlitImage2KHR_0;
	[Obsolete("Use CommandBlitImage2")]
	public static void CommandBlitImage2KHR(VkCommandBuffer commandBuffer, ref VkBlitImageInfo2 blitImageInfo) => CommandBlitImage2KHR_1(commandBuffer, ref blitImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkBlitImageInfo2, void> CommandBlitImage2KHR_1;
	[Obsolete("Use CommandResolveImage2")]
	public static void CommandResolveImage2KHR(VkCommandBuffer commandBuffer, VkResolveImageInfo2* resolveImageInfo) => CommandResolveImage2KHR_0(commandBuffer, resolveImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResolveImageInfo2*, void> CommandResolveImage2KHR_0;
	[Obsolete("Use CommandResolveImage2")]
	public static void CommandResolveImage2KHR(VkCommandBuffer commandBuffer, ref VkResolveImageInfo2 resolveImageInfo) => CommandResolveImage2KHR_1(commandBuffer, ref resolveImageInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkResolveImageInfo2, void> CommandResolveImage2KHR_1;
	public static void GetImageSubresourceLayout2EXT(VkDevice device, VkImage image, VkImageSubresource2EXT* subresource, out VkSubresourceLayout2EXT layout) => GetImageSubresourceLayout2EXT_0(device, image, subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource2EXT*, out VkSubresourceLayout2EXT, void> GetImageSubresourceLayout2EXT_0;
	public static void GetImageSubresourceLayout2EXT(VkDevice device, VkImage image, ref VkImageSubresource2EXT subresource, out VkSubresourceLayout2EXT layout) => GetImageSubresourceLayout2EXT_1(device, image, ref subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource2EXT, out VkSubresourceLayout2EXT, void> GetImageSubresourceLayout2EXT_1;
	public static VkResult GetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* faultCounts, out VkDeviceFaultInfoEXT faultInfo) => GetDeviceFaultInfoEXT_0(device, faultCounts, out faultInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceFaultCountsEXT*, out VkDeviceFaultInfoEXT, VkResult> GetDeviceFaultInfoEXT_0;
	public static VkResult GetDeviceFaultInfoEXT(VkDevice device, ref VkDeviceFaultCountsEXT faultCounts, out VkDeviceFaultInfoEXT faultInfo) => GetDeviceFaultInfoEXT_1(device, ref faultCounts, out faultInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceFaultCountsEXT, out VkDeviceFaultInfoEXT, VkResult> GetDeviceFaultInfoEXT_1;
	public static VkResult AcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) => AcquireWinrtDisplayNV_0(physicalDevice, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult> AcquireWinrtDisplayNV_0;
	public static VkResult GetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint deviceRelativeId, out VkDisplayKHR display) => GetWinrtDisplayNV_0(physicalDevice, deviceRelativeId, out display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, out VkDisplayKHR, VkResult> GetWinrtDisplayNV_0;
	public static void CommandSetVertexInputEXT(VkCommandBuffer commandBuffer, uint vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT[] vertexBindingDescriptions, uint vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT[] vertexAttributeDescriptions) => CommandSetVertexInputEXT_0(commandBuffer, vertexBindingDescriptionCount, vertexBindingDescriptions, vertexAttributeDescriptionCount, vertexAttributeDescriptions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkVertexInputBindingDescription2EXT[], uint, VkVertexInputAttributeDescription2EXT[], void> CommandSetVertexInputEXT_0;
	public static VkResult GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, out VkExtent2D maxWorkgroupSize) => GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_0(device, renderpass, out maxWorkgroupSize);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, VkResult> GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_0;
	public static void CommandSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) => CommandSubpassShadingHUAWEI_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandSubpassShadingHUAWEI_0;
	public static void CommandBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) => CommandBindInvocationMaskHUAWEI_0(commandBuffer, imageView, imageLayout);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImageView, VkImageLayout, void> CommandBindInvocationMaskHUAWEI_0;
	public static VkResult GetMemoryRemoteAddressNV(VkDevice device, VkMemoryGetRemoteAddressInfoNV* memoryGetRemoteAddressInfo, out IntPtr address) => GetMemoryRemoteAddressNV_0(device, memoryGetRemoteAddressInfo, out address);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetRemoteAddressInfoNV*, out IntPtr, VkResult> GetMemoryRemoteAddressNV_0;
	public static VkResult GetMemoryRemoteAddressNV(VkDevice device, ref VkMemoryGetRemoteAddressInfoNV memoryGetRemoteAddressInfo, out IntPtr address) => GetMemoryRemoteAddressNV_1(device, ref memoryGetRemoteAddressInfo, out address);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetRemoteAddressInfoNV, out IntPtr, VkResult> GetMemoryRemoteAddressNV_1;
	public static VkResult GetPipelinePropertiesEXT(VkDevice device, VkPipelineInfoEXT* pipelineInfo, out VkBaseOutStructure pipelineProperties) => GetPipelinePropertiesEXT_0(device, pipelineInfo, out pipelineProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoEXT*, out VkBaseOutStructure, VkResult> GetPipelinePropertiesEXT_0;
	public static VkResult GetPipelinePropertiesEXT(VkDevice device, ref VkPipelineInfoEXT pipelineInfo, out VkBaseOutStructure pipelineProperties) => GetPipelinePropertiesEXT_1(device, ref pipelineInfo, out pipelineProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoEXT, out VkBaseOutStructure, VkResult> GetPipelinePropertiesEXT_1;
	public static void CommandSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint patchControlPoints) => CommandSetPatchControlPointsEXT_0(commandBuffer, patchControlPoints);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetPatchControlPointsEXT_0;
	[Obsolete("Use CommandSetRasterizerDiscardEnable")]
	public static void CommandSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) => CommandSetRasterizerDiscardEnableEXT_0(commandBuffer, rasterizerDiscardEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetRasterizerDiscardEnableEXT_0;
	[Obsolete("Use CommandSetDepthBiasEnable")]
	public static void CommandSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) => CommandSetDepthBiasEnableEXT_0(commandBuffer, depthBiasEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthBiasEnableEXT_0;
	public static void CommandSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) => CommandSetLogicOpEXT_0(commandBuffer, logicOp);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkLogicOp, void> CommandSetLogicOpEXT_0;
	[Obsolete("Use CommandSetPrimitiveRestartEnable")]
	public static void CommandSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) => CommandSetPrimitiveRestartEnableEXT_0(commandBuffer, primitiveRestartEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetPrimitiveRestartEnableEXT_0;
	public static void CommandSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint attachmentCount, VkBool32* colorWriteEnables) => CommandSetColorWriteEnableEXT_0(commandBuffer, attachmentCount, colorWriteEnables);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkBool32*, void> CommandSetColorWriteEnableEXT_0;
	public static void CommandSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkBool32 colorWriteEnables) => CommandSetColorWriteEnableEXT_1(commandBuffer, attachmentCount, ref colorWriteEnables);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkBool32, void> CommandSetColorWriteEnableEXT_1;
	public static void CommandTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) => CommandTraceRaysIndirect2KHR_0(commandBuffer, indirectDeviceAddress);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, void> CommandTraceRaysIndirect2KHR_0;
	public static void CommandDrawMultiEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawInfoEXT* vertexInfo, uint instanceCount, uint firstInstance, uint stride) => CommandDrawMultiEXT_0(commandBuffer, drawCount, vertexInfo, instanceCount, firstInstance, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawInfoEXT*, uint, uint, uint, void> CommandDrawMultiEXT_0;
	public static void CommandDrawMultiEXT(VkCommandBuffer commandBuffer, uint drawCount, ref VkMultiDrawInfoEXT vertexInfo, uint instanceCount, uint firstInstance, uint stride) => CommandDrawMultiEXT_1(commandBuffer, drawCount, ref vertexInfo, instanceCount, firstInstance, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawInfoEXT, uint, uint, uint, void> CommandDrawMultiEXT_1;
	public static void CommandDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawIndexedInfoEXT* indexInfo, uint instanceCount, uint firstInstance, uint stride, int* vertexOffset) => CommandDrawMultiIndexedEXT_0(commandBuffer, drawCount, indexInfo, instanceCount, firstInstance, stride, vertexOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> CommandDrawMultiIndexedEXT_0;
	public static void CommandDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawIndexedInfoEXT* indexInfo, uint instanceCount, uint firstInstance, uint stride, ref int vertexOffset) => CommandDrawMultiIndexedEXT_1(commandBuffer, drawCount, indexInfo, instanceCount, firstInstance, stride, ref vertexOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, ref int, void> CommandDrawMultiIndexedEXT_1;
	public static void CommandDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, ref VkMultiDrawIndexedInfoEXT indexInfo, uint instanceCount, uint firstInstance, uint stride, int* vertexOffset) => CommandDrawMultiIndexedEXT_2(commandBuffer, drawCount, ref indexInfo, instanceCount, firstInstance, stride, vertexOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawIndexedInfoEXT, uint, uint, uint, int*, void> CommandDrawMultiIndexedEXT_2;
	public static void CommandDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, ref VkMultiDrawIndexedInfoEXT indexInfo, uint instanceCount, uint firstInstance, uint stride, ref int vertexOffset) => CommandDrawMultiIndexedEXT_3(commandBuffer, drawCount, ref indexInfo, instanceCount, firstInstance, stride, ref vertexOffset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawIndexedInfoEXT, uint, uint, uint, ref int, void> CommandDrawMultiIndexedEXT_3;
	public static VkResult CreateMicromapEXT(VkDevice device, VkMicromapCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkMicromapEXT micromap) => CreateMicromapEXT_0(device, createInfo, allocator, out micromap);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, out VkMicromapEXT, VkResult> CreateMicromapEXT_0;
	public static VkResult CreateMicromapEXT(VkDevice device, VkMicromapCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkMicromapEXT micromap) => CreateMicromapEXT_1(device, createInfo, ref allocator, out micromap);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMicromapCreateInfoEXT*, ref VkAllocationCallbacks, out VkMicromapEXT, VkResult> CreateMicromapEXT_1;
	public static VkResult CreateMicromapEXT(VkDevice device, ref VkMicromapCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkMicromapEXT micromap) => CreateMicromapEXT_2(device, ref createInfo, allocator, out micromap);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapCreateInfoEXT, VkAllocationCallbacks*, out VkMicromapEXT, VkResult> CreateMicromapEXT_2;
	public static VkResult CreateMicromapEXT(VkDevice device, ref VkMicromapCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkMicromapEXT micromap) => CreateMicromapEXT_3(device, ref createInfo, ref allocator, out micromap);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapCreateInfoEXT, ref VkAllocationCallbacks, out VkMicromapEXT, VkResult> CreateMicromapEXT_3;
	public static void DestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, VkAllocationCallbacks* allocator) => DestroyMicromapEXT_0(device, micromap, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMicromapEXT, VkAllocationCallbacks*, void> DestroyMicromapEXT_0;
	public static void DestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, ref VkAllocationCallbacks allocator) => DestroyMicromapEXT_1(device, micromap, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMicromapEXT, ref VkAllocationCallbacks, void> DestroyMicromapEXT_1;
	public static void CommandBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint infoCount, VkMicromapBuildInfoEXT[] infos) => CommandBuildMicromapsEXT_0(commandBuffer, infoCount, infos);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMicromapBuildInfoEXT[], void> CommandBuildMicromapsEXT_0;
	public static VkResult BuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, VkMicromapBuildInfoEXT[] infos) => BuildMicromapsEXT_0(device, deferredOperation, infoCount, infos);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint, VkMicromapBuildInfoEXT[], VkResult> BuildMicromapsEXT_0;
	public static VkResult CopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT* info) => CopyMicromapEXT_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMicromapInfoEXT*, VkResult> CopyMicromapEXT_0;
	public static VkResult CopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyMicromapInfoEXT info) => CopyMicromapEXT_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMicromapInfoEXT, VkResult> CopyMicromapEXT_1;
	public static VkResult CopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT* info) => CopyMicromapToMemoryEXT_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMicromapToMemoryInfoEXT*, VkResult> CopyMicromapToMemoryEXT_0;
	public static VkResult CopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyMicromapToMemoryInfoEXT info) => CopyMicromapToMemoryEXT_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMicromapToMemoryInfoEXT, VkResult> CopyMicromapToMemoryEXT_1;
	public static VkResult CopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT* info) => CopyMemoryToMicromapEXT_0(device, deferredOperation, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToMicromapInfoEXT*, VkResult> CopyMemoryToMicromapEXT_0;
	public static VkResult CopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, ref VkCopyMemoryToMicromapInfoEXT info) => CopyMemoryToMicromapEXT_1(device, deferredOperation, ref info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMemoryToMicromapInfoEXT, VkResult> CopyMemoryToMicromapEXT_1;
	public static VkResult WriteMicromapsPropertiesEXT(VkDevice device, uint micromapCount, VkMicromapEXT[] micromaps, VkQueryType queryType, nuint dataSize, void* data, nuint stride) => WriteMicromapsPropertiesEXT_0(device, micromapCount, micromaps, queryType, dataSize, data, stride);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkMicromapEXT[], VkQueryType, nuint, void*, nuint, VkResult> WriteMicromapsPropertiesEXT_0;
	public static void CommandCopyMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* info) => CommandCopyMicromapEXT_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMicromapInfoEXT*, void> CommandCopyMicromapEXT_0;
	public static void CommandCopyMicromapEXT(VkCommandBuffer commandBuffer, ref VkCopyMicromapInfoEXT info) => CommandCopyMicromapEXT_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMicromapInfoEXT, void> CommandCopyMicromapEXT_1;
	public static void CommandCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* info) => CommandCopyMicromapToMemoryEXT_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMicromapToMemoryInfoEXT*, void> CommandCopyMicromapToMemoryEXT_0;
	public static void CommandCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, ref VkCopyMicromapToMemoryInfoEXT info) => CommandCopyMicromapToMemoryEXT_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMicromapToMemoryInfoEXT, void> CommandCopyMicromapToMemoryEXT_1;
	public static void CommandCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* info) => CommandCopyMemoryToMicromapEXT_0(commandBuffer, info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMemoryToMicromapInfoEXT*, void> CommandCopyMemoryToMicromapEXT_0;
	public static void CommandCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, ref VkCopyMemoryToMicromapInfoEXT info) => CommandCopyMemoryToMicromapEXT_1(commandBuffer, ref info);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMemoryToMicromapInfoEXT, void> CommandCopyMemoryToMicromapEXT_1;
	public static void CommandWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint micromapCount, VkMicromapEXT[] micromaps, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery) => CommandWriteMicromapsPropertiesEXT_0(commandBuffer, micromapCount, micromaps, queryType, queryPool, firstQuery);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMicromapEXT[], VkQueryType, VkQueryPool, uint, void> CommandWriteMicromapsPropertiesEXT_0;
	public static void GetDeviceMicromapCompatibilityEXT(VkDevice device, VkMicromapVersionInfoEXT* versionInfo, out VkAccelerationStructureCompatibilityKHR compatibility) => GetDeviceMicromapCompatibilityEXT_0(device, versionInfo, out compatibility);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMicromapVersionInfoEXT*, out VkAccelerationStructureCompatibilityKHR, void> GetDeviceMicromapCompatibilityEXT_0;
	public static void GetDeviceMicromapCompatibilityEXT(VkDevice device, ref VkMicromapVersionInfoEXT versionInfo, out VkAccelerationStructureCompatibilityKHR compatibility) => GetDeviceMicromapCompatibilityEXT_1(device, ref versionInfo, out compatibility);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapVersionInfoEXT, out VkAccelerationStructureCompatibilityKHR, void> GetDeviceMicromapCompatibilityEXT_1;
	public static void GetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* buildInfo, out VkMicromapBuildSizesInfoEXT sizeInfo) => GetMicromapBuildSizesEXT_0(device, buildType, buildInfo, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkMicromapBuildInfoEXT*, out VkMicromapBuildSizesInfoEXT, void> GetMicromapBuildSizesEXT_0;
	public static void GetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, ref VkMicromapBuildInfoEXT buildInfo, out VkMicromapBuildSizesInfoEXT sizeInfo) => GetMicromapBuildSizesEXT_1(device, buildType, ref buildInfo, out sizeInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkMicromapBuildInfoEXT, out VkMicromapBuildSizesInfoEXT, void> GetMicromapBuildSizesEXT_1;
	public static void CommandDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDrawClusterHUAWEI_0(commandBuffer, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void> CommandDrawClusterHUAWEI_0;
	public static void CommandDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => CommandDrawClusterIndirectHUAWEI_0(commandBuffer, buffer, offset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void> CommandDrawClusterIndirectHUAWEI_0;
	public static void SetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) => SetDeviceMemoryPriorityEXT_0(device, memory, priority);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, float, void> SetDeviceMemoryPriorityEXT_0;
	[Obsolete("Use GetDeviceBufferMemoryRequirements")]
	public static void GetDeviceBufferMemoryRequirementsKHR(VkDevice device, VkDeviceBufferMemoryRequirements* info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceBufferMemoryRequirementsKHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceBufferMemoryRequirements*, out VkMemoryRequirements2, void> GetDeviceBufferMemoryRequirementsKHR_0;
	[Obsolete("Use GetDeviceBufferMemoryRequirements")]
	public static void GetDeviceBufferMemoryRequirementsKHR(VkDevice device, ref VkDeviceBufferMemoryRequirements info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceBufferMemoryRequirementsKHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceBufferMemoryRequirements, out VkMemoryRequirements2, void> GetDeviceBufferMemoryRequirementsKHR_1;
	[Obsolete("Use GetDeviceImageMemoryRequirements")]
	public static void GetDeviceImageMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceImageMemoryRequirementsKHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, out VkMemoryRequirements2, void> GetDeviceImageMemoryRequirementsKHR_0;
	[Obsolete("Use GetDeviceImageMemoryRequirements")]
	public static void GetDeviceImageMemoryRequirementsKHR(VkDevice device, ref VkDeviceImageMemoryRequirements info, out VkMemoryRequirements2 memoryRequirements) => GetDeviceImageMemoryRequirementsKHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, out VkMemoryRequirements2, void> GetDeviceImageMemoryRequirementsKHR_1;
	[Obsolete("Use GetDeviceImageSparseMemoryRequirements")]
	public static void GetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirementsKHR_0(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirementsKHR_0;
	[Obsolete("Use GetDeviceImageSparseMemoryRequirements")]
	public static void GetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirementsKHR_1(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, ref uint, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirementsKHR_1;
	[Obsolete("Use GetDeviceImageSparseMemoryRequirements")]
	public static void GetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, ref VkDeviceImageMemoryRequirements info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirementsKHR_2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, uint*, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirementsKHR_2;
	[Obsolete("Use GetDeviceImageSparseMemoryRequirements")]
	public static void GetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, ref VkDeviceImageMemoryRequirements info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2[] sparseMemoryRequirements) => GetDeviceImageSparseMemoryRequirementsKHR_3(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, ref uint, VkSparseImageMemoryRequirements2[], void> GetDeviceImageSparseMemoryRequirementsKHR_3;
	public static void GetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, VkDescriptorSetBindingReferenceVALVE* bindingReference, out VkDescriptorSetLayoutHostMappingInfoVALVE hostMapping) => GetDescriptorSetLayoutHostMappingInfoVALVE_0(device, bindingReference, out hostMapping);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetBindingReferenceVALVE*, out VkDescriptorSetLayoutHostMappingInfoVALVE, void> GetDescriptorSetLayoutHostMappingInfoVALVE_0;
	public static void GetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, ref VkDescriptorSetBindingReferenceVALVE bindingReference, out VkDescriptorSetLayoutHostMappingInfoVALVE hostMapping) => GetDescriptorSetLayoutHostMappingInfoVALVE_1(device, ref bindingReference, out hostMapping);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetBindingReferenceVALVE, out VkDescriptorSetLayoutHostMappingInfoVALVE, void> GetDescriptorSetLayoutHostMappingInfoVALVE_1;
	public static void GetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** data) => GetDescriptorSetHostMappingVALVE_0(device, descriptorSet, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, void**, void> GetDescriptorSetHostMappingVALVE_0;
	public static void CommandCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint copyCount, uint stride) => CommandCopyMemoryIndirectNV_0(commandBuffer, copyBufferAddress, copyCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, void> CommandCopyMemoryIndirectNV_0;
	public static void CommandCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint copyCount, uint stride, VkImage destinationImage, VkImageLayout destinationImageLayout, VkImageSubresourceLayers* imageSubresources) => CommandCopyMemoryToImageIndirectNV_0(commandBuffer, copyBufferAddress, copyCount, stride, destinationImage, destinationImageLayout, imageSubresources);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, VkImage, VkImageLayout, VkImageSubresourceLayers*, void> CommandCopyMemoryToImageIndirectNV_0;
	public static void CommandCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint copyCount, uint stride, VkImage destinationImage, VkImageLayout destinationImageLayout, ref VkImageSubresourceLayers imageSubresources) => CommandCopyMemoryToImageIndirectNV_1(commandBuffer, copyBufferAddress, copyCount, stride, destinationImage, destinationImageLayout, ref imageSubresources);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, VkImage, VkImageLayout, ref VkImageSubresourceLayers, void> CommandCopyMemoryToImageIndirectNV_1;
	public static void CommandDecompressMemoryNV(VkCommandBuffer commandBuffer, uint decompressRegionCount, VkDecompressMemoryRegionNV* decompressMemoryRegions) => CommandDecompressMemoryNV_0(commandBuffer, decompressRegionCount, decompressMemoryRegions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkDecompressMemoryRegionNV*, void> CommandDecompressMemoryNV_0;
	public static void CommandDecompressMemoryNV(VkCommandBuffer commandBuffer, uint decompressRegionCount, ref VkDecompressMemoryRegionNV decompressMemoryRegions) => CommandDecompressMemoryNV_1(commandBuffer, decompressRegionCount, ref decompressMemoryRegions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkDecompressMemoryRegionNV, void> CommandDecompressMemoryNV_1;
	public static void CommandDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint stride) => CommandDecompressMemoryIndirectCountNV_0(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, uint, void> CommandDecompressMemoryIndirectCountNV_0;
	public static void CommandSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) => CommandSetTessellationDomainOriginEXT_0(commandBuffer, domainOrigin);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkTessellationDomainOrigin, void> CommandSetTessellationDomainOriginEXT_0;
	public static void CommandSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) => CommandSetDepthClampEnableEXT_0(commandBuffer, depthClampEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthClampEnableEXT_0;
	public static void CommandSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) => CommandSetPolygonModeEXT_0(commandBuffer, polygonMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPolygonMode, void> CommandSetPolygonModeEXT_0;
	public static void CommandSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlags rasterizationSamples) => CommandSetRasterizationSamplesEXT_0(commandBuffer, rasterizationSamples);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, void> CommandSetRasterizationSamplesEXT_0;
	public static void CommandSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlags samples, uint* sampleMask) => CommandSetSampleMaskEXT_0(commandBuffer, samples, sampleMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, uint*, void> CommandSetSampleMaskEXT_0;
	public static void CommandSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlags samples, ref uint sampleMask) => CommandSetSampleMaskEXT_1(commandBuffer, samples, ref sampleMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, ref uint, void> CommandSetSampleMaskEXT_1;
	public static void CommandSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) => CommandSetAlphaToCoverageEnableEXT_0(commandBuffer, alphaToCoverageEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetAlphaToCoverageEnableEXT_0;
	public static void CommandSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) => CommandSetAlphaToOneEnableEXT_0(commandBuffer, alphaToOneEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetAlphaToOneEnableEXT_0;
	public static void CommandSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) => CommandSetLogicOpEnableEXT_0(commandBuffer, logicOpEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetLogicOpEnableEXT_0;
	public static void CommandSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkBool32* colorBlendEnables) => CommandSetColorBlendEnableEXT_0(commandBuffer, firstAttachment, attachmentCount, colorBlendEnables);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBool32*, void> CommandSetColorBlendEnableEXT_0;
	public static void CommandSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref VkBool32 colorBlendEnables) => CommandSetColorBlendEnableEXT_1(commandBuffer, firstAttachment, attachmentCount, ref colorBlendEnables);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBool32, void> CommandSetColorBlendEnableEXT_1;
	public static void CommandSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorBlendEquationEXT* colorBlendEquations) => CommandSetColorBlendEquationEXT_0(commandBuffer, firstAttachment, attachmentCount, colorBlendEquations);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorBlendEquationEXT*, void> CommandSetColorBlendEquationEXT_0;
	public static void CommandSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref VkColorBlendEquationEXT colorBlendEquations) => CommandSetColorBlendEquationEXT_1(commandBuffer, firstAttachment, attachmentCount, ref colorBlendEquations);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorBlendEquationEXT, void> CommandSetColorBlendEquationEXT_1;
	public static void CommandSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorComponentFlags* colorWriteMasks) => CommandSetColorWriteMaskEXT_0(commandBuffer, firstAttachment, attachmentCount, colorWriteMasks);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorComponentFlags*, void> CommandSetColorWriteMaskEXT_0;
	public static void CommandSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref VkColorComponentFlags colorWriteMasks) => CommandSetColorWriteMaskEXT_1(commandBuffer, firstAttachment, attachmentCount, ref colorWriteMasks);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorComponentFlags, void> CommandSetColorWriteMaskEXT_1;
	public static void CommandSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint rasterizationStream) => CommandSetRasterizationStreamEXT_0(commandBuffer, rasterizationStream);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetRasterizationStreamEXT_0;
	public static void CommandSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) => CommandSetConservativeRasterizationModeEXT_0(commandBuffer, conservativeRasterizationMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkConservativeRasterizationModeEXT, void> CommandSetConservativeRasterizationModeEXT_0;
	public static void CommandSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) => CommandSetExtraPrimitiveOverestimationSizeEXT_0(commandBuffer, extraPrimitiveOverestimationSize);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void> CommandSetExtraPrimitiveOverestimationSizeEXT_0;
	public static void CommandSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) => CommandSetDepthClipEnableEXT_0(commandBuffer, depthClipEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthClipEnableEXT_0;
	public static void CommandSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) => CommandSetSampleLocationsEnableEXT_0(commandBuffer, sampleLocationsEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetSampleLocationsEnableEXT_0;
	public static void CommandSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorBlendAdvancedEXT* colorBlendAdvanced) => CommandSetColorBlendAdvancedEXT_0(commandBuffer, firstAttachment, attachmentCount, colorBlendAdvanced);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorBlendAdvancedEXT*, void> CommandSetColorBlendAdvancedEXT_0;
	public static void CommandSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref VkColorBlendAdvancedEXT colorBlendAdvanced) => CommandSetColorBlendAdvancedEXT_1(commandBuffer, firstAttachment, attachmentCount, ref colorBlendAdvanced);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorBlendAdvancedEXT, void> CommandSetColorBlendAdvancedEXT_1;
	public static void CommandSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) => CommandSetProvokingVertexModeEXT_0(commandBuffer, provokingVertexMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkProvokingVertexModeEXT, void> CommandSetProvokingVertexModeEXT_0;
	public static void CommandSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) => CommandSetLineRasterizationModeEXT_0(commandBuffer, lineRasterizationMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkLineRasterizationModeEXT, void> CommandSetLineRasterizationModeEXT_0;
	public static void CommandSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) => CommandSetLineStippleEnableEXT_0(commandBuffer, stippledLineEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetLineStippleEnableEXT_0;
	public static void CommandSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) => CommandSetDepthClipNegativeOneToOneEXT_0(commandBuffer, negativeOneToOne);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetDepthClipNegativeOneToOneEXT_0;
	public static void CommandSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) => CommandSetViewportWScalingEnableNV_0(commandBuffer, viewportWScalingEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetViewportWScalingEnableNV_0;
	public static void CommandSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportSwizzleNV* viewportSwizzles) => CommandSetViewportSwizzleNV_0(commandBuffer, firstViewport, viewportCount, viewportSwizzles);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportSwizzleNV*, void> CommandSetViewportSwizzleNV_0;
	public static void CommandSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewportSwizzleNV viewportSwizzles) => CommandSetViewportSwizzleNV_1(commandBuffer, firstViewport, viewportCount, ref viewportSwizzles);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportSwizzleNV, void> CommandSetViewportSwizzleNV_1;
	public static void CommandSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) => CommandSetCoverageToColorEnableNV_0(commandBuffer, coverageToColorEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetCoverageToColorEnableNV_0;
	public static void CommandSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint coverageToColorLocation) => CommandSetCoverageToColorLocationNV_0(commandBuffer, coverageToColorLocation);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetCoverageToColorLocationNV_0;
	public static void CommandSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) => CommandSetCoverageModulationModeNV_0(commandBuffer, coverageModulationMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoverageModulationModeNV, void> CommandSetCoverageModulationModeNV_0;
	public static void CommandSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) => CommandSetCoverageModulationTableEnableNV_0(commandBuffer, coverageModulationTableEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetCoverageModulationTableEnableNV_0;
	public static void CommandSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint coverageModulationTableCount, float* coverageModulationTable) => CommandSetCoverageModulationTableNV_0(commandBuffer, coverageModulationTableCount, coverageModulationTable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, float*, void> CommandSetCoverageModulationTableNV_0;
	public static void CommandSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint coverageModulationTableCount, ref float coverageModulationTable) => CommandSetCoverageModulationTableNV_1(commandBuffer, coverageModulationTableCount, ref coverageModulationTable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref float, void> CommandSetCoverageModulationTableNV_1;
	public static void CommandSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) => CommandSetShadingRateImageEnableNV_0(commandBuffer, shadingRateImageEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetShadingRateImageEnableNV_0;
	public static void CommandSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) => CommandSetRepresentativeFragmentTestEnableNV_0(commandBuffer, representativeFragmentTestEnable);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void> CommandSetRepresentativeFragmentTestEnableNV_0;
	public static void CommandSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) => CommandSetCoverageReductionModeNV_0(commandBuffer, coverageReductionMode);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoverageReductionModeNV, void> CommandSetCoverageReductionModeNV_0;
	public static void GetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, out VkShaderModuleIdentifierEXT identifier) => GetShaderModuleIdentifierEXT_0(device, shaderModule, out identifier);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, out VkShaderModuleIdentifierEXT, void> GetShaderModuleIdentifierEXT_0;
	public static void GetShaderModuleCreateInfoIdentifierEXT(VkDevice device, VkShaderModuleCreateInfo* createInfo, out VkShaderModuleIdentifierEXT identifier) => GetShaderModuleCreateInfoIdentifierEXT_0(device, createInfo, out identifier);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, out VkShaderModuleIdentifierEXT, void> GetShaderModuleCreateInfoIdentifierEXT_0;
	public static void GetShaderModuleCreateInfoIdentifierEXT(VkDevice device, ref VkShaderModuleCreateInfo createInfo, out VkShaderModuleIdentifierEXT identifier) => GetShaderModuleCreateInfoIdentifierEXT_1(device, ref createInfo, out identifier);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, out VkShaderModuleIdentifierEXT, void> GetShaderModuleCreateInfoIdentifierEXT_1;
	public static VkResult GetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* opticalFlowImageFormatInfo, uint* formatCount, [In, Out] VkOpticalFlowImageFormatPropertiesNV[] imageFormatProperties) => GetPhysicalDeviceOpticalFlowImageFormatsNV_0(physicalDevice, opticalFlowImageFormatInfo, formatCount, imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, uint*, VkOpticalFlowImageFormatPropertiesNV[], VkResult> GetPhysicalDeviceOpticalFlowImageFormatsNV_0;
	public static VkResult GetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* opticalFlowImageFormatInfo, ref uint formatCount, [In, Out] VkOpticalFlowImageFormatPropertiesNV[] imageFormatProperties) => GetPhysicalDeviceOpticalFlowImageFormatsNV_1(physicalDevice, opticalFlowImageFormatInfo, ref formatCount, imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, ref uint, VkOpticalFlowImageFormatPropertiesNV[], VkResult> GetPhysicalDeviceOpticalFlowImageFormatsNV_1;
	public static VkResult GetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, ref VkOpticalFlowImageFormatInfoNV opticalFlowImageFormatInfo, uint* formatCount, [In, Out] VkOpticalFlowImageFormatPropertiesNV[] imageFormatProperties) => GetPhysicalDeviceOpticalFlowImageFormatsNV_2(physicalDevice, ref opticalFlowImageFormatInfo, formatCount, imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkOpticalFlowImageFormatInfoNV, uint*, VkOpticalFlowImageFormatPropertiesNV[], VkResult> GetPhysicalDeviceOpticalFlowImageFormatsNV_2;
	public static VkResult GetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, ref VkOpticalFlowImageFormatInfoNV opticalFlowImageFormatInfo, ref uint formatCount, [In, Out] VkOpticalFlowImageFormatPropertiesNV[] imageFormatProperties) => GetPhysicalDeviceOpticalFlowImageFormatsNV_3(physicalDevice, ref opticalFlowImageFormatInfo, ref formatCount, imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkOpticalFlowImageFormatInfoNV, ref uint, VkOpticalFlowImageFormatPropertiesNV[], VkResult> GetPhysicalDeviceOpticalFlowImageFormatsNV_3;
	public static VkResult CreateOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, out VkOpticalFlowSessionNV session) => CreateOpticalFlowSessionNV_0(device, createInfo, allocator, out session);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, out VkOpticalFlowSessionNV, VkResult> CreateOpticalFlowSessionNV_0;
	public static VkResult CreateOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionCreateInfoNV* createInfo, ref VkAllocationCallbacks allocator, out VkOpticalFlowSessionNV session) => CreateOpticalFlowSessionNV_1(device, createInfo, ref allocator, out session);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionCreateInfoNV*, ref VkAllocationCallbacks, out VkOpticalFlowSessionNV, VkResult> CreateOpticalFlowSessionNV_1;
	public static VkResult CreateOpticalFlowSessionNV(VkDevice device, ref VkOpticalFlowSessionCreateInfoNV createInfo, VkAllocationCallbacks* allocator, out VkOpticalFlowSessionNV session) => CreateOpticalFlowSessionNV_2(device, ref createInfo, allocator, out session);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkOpticalFlowSessionCreateInfoNV, VkAllocationCallbacks*, out VkOpticalFlowSessionNV, VkResult> CreateOpticalFlowSessionNV_2;
	public static VkResult CreateOpticalFlowSessionNV(VkDevice device, ref VkOpticalFlowSessionCreateInfoNV createInfo, ref VkAllocationCallbacks allocator, out VkOpticalFlowSessionNV session) => CreateOpticalFlowSessionNV_3(device, ref createInfo, ref allocator, out session);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkOpticalFlowSessionCreateInfoNV, ref VkAllocationCallbacks, out VkOpticalFlowSessionNV, VkResult> CreateOpticalFlowSessionNV_3;
	public static void DestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, VkAllocationCallbacks* allocator) => DestroyOpticalFlowSessionNV_0(device, session, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, VkAllocationCallbacks*, void> DestroyOpticalFlowSessionNV_0;
	public static void DestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, ref VkAllocationCallbacks allocator) => DestroyOpticalFlowSessionNV_1(device, session, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, ref VkAllocationCallbacks, void> DestroyOpticalFlowSessionNV_1;
	public static VkResult BindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) => BindOpticalFlowSessionImageNV_0(device, session, bindingPoint, view, layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout, VkResult> BindOpticalFlowSessionImageNV_0;
	public static void CommandOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* executeInfo) => CommandOpticalFlowExecuteNV_0(commandBuffer, session, executeInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkOpticalFlowSessionNV, VkOpticalFlowExecuteInfoNV*, void> CommandOpticalFlowExecuteNV_0;
	public static void CommandOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, ref VkOpticalFlowExecuteInfoNV executeInfo) => CommandOpticalFlowExecuteNV_1(commandBuffer, session, ref executeInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkOpticalFlowSessionNV, ref VkOpticalFlowExecuteInfoNV, void> CommandOpticalFlowExecuteNV_1;
	public static VkResult GetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint* propertiesCount, [In, Out] VkTilePropertiesQCOM[] properties) => GetFramebufferTilePropertiesQCOM_0(device, framebuffer, propertiesCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, uint*, VkTilePropertiesQCOM[], VkResult> GetFramebufferTilePropertiesQCOM_0;
	public static VkResult GetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, ref uint propertiesCount, [In, Out] VkTilePropertiesQCOM[] properties) => GetFramebufferTilePropertiesQCOM_1(device, framebuffer, ref propertiesCount, properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref uint, VkTilePropertiesQCOM[], VkResult> GetFramebufferTilePropertiesQCOM_1;
	public static VkResult GetDynamicRenderingTilePropertiesQCOM(VkDevice device, VkRenderingInfo* renderingInfo, out VkTilePropertiesQCOM properties) => GetDynamicRenderingTilePropertiesQCOM_0(device, renderingInfo, out properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderingInfo*, out VkTilePropertiesQCOM, VkResult> GetDynamicRenderingTilePropertiesQCOM_0;
	public static VkResult GetDynamicRenderingTilePropertiesQCOM(VkDevice device, ref VkRenderingInfo renderingInfo, out VkTilePropertiesQCOM properties) => GetDynamicRenderingTilePropertiesQCOM_1(device, ref renderingInfo, out properties);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderingInfo, out VkTilePropertiesQCOM, VkResult> GetDynamicRenderingTilePropertiesQCOM_1;
	private static readonly OSVulkanLibraryBase VulkanLibrary;
	static VK()
	{
		VulkanLibrary = OSVulkanLibraryBase.CreateOSVulkanLibrary();
		InitialiseRequiredMethods();
	}
	private static void InitialiseRequiredMethods()
	{
		var createInstance = VulkanLibrary.GetFunctionPointer("CreateInstance");
		CreateInstance_0 = (delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, VkAllocationCallbacks*, out VkInstance, VkResult>)createInstance;
		CreateInstance_1 = (delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, ref VkAllocationCallbacks, out VkInstance, VkResult>)createInstance;
		CreateInstance_2 = (delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, VkAllocationCallbacks*, out VkInstance, VkResult>)createInstance;
		CreateInstance_3 = (delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, ref VkAllocationCallbacks, out VkInstance, VkResult>)createInstance;
		var getInstanceProcedureAddress = VulkanLibrary.GetFunctionPointer("GetInstanceProcedureAddress");
		GetInstanceProcedureAddress_0 = (delegate* unmanaged[Cdecl]<VkInstance, string, delegate*<void>>)getInstanceProcedureAddress;
		var enumerateInstanceExtensionProperties = VulkanLibrary.GetFunctionPointer("EnumerateInstanceExtensionProperties");
		EnumerateInstanceExtensionProperties_0 = (delegate* unmanaged[Cdecl]<string, uint*, VkExtensionProperties[], VkResult>)enumerateInstanceExtensionProperties;
		EnumerateInstanceExtensionProperties_1 = (delegate* unmanaged[Cdecl]<string, ref uint, VkExtensionProperties[], VkResult>)enumerateInstanceExtensionProperties;
		var enumerateInstanceLayerProperties = VulkanLibrary.GetFunctionPointer("EnumerateInstanceLayerProperties");
		EnumerateInstanceLayerProperties_0 = (delegate* unmanaged[Cdecl]<uint*, VkLayerProperties[], VkResult>)enumerateInstanceLayerProperties;
		EnumerateInstanceLayerProperties_1 = (delegate* unmanaged[Cdecl]<ref uint, VkLayerProperties[], VkResult>)enumerateInstanceLayerProperties;
	}
	public static void InitialiseInstanceMethods(VkInstance instance)
	{
		var destroyInstance = GetInstanceProcedureAddress(instance, "DestroyInstance");
		DestroyInstance_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkAllocationCallbacks*, void>)destroyInstance;
		DestroyInstance_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAllocationCallbacks, void>)destroyInstance;
		var enumeratePhysicalDevices = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDevices");
		EnumeratePhysicalDevices_0 = (delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDevice[], VkResult>)enumeratePhysicalDevices;
		EnumeratePhysicalDevices_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDevice[], VkResult>)enumeratePhysicalDevices;
		var getPhysicalDeviceFeatures = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFeatures");
		GetPhysicalDeviceFeatures_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures, void>)getPhysicalDeviceFeatures;
		var getPhysicalDeviceFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFormatProperties");
		GetPhysicalDeviceFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties, void>)getPhysicalDeviceFormatProperties;
		var getPhysicalDeviceImageFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceImageFormatProperties");
		GetPhysicalDeviceImageFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, out VkImageFormatProperties, VkResult>)getPhysicalDeviceImageFormatProperties;
		var getPhysicalDeviceProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceProperties");
		GetPhysicalDeviceProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties, void>)getPhysicalDeviceProperties;
		var getPhysicalDeviceQueueFamilyProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyProperties");
		GetPhysicalDeviceQueueFamilyProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties[], void>)getPhysicalDeviceQueueFamilyProperties;
		GetPhysicalDeviceQueueFamilyProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties[], void>)getPhysicalDeviceQueueFamilyProperties;
		var getPhysicalDeviceMemoryProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMemoryProperties");
		GetPhysicalDeviceMemoryProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties, void>)getPhysicalDeviceMemoryProperties;
		var getDeviceProcedureAddress = GetInstanceProcedureAddress(instance, "GetDeviceProcedureAddress");
		GetDeviceProcedureAddress_0 = (delegate* unmanaged[Cdecl]<VkDevice, string, delegate*<void>>)getDeviceProcedureAddress;
		var createDevice = GetInstanceProcedureAddress(instance, "CreateDevice");
		CreateDevice_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, out VkDevice, VkResult>)createDevice;
		CreateDevice_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, ref VkAllocationCallbacks, out VkDevice, VkResult>)createDevice;
		CreateDevice_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, VkAllocationCallbacks*, out VkDevice, VkResult>)createDevice;
		CreateDevice_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, ref VkAllocationCallbacks, out VkDevice, VkResult>)createDevice;
		var destroyDevice = GetInstanceProcedureAddress(instance, "DestroyDevice");
		DestroyDevice_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, void>)destroyDevice;
		DestroyDevice_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, void>)destroyDevice;
		var enumerateDeviceExtensionProperties = GetInstanceProcedureAddress(instance, "EnumerateDeviceExtensionProperties");
		EnumerateDeviceExtensionProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, uint*, VkExtensionProperties[], VkResult>)enumerateDeviceExtensionProperties;
		EnumerateDeviceExtensionProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, ref uint, VkExtensionProperties[], VkResult>)enumerateDeviceExtensionProperties;
		var enumerateDeviceLayerProperties = GetInstanceProcedureAddress(instance, "EnumerateDeviceLayerProperties");
		EnumerateDeviceLayerProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkLayerProperties[], VkResult>)enumerateDeviceLayerProperties;
		EnumerateDeviceLayerProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkLayerProperties[], VkResult>)enumerateDeviceLayerProperties;
		var getDeviceQueue = GetInstanceProcedureAddress(instance, "GetDeviceQueue");
		GetDeviceQueue_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, uint, out VkQueue, void>)getDeviceQueue;
		var queueSubmit = GetInstanceProcedureAddress(instance, "QueueSubmit");
		QueueSubmit_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo[], VkFence, VkResult>)queueSubmit;
		var queueWaitIdle = GetInstanceProcedureAddress(instance, "QueueWaitIdle");
		QueueWaitIdle_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkResult>)queueWaitIdle;
		var deviceWaitIdle = GetInstanceProcedureAddress(instance, "DeviceWaitIdle");
		DeviceWaitIdle_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkResult>)deviceWaitIdle;
		var allocateMemory = GetInstanceProcedureAddress(instance, "AllocateMemory");
		AllocateMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, VkAllocationCallbacks*, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult>)allocateMemory;
		var freeMemory = GetInstanceProcedureAddress(instance, "FreeMemory");
		FreeMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)freeMemory;
		FreeMemory_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, ref VkAllocationCallbacks, void>)freeMemory;
		var mapMemory = GetInstanceProcedureAddress(instance, "MapMemory");
		MapMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**, VkResult>)mapMemory;
		var unmapMemory = GetInstanceProcedureAddress(instance, "UnmapMemory");
		UnmapMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void>)unmapMemory;
		var flushMappedMemoryRanges = GetInstanceProcedureAddress(instance, "FlushMappedMemoryRanges");
		FlushMappedMemoryRanges_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult>)flushMappedMemoryRanges;
		var invalidateMappedMemoryRanges = GetInstanceProcedureAddress(instance, "InvalidateMappedMemoryRanges");
		InvalidateMappedMemoryRanges_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult>)invalidateMappedMemoryRanges;
		var getDeviceMemoryCommitment = GetInstanceProcedureAddress(instance, "GetDeviceMemoryCommitment");
		GetDeviceMemoryCommitment_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, out VkDeviceSize, void>)getDeviceMemoryCommitment;
		var bindBufferMemory = GetInstanceProcedureAddress(instance, "BindBufferMemory");
		BindBufferMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult>)bindBufferMemory;
		var bindImageMemory = GetInstanceProcedureAddress(instance, "BindImageMemory");
		BindImageMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult>)bindImageMemory;
		var getBufferMemoryRequirements = GetInstanceProcedureAddress(instance, "GetBufferMemoryRequirements");
		GetBufferMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, out VkMemoryRequirements, void>)getBufferMemoryRequirements;
		var getImageMemoryRequirements = GetInstanceProcedureAddress(instance, "GetImageMemoryRequirements");
		GetImageMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkMemoryRequirements, void>)getImageMemoryRequirements;
		var getImageSparseMemoryRequirements = GetInstanceProcedureAddress(instance, "GetImageSparseMemoryRequirements");
		GetImageSparseMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements[], void>)getImageSparseMemoryRequirements;
		GetImageSparseMemoryRequirements_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref uint, VkSparseImageMemoryRequirements[], void>)getImageSparseMemoryRequirements;
		var getPhysicalDeviceSparseImageFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSparseImageFormatProperties");
		GetPhysicalDeviceSparseImageFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties[], void>)getPhysicalDeviceSparseImageFormatProperties;
		GetPhysicalDeviceSparseImageFormatProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, ref uint, VkSparseImageFormatProperties[], void>)getPhysicalDeviceSparseImageFormatProperties;
		var queueBindSparse = GetInstanceProcedureAddress(instance, "QueueBindSparse");
		QueueBindSparse_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)queueBindSparse;
		QueueBindSparse_1 = (delegate* unmanaged[Cdecl]<VkQueue, uint, ref VkBindSparseInfo, VkFence, VkResult>)queueBindSparse;
		var createFence = GetInstanceProcedureAddress(instance, "CreateFence");
		CreateFence_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, out VkFence, VkResult>)createFence;
		CreateFence_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, ref VkAllocationCallbacks, out VkFence, VkResult>)createFence;
		CreateFence_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, VkAllocationCallbacks*, out VkFence, VkResult>)createFence;
		CreateFence_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, ref VkAllocationCallbacks, out VkFence, VkResult>)createFence;
		var destroyFence = GetInstanceProcedureAddress(instance, "DestroyFence");
		DestroyFence_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkAllocationCallbacks*, void>)destroyFence;
		DestroyFence_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, ref VkAllocationCallbacks, void>)destroyFence;
		var resetFences = GetInstanceProcedureAddress(instance, "ResetFences");
		ResetFences_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkResult>)resetFences;
		var getFenceStatus = GetInstanceProcedureAddress(instance, "GetFenceStatus");
		GetFenceStatus_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult>)getFenceStatus;
		var waitForFences = GetInstanceProcedureAddress(instance, "WaitForFences");
		WaitForFences_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkBool32, ulong, VkResult>)waitForFences;
		var createSemaphore = GetInstanceProcedureAddress(instance, "CreateSemaphore");
		CreateSemaphore_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, ref VkAllocationCallbacks, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, VkAllocationCallbacks*, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, ref VkAllocationCallbacks, out VkSemaphore, VkResult>)createSemaphore;
		var destroySemaphore = GetInstanceProcedureAddress(instance, "DestroySemaphore");
		DestroySemaphore_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)destroySemaphore;
		DestroySemaphore_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, ref VkAllocationCallbacks, void>)destroySemaphore;
		var createEvent = GetInstanceProcedureAddress(instance, "CreateEvent");
		CreateEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, out VkEvent, VkResult>)createEvent;
		CreateEvent_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, ref VkAllocationCallbacks, out VkEvent, VkResult>)createEvent;
		CreateEvent_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, VkAllocationCallbacks*, out VkEvent, VkResult>)createEvent;
		CreateEvent_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, ref VkAllocationCallbacks, out VkEvent, VkResult>)createEvent;
		var destroyEvent = GetInstanceProcedureAddress(instance, "DestroyEvent");
		DestroyEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkAllocationCallbacks*, void>)destroyEvent;
		DestroyEvent_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, ref VkAllocationCallbacks, void>)destroyEvent;
		var getEventStatus = GetInstanceProcedureAddress(instance, "GetEventStatus");
		GetEventStatus_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)getEventStatus;
		var setEvent = GetInstanceProcedureAddress(instance, "SetEvent");
		SetEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)setEvent;
		var resetEvent = GetInstanceProcedureAddress(instance, "ResetEvent");
		ResetEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)resetEvent;
		var createQueryPool = GetInstanceProcedureAddress(instance, "CreateQueryPool");
		CreateQueryPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, ref VkAllocationCallbacks, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, VkAllocationCallbacks*, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, ref VkAllocationCallbacks, out VkQueryPool, VkResult>)createQueryPool;
		var destroyQueryPool = GetInstanceProcedureAddress(instance, "DestroyQueryPool");
		DestroyQueryPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)destroyQueryPool;
		DestroyQueryPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, ref VkAllocationCallbacks, void>)destroyQueryPool;
		var getQueryPoolResults = GetInstanceProcedureAddress(instance, "GetQueryPoolResults");
		GetQueryPoolResults_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, void*, VkDeviceSize, VkQueryResultFlags, VkResult>)getQueryPoolResults;
		var createBuffer = GetInstanceProcedureAddress(instance, "CreateBuffer");
		CreateBuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, ref VkAllocationCallbacks, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, VkAllocationCallbacks*, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, ref VkAllocationCallbacks, out VkBuffer, VkResult>)createBuffer;
		var destroyBuffer = GetInstanceProcedureAddress(instance, "DestroyBuffer");
		DestroyBuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)destroyBuffer;
		DestroyBuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, ref VkAllocationCallbacks, void>)destroyBuffer;
		var createBufferView = GetInstanceProcedureAddress(instance, "CreateBufferView");
		CreateBufferView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, ref VkAllocationCallbacks, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, VkAllocationCallbacks*, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, ref VkAllocationCallbacks, out VkBufferView, VkResult>)createBufferView;
		var destroyBufferView = GetInstanceProcedureAddress(instance, "DestroyBufferView");
		DestroyBufferView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)destroyBufferView;
		DestroyBufferView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, ref VkAllocationCallbacks, void>)destroyBufferView;
		var createImage = GetInstanceProcedureAddress(instance, "CreateImage");
		CreateImage_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, out VkImage, VkResult>)createImage;
		CreateImage_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, ref VkAllocationCallbacks, out VkImage, VkResult>)createImage;
		CreateImage_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, VkAllocationCallbacks*, out VkImage, VkResult>)createImage;
		CreateImage_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, ref VkAllocationCallbacks, out VkImage, VkResult>)createImage;
		var destroyImage = GetInstanceProcedureAddress(instance, "DestroyImage");
		DestroyImage_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkAllocationCallbacks*, void>)destroyImage;
		DestroyImage_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkAllocationCallbacks, void>)destroyImage;
		var getImageSubresourceLayout = GetInstanceProcedureAddress(instance, "GetImageSubresourceLayout");
		GetImageSubresourceLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource*, out VkSubresourceLayout, void>)getImageSubresourceLayout;
		GetImageSubresourceLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource, out VkSubresourceLayout, void>)getImageSubresourceLayout;
		var createImageView = GetInstanceProcedureAddress(instance, "CreateImageView");
		CreateImageView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, out VkImageView, VkResult>)createImageView;
		CreateImageView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, ref VkAllocationCallbacks, out VkImageView, VkResult>)createImageView;
		CreateImageView_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, VkAllocationCallbacks*, out VkImageView, VkResult>)createImageView;
		CreateImageView_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, ref VkAllocationCallbacks, out VkImageView, VkResult>)createImageView;
		var destroyImageView = GetInstanceProcedureAddress(instance, "DestroyImageView");
		DestroyImageView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageView, VkAllocationCallbacks*, void>)destroyImageView;
		DestroyImageView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageView, ref VkAllocationCallbacks, void>)destroyImageView;
		var createShaderModule = GetInstanceProcedureAddress(instance, "CreateShaderModule");
		CreateShaderModule_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, ref VkAllocationCallbacks, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, VkAllocationCallbacks*, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, ref VkAllocationCallbacks, out VkShaderModule, VkResult>)createShaderModule;
		var destroyShaderModule = GetInstanceProcedureAddress(instance, "DestroyShaderModule");
		DestroyShaderModule_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)destroyShaderModule;
		DestroyShaderModule_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, ref VkAllocationCallbacks, void>)destroyShaderModule;
		var createPipelineCache = GetInstanceProcedureAddress(instance, "CreatePipelineCache");
		CreatePipelineCache_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, ref VkAllocationCallbacks, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, VkAllocationCallbacks*, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, ref VkAllocationCallbacks, out VkPipelineCache, VkResult>)createPipelineCache;
		var destroyPipelineCache = GetInstanceProcedureAddress(instance, "DestroyPipelineCache");
		DestroyPipelineCache_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)destroyPipelineCache;
		DestroyPipelineCache_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref VkAllocationCallbacks, void>)destroyPipelineCache;
		var getPipelineCacheData = GetInstanceProcedureAddress(instance, "GetPipelineCacheData");
		GetPipelineCacheData_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nuint*, void*, VkResult>)getPipelineCacheData;
		GetPipelineCacheData_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref nuint, void*, VkResult>)getPipelineCacheData;
		var mergePipelineCaches = GetInstanceProcedureAddress(instance, "MergePipelineCaches");
		MergePipelineCaches_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkPipelineCache[], VkResult>)mergePipelineCaches;
		var createGraphicsPipelines = GetInstanceProcedureAddress(instance, "CreateGraphicsPipelines");
		CreateGraphicsPipelines_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createGraphicsPipelines;
		CreateGraphicsPipelines_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createGraphicsPipelines;
		var createComputePipelines = GetInstanceProcedureAddress(instance, "CreateComputePipelines");
		CreateComputePipelines_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createComputePipelines;
		CreateComputePipelines_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createComputePipelines;
		var destroyPipeline = GetInstanceProcedureAddress(instance, "DestroyPipeline");
		DestroyPipeline_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)destroyPipeline;
		DestroyPipeline_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, ref VkAllocationCallbacks, void>)destroyPipeline;
		var createPipelineLayout = GetInstanceProcedureAddress(instance, "CreatePipelineLayout");
		CreatePipelineLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, VkAllocationCallbacks*, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult>)createPipelineLayout;
		var destroyPipelineLayout = GetInstanceProcedureAddress(instance, "DestroyPipelineLayout");
		DestroyPipelineLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)destroyPipelineLayout;
		DestroyPipelineLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, ref VkAllocationCallbacks, void>)destroyPipelineLayout;
		var createSampler = GetInstanceProcedureAddress(instance, "CreateSampler");
		CreateSampler_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, out VkSampler, VkResult>)createSampler;
		CreateSampler_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, ref VkAllocationCallbacks, out VkSampler, VkResult>)createSampler;
		CreateSampler_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, VkAllocationCallbacks*, out VkSampler, VkResult>)createSampler;
		CreateSampler_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, ref VkAllocationCallbacks, out VkSampler, VkResult>)createSampler;
		var destroySampler = GetInstanceProcedureAddress(instance, "DestroySampler");
		DestroySampler_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSampler, VkAllocationCallbacks*, void>)destroySampler;
		DestroySampler_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSampler, ref VkAllocationCallbacks, void>)destroySampler;
		var createDescriptorSetLayout = GetInstanceProcedureAddress(instance, "CreateDescriptorSetLayout");
		CreateDescriptorSetLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		var destroyDescriptorSetLayout = GetInstanceProcedureAddress(instance, "DestroyDescriptorSetLayout");
		DestroyDescriptorSetLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)destroyDescriptorSetLayout;
		DestroyDescriptorSetLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, ref VkAllocationCallbacks, void>)destroyDescriptorSetLayout;
		var createDescriptorPool = GetInstanceProcedureAddress(instance, "CreateDescriptorPool");
		CreateDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, VkAllocationCallbacks*, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult>)createDescriptorPool;
		var destroyDescriptorPool = GetInstanceProcedureAddress(instance, "DestroyDescriptorPool");
		DestroyDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)destroyDescriptorPool;
		DestroyDescriptorPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, ref VkAllocationCallbacks, void>)destroyDescriptorPool;
		var resetDescriptorPool = GetInstanceProcedureAddress(instance, "ResetDescriptorPool");
		ResetDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult>)resetDescriptorPool;
		var allocateDescriptorSets = GetInstanceProcedureAddress(instance, "AllocateDescriptorSets");
		AllocateDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet[], VkResult>)allocateDescriptorSets;
		AllocateDescriptorSets_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetAllocateInfo, VkDescriptorSet[], VkResult>)allocateDescriptorSets;
		var freeDescriptorSets = GetInstanceProcedureAddress(instance, "FreeDescriptorSets");
		FreeDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkDescriptorSet[], VkResult>)freeDescriptorSets;
		var updateDescriptorSets = GetInstanceProcedureAddress(instance, "UpdateDescriptorSets");
		UpdateDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkWriteDescriptorSet[], uint, VkCopyDescriptorSet[], void>)updateDescriptorSets;
		var createFramebuffer = GetInstanceProcedureAddress(instance, "CreateFramebuffer");
		CreateFramebuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, ref VkAllocationCallbacks, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, VkAllocationCallbacks*, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, ref VkAllocationCallbacks, out VkFramebuffer, VkResult>)createFramebuffer;
		var destroyFramebuffer = GetInstanceProcedureAddress(instance, "DestroyFramebuffer");
		DestroyFramebuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)destroyFramebuffer;
		DestroyFramebuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref VkAllocationCallbacks, void>)destroyFramebuffer;
		var createRenderPass = GetInstanceProcedureAddress(instance, "CreateRenderPass");
		CreateRenderPass_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass;
		var destroyRenderPass = GetInstanceProcedureAddress(instance, "DestroyRenderPass");
		DestroyRenderPass_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)destroyRenderPass;
		DestroyRenderPass_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, ref VkAllocationCallbacks, void>)destroyRenderPass;
		var getRenderAreaGranularity = GetInstanceProcedureAddress(instance, "GetRenderAreaGranularity");
		GetRenderAreaGranularity_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, void>)getRenderAreaGranularity;
		var createCommandPool = GetInstanceProcedureAddress(instance, "CreateCommandPool");
		CreateCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, ref VkAllocationCallbacks, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, VkAllocationCallbacks*, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, ref VkAllocationCallbacks, out VkCommandPool, VkResult>)createCommandPool;
		var destroyCommandPool = GetInstanceProcedureAddress(instance, "DestroyCommandPool");
		DestroyCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)destroyCommandPool;
		DestroyCommandPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, ref VkAllocationCallbacks, void>)destroyCommandPool;
		var resetCommandPool = GetInstanceProcedureAddress(instance, "ResetCommandPool");
		ResetCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)resetCommandPool;
		var allocateCommandBuffers = GetInstanceProcedureAddress(instance, "AllocateCommandBuffers");
		AllocateCommandBuffers_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer[], VkResult>)allocateCommandBuffers;
		AllocateCommandBuffers_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandBufferAllocateInfo, VkCommandBuffer[], VkResult>)allocateCommandBuffers;
		var freeCommandBuffers = GetInstanceProcedureAddress(instance, "FreeCommandBuffers");
		FreeCommandBuffers_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, VkCommandBuffer[], void>)freeCommandBuffers;
		var beginCommandBuffer = GetInstanceProcedureAddress(instance, "BeginCommandBuffer");
		BeginCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)beginCommandBuffer;
		BeginCommandBuffer_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCommandBufferBeginInfo, VkResult>)beginCommandBuffer;
		var endCommandBuffer = GetInstanceProcedureAddress(instance, "EndCommandBuffer");
		EndCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult>)endCommandBuffer;
		var resetCommandBuffer = GetInstanceProcedureAddress(instance, "ResetCommandBuffer");
		ResetCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)resetCommandBuffer;
		var commandBindPipeline = GetInstanceProcedureAddress(instance, "CommandBindPipeline");
		CommandBindPipeline_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)commandBindPipeline;
		var commandSetViewport = GetInstanceProcedureAddress(instance, "CommandSetViewport");
		CommandSetViewport_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewport[], void>)commandSetViewport;
		var commandSetScissor = GetInstanceProcedureAddress(instance, "CommandSetScissor");
		CommandSetScissor_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void>)commandSetScissor;
		var commandSetLineWidth = GetInstanceProcedureAddress(instance, "CommandSetLineWidth");
		CommandSetLineWidth_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)commandSetLineWidth;
		var commandSetDepthBias = GetInstanceProcedureAddress(instance, "CommandSetDepthBias");
		CommandSetDepthBias_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void>)commandSetDepthBias;
		var commandSetBlendConstants = GetInstanceProcedureAddress(instance, "CommandSetBlendConstants");
		CommandSetBlendConstants_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)commandSetBlendConstants;
		var commandSetDepthBounds = GetInstanceProcedureAddress(instance, "CommandSetDepthBounds");
		CommandSetDepthBounds_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void>)commandSetDepthBounds;
		var commandSetStencilCompareMask = GetInstanceProcedureAddress(instance, "CommandSetStencilCompareMask");
		CommandSetStencilCompareMask_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilCompareMask;
		var commandSetStencilWriteMask = GetInstanceProcedureAddress(instance, "CommandSetStencilWriteMask");
		CommandSetStencilWriteMask_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilWriteMask;
		var commandSetStencilReference = GetInstanceProcedureAddress(instance, "CommandSetStencilReference");
		CommandSetStencilReference_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilReference;
		var commandBindDescriptorSets = GetInstanceProcedureAddress(instance, "CommandBindDescriptorSets");
		CommandBindDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet[], uint, uint[], void>)commandBindDescriptorSets;
		var commandBindIndexBuffer = GetInstanceProcedureAddress(instance, "CommandBindIndexBuffer");
		CommandBindIndexBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void>)commandBindIndexBuffer;
		var commandBindVertexBuffers = GetInstanceProcedureAddress(instance, "CommandBindVertexBuffers");
		CommandBindVertexBuffers_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, void>)commandBindVertexBuffers;
		var commandDraw = GetInstanceProcedureAddress(instance, "CommandDraw");
		CommandDraw_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void>)commandDraw;
		var commandDrawIndexed = GetInstanceProcedureAddress(instance, "CommandDrawIndexed");
		CommandDrawIndexed_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void>)commandDrawIndexed;
		var commandDrawIndirect = GetInstanceProcedureAddress(instance, "CommandDrawIndirect");
		CommandDrawIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirect;
		var commandDrawIndexedIndirect = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirect");
		CommandDrawIndexedIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirect;
		var commandDispatch = GetInstanceProcedureAddress(instance, "CommandDispatch");
		CommandDispatch_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)commandDispatch;
		var commandDispatchIndirect = GetInstanceProcedureAddress(instance, "CommandDispatchIndirect");
		CommandDispatchIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)commandDispatchIndirect;
		var commandCopyBuffer = GetInstanceProcedureAddress(instance, "CommandCopyBuffer");
		CommandCopyBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy[], void>)commandCopyBuffer;
		var commandCopyImage = GetInstanceProcedureAddress(instance, "CommandCopyImage");
		CommandCopyImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy[], void>)commandCopyImage;
		var commandBlitImage = GetInstanceProcedureAddress(instance, "CommandBlitImage");
		CommandBlitImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit[], VkFilter, void>)commandBlitImage;
		var commandCopyBufferToImage = GetInstanceProcedureAddress(instance, "CommandCopyBufferToImage");
		CommandCopyBufferToImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy[], void>)commandCopyBufferToImage;
		var commandCopyImageToBuffer = GetInstanceProcedureAddress(instance, "CommandCopyImageToBuffer");
		CommandCopyImageToBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy[], void>)commandCopyImageToBuffer;
		var commandUpdateBuffer = GetInstanceProcedureAddress(instance, "CommandUpdateBuffer");
		CommandUpdateBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void>)commandUpdateBuffer;
		var commandFillBuffer = GetInstanceProcedureAddress(instance, "CommandFillBuffer");
		CommandFillBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void>)commandFillBuffer;
		var commandClearColorImage = GetInstanceProcedureAddress(instance, "CommandClearColorImage");
		CommandClearColorImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange[], void>)commandClearColorImage;
		CommandClearColorImage_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearColorValue, uint, VkImageSubresourceRange[], void>)commandClearColorImage;
		var commandClearDepthStencilImage = GetInstanceProcedureAddress(instance, "CommandClearDepthStencilImage");
		CommandClearDepthStencilImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange[], void>)commandClearDepthStencilImage;
		CommandClearDepthStencilImage_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearDepthStencilValue, uint, VkImageSubresourceRange[], void>)commandClearDepthStencilImage;
		var commandClearAttachments = GetInstanceProcedureAddress(instance, "CommandClearAttachments");
		CommandClearAttachments_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkClearAttachment[], uint, VkClearRect[], void>)commandClearAttachments;
		var commandResolveImage = GetInstanceProcedureAddress(instance, "CommandResolveImage");
		CommandResolveImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve[], void>)commandResolveImage;
		var commandSetEvent = GetInstanceProcedureAddress(instance, "CommandSetEvent");
		CommandSetEvent_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)commandSetEvent;
		var commandResetEvent = GetInstanceProcedureAddress(instance, "CommandResetEvent");
		CommandResetEvent_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)commandResetEvent;
		var commandWaitEvents = GetInstanceProcedureAddress(instance, "CommandWaitEvents");
		CommandWaitEvents_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void>)commandWaitEvents;
		var commandPipelineBarrier = GetInstanceProcedureAddress(instance, "CommandPipelineBarrier");
		CommandPipelineBarrier_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void>)commandPipelineBarrier;
		var commandBeginQuery = GetInstanceProcedureAddress(instance, "CommandBeginQuery");
		CommandBeginQuery_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)commandBeginQuery;
		var commandEndQuery = GetInstanceProcedureAddress(instance, "CommandEndQuery");
		CommandEndQuery_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void>)commandEndQuery;
		var commandResetQueryPool = GetInstanceProcedureAddress(instance, "CommandResetQueryPool");
		CommandResetQueryPool_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void>)commandResetQueryPool;
		var commandWriteTimestamp = GetInstanceProcedureAddress(instance, "CommandWriteTimestamp");
		CommandWriteTimestamp_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)commandWriteTimestamp;
		var commandCopyQueryPoolResults = GetInstanceProcedureAddress(instance, "CommandCopyQueryPoolResults");
		CommandCopyQueryPoolResults_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void>)commandCopyQueryPoolResults;
		var commandPushConstants = GetInstanceProcedureAddress(instance, "CommandPushConstants");
		CommandPushConstants_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)commandPushConstants;
		var commandBeginRenderPass = GetInstanceProcedureAddress(instance, "CommandBeginRenderPass");
		CommandBeginRenderPass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)commandBeginRenderPass;
		CommandBeginRenderPass_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassContents, void>)commandBeginRenderPass;
		var commandNextSubpass = GetInstanceProcedureAddress(instance, "CommandNextSubpass");
		CommandNextSubpass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void>)commandNextSubpass;
		var commandEndRenderPass = GetInstanceProcedureAddress(instance, "CommandEndRenderPass");
		CommandEndRenderPass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndRenderPass;
		var commandExecuteCommands = GetInstanceProcedureAddress(instance, "CommandExecuteCommands");
		CommandExecuteCommands_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkCommandBuffer[], void>)commandExecuteCommands;
		var enumerateInstanceVersion = GetInstanceProcedureAddress(instance, "EnumerateInstanceVersion");
		EnumerateInstanceVersion_0 = (delegate* unmanaged[Cdecl]<uint[], VkResult>)enumerateInstanceVersion;
		var bindBufferMemory2 = GetInstanceProcedureAddress(instance, "BindBufferMemory2");
		BindBufferMemory2_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfo[], VkResult>)bindBufferMemory2;
		var bindImageMemory2 = GetInstanceProcedureAddress(instance, "BindImageMemory2");
		BindImageMemory2_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfo[], VkResult>)bindImageMemory2;
		var getDeviceGroupPeerMemoryFeatures = GetInstanceProcedureAddress(instance, "GetDeviceGroupPeerMemoryFeatures");
		GetDeviceGroupPeerMemoryFeatures_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlags, void>)getDeviceGroupPeerMemoryFeatures;
		var commandSetDeviceMask = GetInstanceProcedureAddress(instance, "CommandSetDeviceMask");
		CommandSetDeviceMask_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetDeviceMask;
		var commandDispatchBase = GetInstanceProcedureAddress(instance, "CommandDispatchBase");
		CommandDispatchBase_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)commandDispatchBase;
		var enumeratePhysicalDeviceGroups = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDeviceGroups");
		EnumeratePhysicalDeviceGroups_0 = (delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupProperties[], VkResult>)enumeratePhysicalDeviceGroups;
		EnumeratePhysicalDeviceGroups_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupProperties[], VkResult>)enumeratePhysicalDeviceGroups;
		var getImageMemoryRequirements2 = GetInstanceProcedureAddress(instance, "GetImageMemoryRequirements2");
		GetImageMemoryRequirements2_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2*, out VkMemoryRequirements2, void>)getImageMemoryRequirements2;
		GetImageMemoryRequirements2_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2, out VkMemoryRequirements2, void>)getImageMemoryRequirements2;
		var getBufferMemoryRequirements2 = GetInstanceProcedureAddress(instance, "GetBufferMemoryRequirements2");
		GetBufferMemoryRequirements2_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2*, out VkMemoryRequirements2, void>)getBufferMemoryRequirements2;
		GetBufferMemoryRequirements2_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2, out VkMemoryRequirements2, void>)getBufferMemoryRequirements2;
		var getImageSparseMemoryRequirements2 = GetInstanceProcedureAddress(instance, "GetImageSparseMemoryRequirements2");
		GetImageSparseMemoryRequirements2_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2;
		GetImageSparseMemoryRequirements2_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, ref uint, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2;
		GetImageSparseMemoryRequirements2_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, uint*, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2;
		GetImageSparseMemoryRequirements2_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, ref uint, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2;
		var getPhysicalDeviceFeatures2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFeatures2");
		GetPhysicalDeviceFeatures2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2, void>)getPhysicalDeviceFeatures2;
		var getPhysicalDeviceProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceProperties2");
		GetPhysicalDeviceProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2, void>)getPhysicalDeviceProperties2;
		var getPhysicalDeviceFormatProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFormatProperties2");
		GetPhysicalDeviceFormatProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2, void>)getPhysicalDeviceFormatProperties2;
		var getPhysicalDeviceImageFormatProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceImageFormatProperties2");
		GetPhysicalDeviceImageFormatProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, out VkImageFormatProperties2, VkResult>)getPhysicalDeviceImageFormatProperties2;
		GetPhysicalDeviceImageFormatProperties2_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2, out VkImageFormatProperties2, VkResult>)getPhysicalDeviceImageFormatProperties2;
		var getPhysicalDeviceQueueFamilyProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyProperties2");
		GetPhysicalDeviceQueueFamilyProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2[], void>)getPhysicalDeviceQueueFamilyProperties2;
		GetPhysicalDeviceQueueFamilyProperties2_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2[], void>)getPhysicalDeviceQueueFamilyProperties2;
		var getPhysicalDeviceMemoryProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMemoryProperties2");
		GetPhysicalDeviceMemoryProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2, void>)getPhysicalDeviceMemoryProperties2;
		var getPhysicalDeviceSparseImageFormatProperties2 = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSparseImageFormatProperties2");
		GetPhysicalDeviceSparseImageFormatProperties2_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2;
		GetPhysicalDeviceSparseImageFormatProperties2_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, ref uint, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2;
		GetPhysicalDeviceSparseImageFormatProperties2_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, uint*, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2;
		GetPhysicalDeviceSparseImageFormatProperties2_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, ref uint, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2;
		var trimCommandPool = GetInstanceProcedureAddress(instance, "TrimCommandPool");
		TrimCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)trimCommandPool;
		var getDeviceQueue2 = GetInstanceProcedureAddress(instance, "GetDeviceQueue2");
		GetDeviceQueue2_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceQueueInfo2*, out VkQueue, void>)getDeviceQueue2;
		GetDeviceQueue2_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceQueueInfo2, out VkQueue, void>)getDeviceQueue2;
		var createSamplerYcbcrConversion = GetInstanceProcedureAddress(instance, "CreateSamplerYcbcrConversion");
		CreateSamplerYcbcrConversion_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, VkResult>)createSamplerYcbcrConversion;
		CreateSamplerYcbcrConversion_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, VkResult>)createSamplerYcbcrConversion;
		CreateSamplerYcbcrConversion_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, VkResult>)createSamplerYcbcrConversion;
		CreateSamplerYcbcrConversion_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, VkResult>)createSamplerYcbcrConversion;
		var destroySamplerYcbcrConversion = GetInstanceProcedureAddress(instance, "DestroySamplerYcbcrConversion");
		DestroySamplerYcbcrConversion_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)destroySamplerYcbcrConversion;
		DestroySamplerYcbcrConversion_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, ref VkAllocationCallbacks, void>)destroySamplerYcbcrConversion;
		var createDescriptorUpdateTemplate = GetInstanceProcedureAddress(instance, "CreateDescriptorUpdateTemplate");
		CreateDescriptorUpdateTemplate_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, VkResult>)createDescriptorUpdateTemplate;
		CreateDescriptorUpdateTemplate_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, VkResult>)createDescriptorUpdateTemplate;
		CreateDescriptorUpdateTemplate_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, VkResult>)createDescriptorUpdateTemplate;
		CreateDescriptorUpdateTemplate_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, VkResult>)createDescriptorUpdateTemplate;
		var destroyDescriptorUpdateTemplate = GetInstanceProcedureAddress(instance, "DestroyDescriptorUpdateTemplate");
		DestroyDescriptorUpdateTemplate_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)destroyDescriptorUpdateTemplate;
		DestroyDescriptorUpdateTemplate_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, ref VkAllocationCallbacks, void>)destroyDescriptorUpdateTemplate;
		var updateDescriptorSetWithTemplate = GetInstanceProcedureAddress(instance, "UpdateDescriptorSetWithTemplate");
		UpdateDescriptorSetWithTemplate_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)updateDescriptorSetWithTemplate;
		var getPhysicalDeviceExternalBufferProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalBufferProperties");
		GetPhysicalDeviceExternalBufferProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, out VkExternalBufferProperties, void>)getPhysicalDeviceExternalBufferProperties;
		GetPhysicalDeviceExternalBufferProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfo, out VkExternalBufferProperties, void>)getPhysicalDeviceExternalBufferProperties;
		var getPhysicalDeviceExternalFenceProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalFenceProperties");
		GetPhysicalDeviceExternalFenceProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, out VkExternalFenceProperties, void>)getPhysicalDeviceExternalFenceProperties;
		GetPhysicalDeviceExternalFenceProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfo, out VkExternalFenceProperties, void>)getPhysicalDeviceExternalFenceProperties;
		var getPhysicalDeviceExternalSemaphoreProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalSemaphoreProperties");
		GetPhysicalDeviceExternalSemaphoreProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, out VkExternalSemaphoreProperties, void>)getPhysicalDeviceExternalSemaphoreProperties;
		GetPhysicalDeviceExternalSemaphoreProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo, out VkExternalSemaphoreProperties, void>)getPhysicalDeviceExternalSemaphoreProperties;
		var getDescriptorSetLayoutSupport = GetInstanceProcedureAddress(instance, "GetDescriptorSetLayoutSupport");
		GetDescriptorSetLayoutSupport_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, out VkDescriptorSetLayoutSupport, void>)getDescriptorSetLayoutSupport;
		GetDescriptorSetLayoutSupport_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, out VkDescriptorSetLayoutSupport, void>)getDescriptorSetLayoutSupport;
		var commandDrawIndirectCount = GetInstanceProcedureAddress(instance, "CommandDrawIndirectCount");
		CommandDrawIndirectCount_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirectCount;
		var commandDrawIndexedIndirectCount = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirectCount");
		CommandDrawIndexedIndirectCount_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirectCount;
		var createRenderPass2 = GetInstanceProcedureAddress(instance, "CreateRenderPass2");
		CreateRenderPass2_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass2;
		CreateRenderPass2_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass2;
		CreateRenderPass2_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass2;
		CreateRenderPass2_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass2;
		var commandBeginRenderPass2 = GetInstanceProcedureAddress(instance, "CommandBeginRenderPass2");
		CommandBeginRenderPass2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)commandBeginRenderPass2;
		CommandBeginRenderPass2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, ref VkSubpassBeginInfo, void>)commandBeginRenderPass2;
		CommandBeginRenderPass2_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassBeginInfo*, void>)commandBeginRenderPass2;
		CommandBeginRenderPass2_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, ref VkSubpassBeginInfo, void>)commandBeginRenderPass2;
		var commandNextSubpass2 = GetInstanceProcedureAddress(instance, "CommandNextSubpass2");
		CommandNextSubpass2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)commandNextSubpass2;
		CommandNextSubpass2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, ref VkSubpassEndInfo, void>)commandNextSubpass2;
		CommandNextSubpass2_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, VkSubpassEndInfo*, void>)commandNextSubpass2;
		CommandNextSubpass2_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, ref VkSubpassEndInfo, void>)commandNextSubpass2;
		var commandEndRenderPass2 = GetInstanceProcedureAddress(instance, "CommandEndRenderPass2");
		CommandEndRenderPass2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassEndInfo*, void>)commandEndRenderPass2;
		CommandEndRenderPass2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassEndInfo, void>)commandEndRenderPass2;
		var resetQueryPool = GetInstanceProcedureAddress(instance, "ResetQueryPool");
		ResetQueryPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void>)resetQueryPool;
		var getSemaphoreCounterValue = GetInstanceProcedureAddress(instance, "GetSemaphoreCounterValue");
		GetSemaphoreCounterValue_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, out ulong, VkResult>)getSemaphoreCounterValue;
		var waitSemaphores = GetInstanceProcedureAddress(instance, "WaitSemaphores");
		WaitSemaphores_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)waitSemaphores;
		WaitSemaphores_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreWaitInfo, ulong, VkResult>)waitSemaphores;
		var signalSemaphore = GetInstanceProcedureAddress(instance, "SignalSemaphore");
		SignalSemaphore_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreSignalInfo*, VkResult>)signalSemaphore;
		SignalSemaphore_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreSignalInfo, VkResult>)signalSemaphore;
		var getBufferDeviceAddress = GetInstanceProcedureAddress(instance, "GetBufferDeviceAddress");
		GetBufferDeviceAddress_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, VkDeviceAddress>)getBufferDeviceAddress;
		var getBufferOpaqueCaptureAddress = GetInstanceProcedureAddress(instance, "GetBufferOpaqueCaptureAddress");
		GetBufferOpaqueCaptureAddress_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, ulong>)getBufferOpaqueCaptureAddress;
		var getDeviceMemoryOpaqueCaptureAddress = GetInstanceProcedureAddress(instance, "GetDeviceMemoryOpaqueCaptureAddress");
		GetDeviceMemoryOpaqueCaptureAddress_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceMemoryOpaqueCaptureAddressInfo, ulong>)getDeviceMemoryOpaqueCaptureAddress;
		var getPhysicalDeviceToolProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceToolProperties");
		GetPhysicalDeviceToolProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties[], VkResult>)getPhysicalDeviceToolProperties;
		GetPhysicalDeviceToolProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceToolProperties[], VkResult>)getPhysicalDeviceToolProperties;
		var createPrivateDataSlot = GetInstanceProcedureAddress(instance, "CreatePrivateDataSlot");
		CreatePrivateDataSlot_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, out VkPrivateDataSlot, VkResult>)createPrivateDataSlot;
		CreatePrivateDataSlot_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, ref VkAllocationCallbacks, out VkPrivateDataSlot, VkResult>)createPrivateDataSlot;
		CreatePrivateDataSlot_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, VkAllocationCallbacks*, out VkPrivateDataSlot, VkResult>)createPrivateDataSlot;
		CreatePrivateDataSlot_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, ref VkAllocationCallbacks, out VkPrivateDataSlot, VkResult>)createPrivateDataSlot;
		var destroyPrivateDataSlot = GetInstanceProcedureAddress(instance, "DestroyPrivateDataSlot");
		DestroyPrivateDataSlot_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)destroyPrivateDataSlot;
		DestroyPrivateDataSlot_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, ref VkAllocationCallbacks, void>)destroyPrivateDataSlot;
		var setPrivateData = GetInstanceProcedureAddress(instance, "SetPrivateData");
		SetPrivateData_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)setPrivateData;
		var getPrivateData = GetInstanceProcedureAddress(instance, "GetPrivateData");
		GetPrivateData_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, out ulong, void>)getPrivateData;
		var commandSetEvent2 = GetInstanceProcedureAddress(instance, "CommandSetEvent2");
		CommandSetEvent2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)commandSetEvent2;
		CommandSetEvent2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ref VkDependencyInfo, void>)commandSetEvent2;
		var commandResetEvent2 = GetInstanceProcedureAddress(instance, "CommandResetEvent2");
		CommandResetEvent2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)commandResetEvent2;
		var commandWaitEvents2 = GetInstanceProcedureAddress(instance, "CommandWaitEvents2");
		CommandWaitEvents2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkDependencyInfo[], void>)commandWaitEvents2;
		var commandPipelineBarrier2 = GetInstanceProcedureAddress(instance, "CommandPipelineBarrier2");
		CommandPipelineBarrier2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDependencyInfo*, void>)commandPipelineBarrier2;
		CommandPipelineBarrier2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDependencyInfo, void>)commandPipelineBarrier2;
		var commandWriteTimestamp2 = GetInstanceProcedureAddress(instance, "CommandWriteTimestamp2");
		CommandWriteTimestamp2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)commandWriteTimestamp2;
		var queueSubmit2 = GetInstanceProcedureAddress(instance, "QueueSubmit2");
		QueueSubmit2_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo2[], VkFence, VkResult>)queueSubmit2;
		var commandCopyBuffer2 = GetInstanceProcedureAddress(instance, "CommandCopyBuffer2");
		CommandCopyBuffer2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferInfo2*, void>)commandCopyBuffer2;
		CommandCopyBuffer2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferInfo2, void>)commandCopyBuffer2;
		var commandCopyImage2 = GetInstanceProcedureAddress(instance, "CommandCopyImage2");
		CommandCopyImage2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageInfo2*, void>)commandCopyImage2;
		CommandCopyImage2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageInfo2, void>)commandCopyImage2;
		var commandCopyBufferToImage2 = GetInstanceProcedureAddress(instance, "CommandCopyBufferToImage2");
		CommandCopyBufferToImage2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)commandCopyBufferToImage2;
		CommandCopyBufferToImage2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferToImageInfo2, void>)commandCopyBufferToImage2;
		var commandCopyImageToBuffer2 = GetInstanceProcedureAddress(instance, "CommandCopyImageToBuffer2");
		CommandCopyImageToBuffer2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)commandCopyImageToBuffer2;
		CommandCopyImageToBuffer2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageToBufferInfo2, void>)commandCopyImageToBuffer2;
		var commandBlitImage2 = GetInstanceProcedureAddress(instance, "CommandBlitImage2");
		CommandBlitImage2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBlitImageInfo2*, void>)commandBlitImage2;
		CommandBlitImage2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkBlitImageInfo2, void>)commandBlitImage2;
		var commandResolveImage2 = GetInstanceProcedureAddress(instance, "CommandResolveImage2");
		CommandResolveImage2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResolveImageInfo2*, void>)commandResolveImage2;
		CommandResolveImage2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkResolveImageInfo2, void>)commandResolveImage2;
		var commandBeginRendering = GetInstanceProcedureAddress(instance, "CommandBeginRendering");
		CommandBeginRendering_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInfo*, void>)commandBeginRendering;
		CommandBeginRendering_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderingInfo, void>)commandBeginRendering;
		var commandEndRendering = GetInstanceProcedureAddress(instance, "CommandEndRendering");
		CommandEndRendering_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndRendering;
		var commandSetCullMode = GetInstanceProcedureAddress(instance, "CommandSetCullMode");
		CommandSetCullMode_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void>)commandSetCullMode;
		var commandSetFrontFace = GetInstanceProcedureAddress(instance, "CommandSetFrontFace");
		CommandSetFrontFace_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void>)commandSetFrontFace;
		var commandSetPrimitiveTopology = GetInstanceProcedureAddress(instance, "CommandSetPrimitiveTopology");
		CommandSetPrimitiveTopology_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void>)commandSetPrimitiveTopology;
		var commandSetViewportWithCount = GetInstanceProcedureAddress(instance, "CommandSetViewportWithCount");
		CommandSetViewportWithCount_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkViewport[], void>)commandSetViewportWithCount;
		var commandSetScissorWithCount = GetInstanceProcedureAddress(instance, "CommandSetScissorWithCount");
		CommandSetScissorWithCount_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkRect2D[], void>)commandSetScissorWithCount;
		var commandBindVertexBuffers2 = GetInstanceProcedureAddress(instance, "CommandBindVertexBuffers2");
		CommandBindVertexBuffers2_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_8 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_9 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_10 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_11 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_12 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_13 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_14 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2;
		CommandBindVertexBuffers2_15 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2;
		var commandSetDepthTestEnable = GetInstanceProcedureAddress(instance, "CommandSetDepthTestEnable");
		CommandSetDepthTestEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthTestEnable;
		var commandSetDepthWriteEnable = GetInstanceProcedureAddress(instance, "CommandSetDepthWriteEnable");
		CommandSetDepthWriteEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthWriteEnable;
		var commandSetDepthCompareOp = GetInstanceProcedureAddress(instance, "CommandSetDepthCompareOp");
		CommandSetDepthCompareOp_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void>)commandSetDepthCompareOp;
		var commandSetDepthBoundsTestEnable = GetInstanceProcedureAddress(instance, "CommandSetDepthBoundsTestEnable");
		CommandSetDepthBoundsTestEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthBoundsTestEnable;
		var commandSetStencilTestEnable = GetInstanceProcedureAddress(instance, "CommandSetStencilTestEnable");
		CommandSetStencilTestEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetStencilTestEnable;
		var commandSetStencilOp = GetInstanceProcedureAddress(instance, "CommandSetStencilOp");
		CommandSetStencilOp_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)commandSetStencilOp;
		var commandSetRasterizerDiscardEnable = GetInstanceProcedureAddress(instance, "CommandSetRasterizerDiscardEnable");
		CommandSetRasterizerDiscardEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetRasterizerDiscardEnable;
		var commandSetDepthBiasEnable = GetInstanceProcedureAddress(instance, "CommandSetDepthBiasEnable");
		CommandSetDepthBiasEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthBiasEnable;
		var commandSetPrimitiveRestartEnable = GetInstanceProcedureAddress(instance, "CommandSetPrimitiveRestartEnable");
		CommandSetPrimitiveRestartEnable_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetPrimitiveRestartEnable;
		var getDeviceBufferMemoryRequirements = GetInstanceProcedureAddress(instance, "GetDeviceBufferMemoryRequirements");
		GetDeviceBufferMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceBufferMemoryRequirements*, out VkMemoryRequirements2, void>)getDeviceBufferMemoryRequirements;
		GetDeviceBufferMemoryRequirements_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceBufferMemoryRequirements, out VkMemoryRequirements2, void>)getDeviceBufferMemoryRequirements;
		var getDeviceImageMemoryRequirements = GetInstanceProcedureAddress(instance, "GetDeviceImageMemoryRequirements");
		GetDeviceImageMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, out VkMemoryRequirements2, void>)getDeviceImageMemoryRequirements;
		GetDeviceImageMemoryRequirements_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, out VkMemoryRequirements2, void>)getDeviceImageMemoryRequirements;
		var getDeviceImageSparseMemoryRequirements = GetInstanceProcedureAddress(instance, "GetDeviceImageSparseMemoryRequirements");
		GetDeviceImageSparseMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirements;
		GetDeviceImageSparseMemoryRequirements_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, ref uint, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirements;
		GetDeviceImageSparseMemoryRequirements_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, uint*, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirements;
		GetDeviceImageSparseMemoryRequirements_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, ref uint, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirements;
		var destroySurfaceKHR = GetInstanceProcedureAddress(instance, "DestroySurfaceKHR");
		DestroySurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)destroySurfaceKHR;
		DestroySurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, ref VkAllocationCallbacks, void>)destroySurfaceKHR;
		var getPhysicalDeviceSurfaceSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceSupportKHR");
		GetPhysicalDeviceSurfaceSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkSurfaceKHR, out VkBool32, VkResult>)getPhysicalDeviceSurfaceSupportKHR;
		var getPhysicalDeviceSurfaceCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilitiesKHR");
		GetPhysicalDeviceSurfaceCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilitiesKHR, VkResult>)getPhysicalDeviceSurfaceCapabilitiesKHR;
		var getPhysicalDeviceSurfaceFormatsKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceFormatsKHR");
		GetPhysicalDeviceSurfaceFormatsKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR[], VkResult>)getPhysicalDeviceSurfaceFormatsKHR;
		GetPhysicalDeviceSurfaceFormatsKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkSurfaceFormatKHR[], VkResult>)getPhysicalDeviceSurfaceFormatsKHR;
		var getPhysicalDeviceSurfacePresentModesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfacePresentModesKHR");
		GetPhysicalDeviceSurfacePresentModesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModesKHR;
		GetPhysicalDeviceSurfacePresentModesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModesKHR;
		var createSwapchainKHR = GetInstanceProcedureAddress(instance, "CreateSwapchainKHR");
		CreateSwapchainKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		var destroySwapchainKHR = GetInstanceProcedureAddress(instance, "DestroySwapchainKHR");
		DestroySwapchainKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)destroySwapchainKHR;
		DestroySwapchainKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref VkAllocationCallbacks, void>)destroySwapchainKHR;
		var getSwapchainImagesKHR = GetInstanceProcedureAddress(instance, "GetSwapchainImagesKHR");
		GetSwapchainImagesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkImage[], VkResult>)getSwapchainImagesKHR;
		GetSwapchainImagesKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkImage[], VkResult>)getSwapchainImagesKHR;
		var acquireNextImageKHR = GetInstanceProcedureAddress(instance, "AcquireNextImageKHR");
		AcquireNextImageKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, out uint, VkResult>)acquireNextImageKHR;
		var queuePresentKHR = GetInstanceProcedureAddress(instance, "QueuePresentKHR");
		QueuePresentKHR_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkPresentInfoKHR*, VkResult>)queuePresentKHR;
		QueuePresentKHR_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref VkPresentInfoKHR, VkResult>)queuePresentKHR;
		var getDeviceGroupPresentCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetDeviceGroupPresentCapabilitiesKHR");
		GetDeviceGroupPresentCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceGroupPresentCapabilitiesKHR, VkResult>)getDeviceGroupPresentCapabilitiesKHR;
		var getDeviceGroupSurfacePresentModesKHR = GetInstanceProcedureAddress(instance, "GetDeviceGroupSurfacePresentModesKHR");
		GetDeviceGroupSurfacePresentModesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSurfaceKHR, out VkDeviceGroupPresentModeFlagsKHR, VkResult>)getDeviceGroupSurfacePresentModesKHR;
		var getPhysicalDevicePresentRectanglesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDevicePresentRectanglesKHR");
		GetPhysicalDevicePresentRectanglesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D[], VkResult>)getPhysicalDevicePresentRectanglesKHR;
		GetPhysicalDevicePresentRectanglesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkRect2D[], VkResult>)getPhysicalDevicePresentRectanglesKHR;
		var acquireNextImage2KHR = GetInstanceProcedureAddress(instance, "AcquireNextImage2KHR");
		AcquireNextImage2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAcquireNextImageInfoKHR*, out uint, VkResult>)acquireNextImage2KHR;
		AcquireNextImage2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireNextImageInfoKHR, out uint, VkResult>)acquireNextImage2KHR;
		var getPhysicalDeviceDisplayPropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayPropertiesKHR");
		GetPhysicalDeviceDisplayPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPropertiesKHR;
		GetPhysicalDeviceDisplayPropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPropertiesKHR;
		var getPhysicalDeviceDisplayPlanePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayPlanePropertiesKHR");
		GetPhysicalDeviceDisplayPlanePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPlanePropertiesKHR;
		GetPhysicalDeviceDisplayPlanePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlanePropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPlanePropertiesKHR;
		var getDisplayPlaneSupportedDisplaysKHR = GetInstanceProcedureAddress(instance, "GetDisplayPlaneSupportedDisplaysKHR");
		GetDisplayPlaneSupportedDisplaysKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkDisplayKHR[], VkResult>)getDisplayPlaneSupportedDisplaysKHR;
		GetDisplayPlaneSupportedDisplaysKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkDisplayKHR[], VkResult>)getDisplayPlaneSupportedDisplaysKHR;
		var getDisplayModePropertiesKHR = GetInstanceProcedureAddress(instance, "GetDisplayModePropertiesKHR");
		GetDisplayModePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR[], VkResult>)getDisplayModePropertiesKHR;
		GetDisplayModePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModePropertiesKHR[], VkResult>)getDisplayModePropertiesKHR;
		var createDisplayModeKHR = GetInstanceProcedureAddress(instance, "CreateDisplayModeKHR");
		CreateDisplayModeKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		var getDisplayPlaneCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetDisplayPlaneCapabilitiesKHR");
		GetDisplayPlaneCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayModeKHR, uint, out VkDisplayPlaneCapabilitiesKHR, VkResult>)getDisplayPlaneCapabilitiesKHR;
		var createDisplayPlaneSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateDisplayPlaneSurfaceKHR");
		CreateDisplayPlaneSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		var createSharedSwapchainsKHR = GetInstanceProcedureAddress(instance, "CreateSharedSwapchainsKHR");
		CreateSharedSwapchainsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSharedSwapchainsKHR;
		CreateSharedSwapchainsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSharedSwapchainsKHR;
		var createXlibSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateXlibSurfaceKHR");
		CreateXlibSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		var getPhysicalDeviceXlibPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceXlibPresentationSupportKHR");
		GetPhysicalDeviceXlibPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32>)getPhysicalDeviceXlibPresentationSupportKHR;
		var createXcbSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateXcbSurfaceKHR");
		CreateXcbSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		var getPhysicalDeviceXcbPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceXcbPresentationSupportKHR");
		GetPhysicalDeviceXcbPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32>)getPhysicalDeviceXcbPresentationSupportKHR;
		var createWaylandSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateWaylandSurfaceKHR");
		CreateWaylandSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		var getPhysicalDeviceWaylandPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceWaylandPresentationSupportKHR");
		GetPhysicalDeviceWaylandPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, VkBool32>)getPhysicalDeviceWaylandPresentationSupportKHR;
		var createAndroidSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateAndroidSurfaceKHR");
		CreateAndroidSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		var createWin32SurfaceKHR = GetInstanceProcedureAddress(instance, "CreateWin32SurfaceKHR");
		CreateWin32SurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		var getPhysicalDeviceWin32PresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceWin32PresentationSupportKHR");
		GetPhysicalDeviceWin32PresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkBool32>)getPhysicalDeviceWin32PresentationSupportKHR;
		var createDebugReportCallbackEXT = GetInstanceProcedureAddress(instance, "CreateDebugReportCallbackEXT");
		CreateDebugReportCallbackEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		var destroyDebugReportCallbackEXT = GetInstanceProcedureAddress(instance, "DestroyDebugReportCallbackEXT");
		DestroyDebugReportCallbackEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void>)destroyDebugReportCallbackEXT;
		DestroyDebugReportCallbackEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, ref VkAllocationCallbacks, void>)destroyDebugReportCallbackEXT;
		var debugReportMessageEXT = GetInstanceProcedureAddress(instance, "DebugReportMessageEXT");
		DebugReportMessageEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, string, string, void>)debugReportMessageEXT;
		var debugMarkerSetObjectTagEXT = GetInstanceProcedureAddress(instance, "DebugMarkerSetObjectTagEXT");
		DebugMarkerSetObjectTagEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult>)debugMarkerSetObjectTagEXT;
		DebugMarkerSetObjectTagEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectTagInfoEXT, VkResult>)debugMarkerSetObjectTagEXT;
		var debugMarkerSetObjectNameEXT = GetInstanceProcedureAddress(instance, "DebugMarkerSetObjectNameEXT");
		DebugMarkerSetObjectNameEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult>)debugMarkerSetObjectNameEXT;
		DebugMarkerSetObjectNameEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectNameInfoEXT, VkResult>)debugMarkerSetObjectNameEXT;
		var commandDebugMarkerBeginEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerBeginEXT");
		CommandDebugMarkerBeginEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)commandDebugMarkerBeginEXT;
		CommandDebugMarkerBeginEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void>)commandDebugMarkerBeginEXT;
		var commandDebugMarkerEndEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerEndEXT");
		CommandDebugMarkerEndEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandDebugMarkerEndEXT;
		var commandDebugMarkerInsertEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerInsertEXT");
		CommandDebugMarkerInsertEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)commandDebugMarkerInsertEXT;
		CommandDebugMarkerInsertEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void>)commandDebugMarkerInsertEXT;
		var getPhysicalDeviceVideoCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceVideoCapabilitiesKHR");
		GetPhysicalDeviceVideoCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkVideoProfileInfoKHR*, out VkVideoCapabilitiesKHR, VkResult>)getPhysicalDeviceVideoCapabilitiesKHR;
		GetPhysicalDeviceVideoCapabilitiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkVideoProfileInfoKHR, out VkVideoCapabilitiesKHR, VkResult>)getPhysicalDeviceVideoCapabilitiesKHR;
		var getPhysicalDeviceVideoFormatPropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceVideoFormatPropertiesKHR");
		GetPhysicalDeviceVideoFormatPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, uint*, VkVideoFormatPropertiesKHR[], VkResult>)getPhysicalDeviceVideoFormatPropertiesKHR;
		GetPhysicalDeviceVideoFormatPropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, ref uint, VkVideoFormatPropertiesKHR[], VkResult>)getPhysicalDeviceVideoFormatPropertiesKHR;
		GetPhysicalDeviceVideoFormatPropertiesKHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR, uint*, VkVideoFormatPropertiesKHR[], VkResult>)getPhysicalDeviceVideoFormatPropertiesKHR;
		GetPhysicalDeviceVideoFormatPropertiesKHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceVideoFormatInfoKHR, ref uint, VkVideoFormatPropertiesKHR[], VkResult>)getPhysicalDeviceVideoFormatPropertiesKHR;
		var createVideoSessionKHR = GetInstanceProcedureAddress(instance, "CreateVideoSessionKHR");
		CreateVideoSessionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, out VkVideoSessionKHR, VkResult>)createVideoSessionKHR;
		CreateVideoSessionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionCreateInfoKHR*, ref VkAllocationCallbacks, out VkVideoSessionKHR, VkResult>)createVideoSessionKHR;
		CreateVideoSessionKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionCreateInfoKHR, VkAllocationCallbacks*, out VkVideoSessionKHR, VkResult>)createVideoSessionKHR;
		CreateVideoSessionKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionCreateInfoKHR, ref VkAllocationCallbacks, out VkVideoSessionKHR, VkResult>)createVideoSessionKHR;
		var destroyVideoSessionKHR = GetInstanceProcedureAddress(instance, "DestroyVideoSessionKHR");
		DestroyVideoSessionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, VkAllocationCallbacks*, void>)destroyVideoSessionKHR;
		DestroyVideoSessionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, ref VkAllocationCallbacks, void>)destroyVideoSessionKHR;
		var getVideoSessionMemoryRequirementsKHR = GetInstanceProcedureAddress(instance, "GetVideoSessionMemoryRequirementsKHR");
		GetVideoSessionMemoryRequirementsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, uint*, VkVideoSessionMemoryRequirementsKHR[], VkResult>)getVideoSessionMemoryRequirementsKHR;
		GetVideoSessionMemoryRequirementsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, ref uint, VkVideoSessionMemoryRequirementsKHR[], VkResult>)getVideoSessionMemoryRequirementsKHR;
		var bindVideoSessionMemoryKHR = GetInstanceProcedureAddress(instance, "BindVideoSessionMemoryKHR");
		BindVideoSessionMemoryKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionKHR, uint, VkBindVideoSessionMemoryInfoKHR[], VkResult>)bindVideoSessionMemoryKHR;
		var createVideoSessionParametersKHR = GetInstanceProcedureAddress(instance, "CreateVideoSessionParametersKHR");
		CreateVideoSessionParametersKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, out VkVideoSessionParametersKHR, VkResult>)createVideoSessionParametersKHR;
		CreateVideoSessionParametersKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersCreateInfoKHR*, ref VkAllocationCallbacks, out VkVideoSessionParametersKHR, VkResult>)createVideoSessionParametersKHR;
		CreateVideoSessionParametersKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionParametersCreateInfoKHR, VkAllocationCallbacks*, out VkVideoSessionParametersKHR, VkResult>)createVideoSessionParametersKHR;
		CreateVideoSessionParametersKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkVideoSessionParametersCreateInfoKHR, ref VkAllocationCallbacks, out VkVideoSessionParametersKHR, VkResult>)createVideoSessionParametersKHR;
		var updateVideoSessionParametersKHR = GetInstanceProcedureAddress(instance, "UpdateVideoSessionParametersKHR");
		UpdateVideoSessionParametersKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, VkVideoSessionParametersUpdateInfoKHR*, VkResult>)updateVideoSessionParametersKHR;
		UpdateVideoSessionParametersKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, ref VkVideoSessionParametersUpdateInfoKHR, VkResult>)updateVideoSessionParametersKHR;
		var destroyVideoSessionParametersKHR = GetInstanceProcedureAddress(instance, "DestroyVideoSessionParametersKHR");
		DestroyVideoSessionParametersKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, VkAllocationCallbacks*, void>)destroyVideoSessionParametersKHR;
		DestroyVideoSessionParametersKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkVideoSessionParametersKHR, ref VkAllocationCallbacks, void>)destroyVideoSessionParametersKHR;
		var commandBeginVideoCodingKHR = GetInstanceProcedureAddress(instance, "CommandBeginVideoCodingKHR");
		CommandBeginVideoCodingKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoBeginCodingInfoKHR*, void>)commandBeginVideoCodingKHR;
		CommandBeginVideoCodingKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoBeginCodingInfoKHR, void>)commandBeginVideoCodingKHR;
		var commandEndVideoCodingKHR = GetInstanceProcedureAddress(instance, "CommandEndVideoCodingKHR");
		CommandEndVideoCodingKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoEndCodingInfoKHR*, void>)commandEndVideoCodingKHR;
		CommandEndVideoCodingKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoEndCodingInfoKHR, void>)commandEndVideoCodingKHR;
		var commandControlVideoCodingKHR = GetInstanceProcedureAddress(instance, "CommandControlVideoCodingKHR");
		CommandControlVideoCodingKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoCodingControlInfoKHR*, void>)commandControlVideoCodingKHR;
		CommandControlVideoCodingKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoCodingControlInfoKHR, void>)commandControlVideoCodingKHR;
		var commandDecodeVideoKHR = GetInstanceProcedureAddress(instance, "CommandDecodeVideoKHR");
		CommandDecodeVideoKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkVideoDecodeInfoKHR*, void>)commandDecodeVideoKHR;
		CommandDecodeVideoKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkVideoDecodeInfoKHR, void>)commandDecodeVideoKHR;
		var commandBindTransformFeedbackBuffersEXT = GetInstanceProcedureAddress(instance, "CommandBindTransformFeedbackBuffersEXT");
		CommandBindTransformFeedbackBuffersEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, void>)commandBindTransformFeedbackBuffersEXT;
		CommandBindTransformFeedbackBuffersEXT_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindTransformFeedbackBuffersEXT;
		var commandBeginTransformFeedbackEXT = GetInstanceProcedureAddress(instance, "CommandBeginTransformFeedbackEXT");
		CommandBeginTransformFeedbackEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], VkDeviceSize*, void>)commandBeginTransformFeedbackEXT;
		CommandBeginTransformFeedbackEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], ref VkDeviceSize, void>)commandBeginTransformFeedbackEXT;
		var commandEndTransformFeedbackEXT = GetInstanceProcedureAddress(instance, "CommandEndTransformFeedbackEXT");
		CommandEndTransformFeedbackEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], VkDeviceSize*, void>)commandEndTransformFeedbackEXT;
		CommandEndTransformFeedbackEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer[], ref VkDeviceSize, void>)commandEndTransformFeedbackEXT;
		var commandBeginQueryIndexedEXT = GetInstanceProcedureAddress(instance, "CommandBeginQueryIndexedEXT");
		CommandBeginQueryIndexedEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void>)commandBeginQueryIndexedEXT;
		var commandEndQueryIndexedEXT = GetInstanceProcedureAddress(instance, "CommandEndQueryIndexedEXT");
		CommandEndQueryIndexedEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void>)commandEndQueryIndexedEXT;
		var commandDrawIndirectByteCountEXT = GetInstanceProcedureAddress(instance, "CommandDrawIndirectByteCountEXT");
		CommandDrawIndirectByteCountEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirectByteCountEXT;
		var createCuModuleNVX = GetInstanceProcedureAddress(instance, "CreateCuModuleNVX");
		CreateCuModuleNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, out VkCuModuleNVX, VkResult>)createCuModuleNVX;
		CreateCuModuleNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleCreateInfoNVX*, ref VkAllocationCallbacks, out VkCuModuleNVX, VkResult>)createCuModuleNVX;
		CreateCuModuleNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCuModuleCreateInfoNVX, VkAllocationCallbacks*, out VkCuModuleNVX, VkResult>)createCuModuleNVX;
		CreateCuModuleNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCuModuleCreateInfoNVX, ref VkAllocationCallbacks, out VkCuModuleNVX, VkResult>)createCuModuleNVX;
		var createCuFunctionNVX = GetInstanceProcedureAddress(instance, "CreateCuFunctionNVX");
		CreateCuFunctionNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, out VkCuFunctionNVX, VkResult>)createCuFunctionNVX;
		CreateCuFunctionNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionCreateInfoNVX*, ref VkAllocationCallbacks, out VkCuFunctionNVX, VkResult>)createCuFunctionNVX;
		CreateCuFunctionNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCuFunctionCreateInfoNVX, VkAllocationCallbacks*, out VkCuFunctionNVX, VkResult>)createCuFunctionNVX;
		CreateCuFunctionNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCuFunctionCreateInfoNVX, ref VkAllocationCallbacks, out VkCuFunctionNVX, VkResult>)createCuFunctionNVX;
		var destroyCuModuleNVX = GetInstanceProcedureAddress(instance, "DestroyCuModuleNVX");
		DestroyCuModuleNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void>)destroyCuModuleNVX;
		DestroyCuModuleNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuModuleNVX, ref VkAllocationCallbacks, void>)destroyCuModuleNVX;
		var destroyCuFunctionNVX = GetInstanceProcedureAddress(instance, "DestroyCuFunctionNVX");
		DestroyCuFunctionNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void>)destroyCuFunctionNVX;
		DestroyCuFunctionNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCuFunctionNVX, ref VkAllocationCallbacks, void>)destroyCuFunctionNVX;
		var commandCuLaunchKernelNVX = GetInstanceProcedureAddress(instance, "CommandCuLaunchKernelNVX");
		CommandCuLaunchKernelNVX_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCuLaunchInfoNVX*, void>)commandCuLaunchKernelNVX;
		CommandCuLaunchKernelNVX_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCuLaunchInfoNVX, void>)commandCuLaunchKernelNVX;
		var getImageViewHandleNVX = GetInstanceProcedureAddress(instance, "GetImageViewHandleNVX");
		GetImageViewHandleNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkImageViewHandleInfoNVX, uint>)getImageViewHandleNVX;
		var getImageViewAddressNVX = GetInstanceProcedureAddress(instance, "GetImageViewAddressNVX");
		GetImageViewAddressNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageView, out VkImageViewAddressPropertiesNVX, VkResult>)getImageViewAddressNVX;
		var commandDrawIndirectCountAMD = GetInstanceProcedureAddress(instance, "CommandDrawIndirectCount");
		CommandDrawIndirectCountAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirectCountAMD;
		var commandDrawIndexedIndirectCountAMD = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirectCount");
		CommandDrawIndexedIndirectCountAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirectCountAMD;
		var getShaderInfoAMD = GetInstanceProcedureAddress(instance, "GetShaderInfoAMD");
		GetShaderInfoAMD_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, nuint*, void*, VkResult>)getShaderInfoAMD;
		GetShaderInfoAMD_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, ref nuint, void*, VkResult>)getShaderInfoAMD;
		var commandBeginRenderingKHR = GetInstanceProcedureAddress(instance, "CommandBeginRendering");
		CommandBeginRenderingKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInfo*, void>)commandBeginRenderingKHR;
		CommandBeginRenderingKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderingInfo, void>)commandBeginRenderingKHR;
		var commandEndRenderingKHR = GetInstanceProcedureAddress(instance, "CommandEndRendering");
		CommandEndRenderingKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndRenderingKHR;
		var getPhysicalDeviceExternalImageFormatPropertiesNV = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalImageFormatPropertiesNV");
		GetPhysicalDeviceExternalImageFormatPropertiesNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, out VkExternalImageFormatPropertiesNV, VkResult>)getPhysicalDeviceExternalImageFormatPropertiesNV;
		var getMemoryWin32HandleNV = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandleNV");
		GetMemoryWin32HandleNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, out IntPtr, VkResult>)getMemoryWin32HandleNV;
		var getPhysicalDeviceFeatures2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFeatures2");
		GetPhysicalDeviceFeatures2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2, void>)getPhysicalDeviceFeatures2KHR;
		var getPhysicalDeviceProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceProperties2");
		GetPhysicalDeviceProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2, void>)getPhysicalDeviceProperties2KHR;
		var getPhysicalDeviceFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFormatProperties2");
		GetPhysicalDeviceFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2, void>)getPhysicalDeviceFormatProperties2KHR;
		var getPhysicalDeviceImageFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceImageFormatProperties2");
		GetPhysicalDeviceImageFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, out VkImageFormatProperties2, void>)getPhysicalDeviceImageFormatProperties2KHR;
		GetPhysicalDeviceImageFormatProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2, out VkImageFormatProperties2, void>)getPhysicalDeviceImageFormatProperties2KHR;
		var getPhysicalDeviceQueueFamilyProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyProperties2");
		GetPhysicalDeviceQueueFamilyProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2[], void>)getPhysicalDeviceQueueFamilyProperties2KHR;
		GetPhysicalDeviceQueueFamilyProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2[], void>)getPhysicalDeviceQueueFamilyProperties2KHR;
		var getPhysicalDeviceMemoryProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMemoryProperties2");
		GetPhysicalDeviceMemoryProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2, void>)getPhysicalDeviceMemoryProperties2KHR;
		var getPhysicalDeviceSparseImageFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSparseImageFormatProperties2");
		GetPhysicalDeviceSparseImageFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, ref uint, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, uint*, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2, ref uint, VkSparseImageFormatProperties2[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		var getDeviceGroupPeerMemoryFeaturesKHR = GetInstanceProcedureAddress(instance, "GetDeviceGroupPeerMemoryFeatures");
		GetDeviceGroupPeerMemoryFeaturesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlags, void>)getDeviceGroupPeerMemoryFeaturesKHR;
		var commandSetDeviceMaskKHR = GetInstanceProcedureAddress(instance, "CommandSetDeviceMask");
		CommandSetDeviceMaskKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetDeviceMaskKHR;
		var commandDispatchBaseKHR = GetInstanceProcedureAddress(instance, "CommandDispatchBase");
		CommandDispatchBaseKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)commandDispatchBaseKHR;
		var trimCommandPoolKHR = GetInstanceProcedureAddress(instance, "TrimCommandPool");
		TrimCommandPoolKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)trimCommandPoolKHR;
		var enumeratePhysicalDeviceGroupsKHR = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDeviceGroups");
		EnumeratePhysicalDeviceGroupsKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupProperties[], void>)enumeratePhysicalDeviceGroupsKHR;
		EnumeratePhysicalDeviceGroupsKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupProperties[], void>)enumeratePhysicalDeviceGroupsKHR;
		var getPhysicalDeviceExternalBufferPropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalBufferProperties");
		GetPhysicalDeviceExternalBufferPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, out VkExternalBufferProperties, void>)getPhysicalDeviceExternalBufferPropertiesKHR;
		GetPhysicalDeviceExternalBufferPropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfo, out VkExternalBufferProperties, void>)getPhysicalDeviceExternalBufferPropertiesKHR;
		var getMemoryWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandleKHR");
		GetMemoryWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getMemoryWin32HandleKHR;
		GetMemoryWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetWin32HandleInfoKHR, out IntPtr, VkResult>)getMemoryWin32HandleKHR;
		var getMemoryWin32HandlePropertiesKHR = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandlePropertiesKHR");
		GetMemoryWin32HandlePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, IntPtr, out VkMemoryWin32HandlePropertiesKHR, VkResult>)getMemoryWin32HandlePropertiesKHR;
		var getMemoryFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetMemoryFileDescriptorKHR");
		GetMemoryFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetFdInfoKHR*, out int, VkResult>)getMemoryFileDescriptorKHR;
		GetMemoryFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetFdInfoKHR, out int, VkResult>)getMemoryFileDescriptorKHR;
		var getMemoryFileDescriptorPropertiesKHR = GetInstanceProcedureAddress(instance, "GetMemoryFileDescriptorPropertiesKHR");
		GetMemoryFileDescriptorPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, int, out VkMemoryFdPropertiesKHR, VkResult>)getMemoryFileDescriptorPropertiesKHR;
		var getPhysicalDeviceExternalSemaphorePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalSemaphoreProperties");
		GetPhysicalDeviceExternalSemaphorePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, out VkExternalSemaphoreProperties, void>)getPhysicalDeviceExternalSemaphorePropertiesKHR;
		GetPhysicalDeviceExternalSemaphorePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo, out VkExternalSemaphoreProperties, void>)getPhysicalDeviceExternalSemaphorePropertiesKHR;
		var importSemaphoreWin32HandleKHR = GetInstanceProcedureAddress(instance, "ImportSemaphoreWin32HandleKHR");
		ImportSemaphoreWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult>)importSemaphoreWin32HandleKHR;
		ImportSemaphoreWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreWin32HandleInfoKHR, VkResult>)importSemaphoreWin32HandleKHR;
		var getSemaphoreWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetSemaphoreWin32HandleKHR");
		GetSemaphoreWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getSemaphoreWin32HandleKHR;
		GetSemaphoreWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetWin32HandleInfoKHR, out IntPtr, VkResult>)getSemaphoreWin32HandleKHR;
		var importSemaphoreFileDescriptorKHR = GetInstanceProcedureAddress(instance, "ImportSemaphoreFileDescriptorKHR");
		ImportSemaphoreFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult>)importSemaphoreFileDescriptorKHR;
		ImportSemaphoreFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreFdInfoKHR, VkResult>)importSemaphoreFileDescriptorKHR;
		var getSemaphoreFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetSemaphoreFileDescriptorKHR");
		GetSemaphoreFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetFdInfoKHR*, out int, VkResult>)getSemaphoreFileDescriptorKHR;
		GetSemaphoreFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetFdInfoKHR, out int, VkResult>)getSemaphoreFileDescriptorKHR;
		var commandPushDescriptorSetKHR = GetInstanceProcedureAddress(instance, "CommandPushDescriptorSetKHR");
		CommandPushDescriptorSetKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet[], void>)commandPushDescriptorSetKHR;
		var commandPushDescriptorSetWithTemplateKHR = GetInstanceProcedureAddress(instance, "CommandPushDescriptorSetWithTemplateKHR");
		CommandPushDescriptorSetWithTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)commandPushDescriptorSetWithTemplateKHR;
		var commandBeginConditionalRenderingEXT = GetInstanceProcedureAddress(instance, "CommandBeginConditionalRenderingEXT");
		CommandBeginConditionalRenderingEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void>)commandBeginConditionalRenderingEXT;
		CommandBeginConditionalRenderingEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkConditionalRenderingBeginInfoEXT, void>)commandBeginConditionalRenderingEXT;
		var commandEndConditionalRenderingEXT = GetInstanceProcedureAddress(instance, "CommandEndConditionalRenderingEXT");
		CommandEndConditionalRenderingEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndConditionalRenderingEXT;
		var createDescriptorUpdateTemplateKHR = GetInstanceProcedureAddress(instance, "CreateDescriptorUpdateTemplate");
		CreateDescriptorUpdateTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, void>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, void>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, VkAllocationCallbacks*, out VkDescriptorUpdateTemplate, void>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfo, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplate, void>)createDescriptorUpdateTemplateKHR;
		var destroyDescriptorUpdateTemplateKHR = GetInstanceProcedureAddress(instance, "DestroyDescriptorUpdateTemplate");
		DestroyDescriptorUpdateTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)destroyDescriptorUpdateTemplateKHR;
		DestroyDescriptorUpdateTemplateKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, ref VkAllocationCallbacks, void>)destroyDescriptorUpdateTemplateKHR;
		var updateDescriptorSetWithTemplateKHR = GetInstanceProcedureAddress(instance, "UpdateDescriptorSetWithTemplate");
		UpdateDescriptorSetWithTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)updateDescriptorSetWithTemplateKHR;
		var commandSetViewportWScalingNV = GetInstanceProcedureAddress(instance, "CommandSetViewportWScalingNV");
		CommandSetViewportWScalingNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void>)commandSetViewportWScalingNV;
		CommandSetViewportWScalingNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportWScalingNV, void>)commandSetViewportWScalingNV;
		var releaseDisplayEXT = GetInstanceProcedureAddress(instance, "ReleaseDisplayEXT");
		ReleaseDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult>)releaseDisplayEXT;
		var getPhysicalDeviceSurfaceCapabilities2EXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilities2EXT");
		GetPhysicalDeviceSurfaceCapabilities2EXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilities2EXT, VkResult>)getPhysicalDeviceSurfaceCapabilities2EXT;
		var displayPowerControlEXT = GetInstanceProcedureAddress(instance, "DisplayPowerControlEXT");
		DisplayPowerControlEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult>)displayPowerControlEXT;
		DisplayPowerControlEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayPowerInfoEXT, VkResult>)displayPowerControlEXT;
		var registerDeviceEventEXT = GetInstanceProcedureAddress(instance, "RegisterDeviceEventEXT");
		RegisterDeviceEventEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_4 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_5 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_6 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_7 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDeviceEventEXT;
		var registerDisplayEventEXT = GetInstanceProcedureAddress(instance, "RegisterDisplayEventEXT");
		RegisterDisplayEventEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_4 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_5 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_6 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_7 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDisplayEventEXT;
		var getSwapchainCounterEXT = GetInstanceProcedureAddress(instance, "GetSwapchainCounterEXT");
		GetSwapchainCounterEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, out ulong, VkResult>)getSwapchainCounterEXT;
		var getRefreshCycleDurationGOOGLE = GetInstanceProcedureAddress(instance, "GetRefreshCycleDurationGOOGLE");
		GetRefreshCycleDurationGOOGLE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, out VkRefreshCycleDurationGOOGLE, VkResult>)getRefreshCycleDurationGOOGLE;
		var getPastPresentationTimingGOOGLE = GetInstanceProcedureAddress(instance, "GetPastPresentationTimingGOOGLE");
		GetPastPresentationTimingGOOGLE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE[], VkResult>)getPastPresentationTimingGOOGLE;
		GetPastPresentationTimingGOOGLE_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkPastPresentationTimingGOOGLE[], VkResult>)getPastPresentationTimingGOOGLE;
		var commandSetDiscardRectangleEXT = GetInstanceProcedureAddress(instance, "CommandSetDiscardRectangleEXT");
		CommandSetDiscardRectangleEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void>)commandSetDiscardRectangleEXT;
		var setHdrMetadataEXT = GetInstanceProcedureAddress(instance, "SetHdrMetadataEXT");
		SetHdrMetadataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], VkHdrMetadataEXT*, void>)setHdrMetadataEXT;
		SetHdrMetadataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], ref VkHdrMetadataEXT, void>)setHdrMetadataEXT;
		var createRenderPass2KHR = GetInstanceProcedureAddress(instance, "CreateRenderPass2");
		CreateRenderPass2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, out VkRenderPass, void>)createRenderPass2KHR;
		CreateRenderPass2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, ref VkAllocationCallbacks, out VkRenderPass, void>)createRenderPass2KHR;
		CreateRenderPass2KHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, VkAllocationCallbacks*, out VkRenderPass, void>)createRenderPass2KHR;
		CreateRenderPass2KHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo2, ref VkAllocationCallbacks, out VkRenderPass, void>)createRenderPass2KHR;
		var commandBeginRenderPass2KHR = GetInstanceProcedureAddress(instance, "CommandBeginRenderPass2");
		CommandBeginRenderPass2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)commandBeginRenderPass2KHR;
		CommandBeginRenderPass2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, ref VkSubpassBeginInfo, void>)commandBeginRenderPass2KHR;
		CommandBeginRenderPass2KHR_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassBeginInfo*, void>)commandBeginRenderPass2KHR;
		CommandBeginRenderPass2KHR_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, ref VkSubpassBeginInfo, void>)commandBeginRenderPass2KHR;
		var commandNextSubpass2KHR = GetInstanceProcedureAddress(instance, "CommandNextSubpass2");
		CommandNextSubpass2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)commandNextSubpass2KHR;
		CommandNextSubpass2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, ref VkSubpassEndInfo, void>)commandNextSubpass2KHR;
		CommandNextSubpass2KHR_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, VkSubpassEndInfo*, void>)commandNextSubpass2KHR;
		CommandNextSubpass2KHR_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassBeginInfo, ref VkSubpassEndInfo, void>)commandNextSubpass2KHR;
		var commandEndRenderPass2KHR = GetInstanceProcedureAddress(instance, "CommandEndRenderPass2");
		CommandEndRenderPass2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassEndInfo*, void>)commandEndRenderPass2KHR;
		CommandEndRenderPass2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSubpassEndInfo, void>)commandEndRenderPass2KHR;
		var getSwapchainStatusKHR = GetInstanceProcedureAddress(instance, "GetSwapchainStatusKHR");
		GetSwapchainStatusKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult>)getSwapchainStatusKHR;
		var getPhysicalDeviceExternalFencePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalFenceProperties");
		GetPhysicalDeviceExternalFencePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, out VkExternalFenceProperties, void>)getPhysicalDeviceExternalFencePropertiesKHR;
		GetPhysicalDeviceExternalFencePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfo, out VkExternalFenceProperties, void>)getPhysicalDeviceExternalFencePropertiesKHR;
		var importFenceWin32HandleKHR = GetInstanceProcedureAddress(instance, "ImportFenceWin32HandleKHR");
		ImportFenceWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult>)importFenceWin32HandleKHR;
		ImportFenceWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceWin32HandleInfoKHR, VkResult>)importFenceWin32HandleKHR;
		var getFenceWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetFenceWin32HandleKHR");
		GetFenceWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getFenceWin32HandleKHR;
		GetFenceWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetWin32HandleInfoKHR, out IntPtr, VkResult>)getFenceWin32HandleKHR;
		var importFenceFileDescriptorKHR = GetInstanceProcedureAddress(instance, "ImportFenceFileDescriptorKHR");
		ImportFenceFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceFdInfoKHR*, VkResult>)importFenceFileDescriptorKHR;
		ImportFenceFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceFdInfoKHR, VkResult>)importFenceFileDescriptorKHR;
		var getFenceFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetFenceFileDescriptorKHR");
		GetFenceFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetFdInfoKHR*, out int, VkResult>)getFenceFileDescriptorKHR;
		GetFenceFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetFdInfoKHR, out int, VkResult>)getFenceFileDescriptorKHR;
		var enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR[], VkPerformanceCounterDescriptionKHR[], VkResult>)enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
		EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkPerformanceCounterKHR[], VkPerformanceCounterDescriptionKHR[], VkResult>)enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
		var getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, out uint, void>)getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
		GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkQueryPoolPerformanceCreateInfoKHR, out uint, void>)getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
		var acquireProfilingLockKHR = GetInstanceProcedureAddress(instance, "AcquireProfilingLockKHR");
		AcquireProfilingLockKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult>)acquireProfilingLockKHR;
		AcquireProfilingLockKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireProfilingLockInfoKHR, VkResult>)acquireProfilingLockKHR;
		var releaseProfilingLockKHR = GetInstanceProcedureAddress(instance, "ReleaseProfilingLockKHR");
		ReleaseProfilingLockKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, void>)releaseProfilingLockKHR;
		var getPhysicalDeviceSurfaceCapabilities2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilities2KHR");
		GetPhysicalDeviceSurfaceCapabilities2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkSurfaceCapabilities2KHR, VkResult>)getPhysicalDeviceSurfaceCapabilities2KHR;
		GetPhysicalDeviceSurfaceCapabilities2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkSurfaceCapabilities2KHR, VkResult>)getPhysicalDeviceSurfaceCapabilities2KHR;
		var getPhysicalDeviceSurfaceFormats2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceFormats2KHR");
		GetPhysicalDeviceSurfaceFormats2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		var getPhysicalDeviceDisplayProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayProperties2KHR");
		GetPhysicalDeviceDisplayProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayProperties2KHR[], VkResult>)getPhysicalDeviceDisplayProperties2KHR;
		GetPhysicalDeviceDisplayProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayProperties2KHR[], VkResult>)getPhysicalDeviceDisplayProperties2KHR;
		var getPhysicalDeviceDisplayPlaneProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayPlaneProperties2KHR");
		GetPhysicalDeviceDisplayPlaneProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR[], VkResult>)getPhysicalDeviceDisplayPlaneProperties2KHR;
		GetPhysicalDeviceDisplayPlaneProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlaneProperties2KHR[], VkResult>)getPhysicalDeviceDisplayPlaneProperties2KHR;
		var getDisplayModeProperties2KHR = GetInstanceProcedureAddress(instance, "GetDisplayModeProperties2KHR");
		GetDisplayModeProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR[], VkResult>)getDisplayModeProperties2KHR;
		GetDisplayModeProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModeProperties2KHR[], VkResult>)getDisplayModeProperties2KHR;
		var getDisplayPlaneCapabilities2KHR = GetInstanceProcedureAddress(instance, "GetDisplayPlaneCapabilities2KHR");
		GetDisplayPlaneCapabilities2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, out VkDisplayPlaneCapabilities2KHR, VkResult>)getDisplayPlaneCapabilities2KHR;
		GetDisplayPlaneCapabilities2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDisplayPlaneInfo2KHR, out VkDisplayPlaneCapabilities2KHR, VkResult>)getDisplayPlaneCapabilities2KHR;
		var createMacOSSurfaceMVK = GetInstanceProcedureAddress(instance, "CreateMacOSSurfaceMVK");
		CreateMacOSSurfaceMVK_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		var setDebugUtilsObjectNameEXT = GetInstanceProcedureAddress(instance, "SetDebugUtilsObjectNameEXT");
		SetDebugUtilsObjectNameEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult>)setDebugUtilsObjectNameEXT;
		SetDebugUtilsObjectNameEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugUtilsObjectNameInfoEXT, VkResult>)setDebugUtilsObjectNameEXT;
		var setDebugUtilsObjectTagEXT = GetInstanceProcedureAddress(instance, "SetDebugUtilsObjectTagEXT");
		SetDebugUtilsObjectTagEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult>)setDebugUtilsObjectTagEXT;
		SetDebugUtilsObjectTagEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugUtilsObjectTagInfoEXT, VkResult>)setDebugUtilsObjectTagEXT;
		var queueBeginDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "QueueBeginDebugUtilsLabelEXT");
		QueueBeginDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkDebugUtilsLabelEXT*, void>)queueBeginDebugUtilsLabelEXT;
		QueueBeginDebugUtilsLabelEXT_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref VkDebugUtilsLabelEXT, void>)queueBeginDebugUtilsLabelEXT;
		var queueEndDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "QueueEndDebugUtilsLabelEXT");
		QueueEndDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkQueue, void>)queueEndDebugUtilsLabelEXT;
		var queueInsertDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "QueueInsertDebugUtilsLabelEXT");
		QueueInsertDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkDebugUtilsLabelEXT*, void>)queueInsertDebugUtilsLabelEXT;
		QueueInsertDebugUtilsLabelEXT_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref VkDebugUtilsLabelEXT, void>)queueInsertDebugUtilsLabelEXT;
		var commandBeginDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "CommandBeginDebugUtilsLabelEXT");
		CommandBeginDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)commandBeginDebugUtilsLabelEXT;
		CommandBeginDebugUtilsLabelEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugUtilsLabelEXT, void>)commandBeginDebugUtilsLabelEXT;
		var commandEndDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "CommandEndDebugUtilsLabelEXT");
		CommandEndDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndDebugUtilsLabelEXT;
		var commandInsertDebugUtilsLabelEXT = GetInstanceProcedureAddress(instance, "CommandInsertDebugUtilsLabelEXT");
		CommandInsertDebugUtilsLabelEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)commandInsertDebugUtilsLabelEXT;
		CommandInsertDebugUtilsLabelEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugUtilsLabelEXT, void>)commandInsertDebugUtilsLabelEXT;
		var createDebugUtilsMessengerEXT = GetInstanceProcedureAddress(instance, "CreateDebugUtilsMessengerEXT");
		CreateDebugUtilsMessengerEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugUtilsMessengerEXT, VkResult>)createDebugUtilsMessengerEXT;
		CreateDebugUtilsMessengerEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugUtilsMessengerEXT, VkResult>)createDebugUtilsMessengerEXT;
		CreateDebugUtilsMessengerEXT_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugUtilsMessengerCreateInfoEXT, VkAllocationCallbacks*, out VkDebugUtilsMessengerEXT, VkResult>)createDebugUtilsMessengerEXT;
		CreateDebugUtilsMessengerEXT_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugUtilsMessengerCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugUtilsMessengerEXT, VkResult>)createDebugUtilsMessengerEXT;
		var destroyDebugUtilsMessengerEXT = GetInstanceProcedureAddress(instance, "DestroyDebugUtilsMessengerEXT");
		DestroyDebugUtilsMessengerEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void>)destroyDebugUtilsMessengerEXT;
		DestroyDebugUtilsMessengerEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessengerEXT, ref VkAllocationCallbacks, void>)destroyDebugUtilsMessengerEXT;
		var submitDebugUtilsMessageEXT = GetInstanceProcedureAddress(instance, "SubmitDebugUtilsMessageEXT");
		SubmitDebugUtilsMessageEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)submitDebugUtilsMessageEXT;
		SubmitDebugUtilsMessageEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, ref VkDebugUtilsMessengerCallbackDataEXT, void>)submitDebugUtilsMessageEXT;
		var getAndroidHardwareBufferPropertiesANDROID = GetInstanceProcedureAddress(instance, "GetAndroidHardwareBufferPropertiesANDROID");
		GetAndroidHardwareBufferPropertiesANDROID_0 = (delegate* unmanaged[Cdecl]<VkDevice, void*, out VkAndroidHardwareBufferPropertiesANDROID, VkResult>)getAndroidHardwareBufferPropertiesANDROID;
		var getMemoryAndroidHardwareBufferANDROID = GetInstanceProcedureAddress(instance, "GetMemoryAndroidHardwareBufferANDROID");
		GetMemoryAndroidHardwareBufferANDROID_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetAndroidHardwareBufferInfoANDROID*, void**, VkResult>)getMemoryAndroidHardwareBufferANDROID;
		GetMemoryAndroidHardwareBufferANDROID_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetAndroidHardwareBufferInfoANDROID, void**, VkResult>)getMemoryAndroidHardwareBufferANDROID;
		var commandSetSampleLocationsEXT = GetInstanceProcedureAddress(instance, "CommandSetSampleLocationsEXT");
		CommandSetSampleLocationsEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleLocationsInfoEXT*, void>)commandSetSampleLocationsEXT;
		CommandSetSampleLocationsEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSampleLocationsInfoEXT, void>)commandSetSampleLocationsEXT;
		var getPhysicalDeviceMultisamplePropertiesEXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMultisamplePropertiesEXT");
		GetPhysicalDeviceMultisamplePropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSampleCountFlags, out VkMultisamplePropertiesEXT, void>)getPhysicalDeviceMultisamplePropertiesEXT;
		var getImageMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetImageMemoryRequirements2");
		GetImageMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2*, out VkMemoryRequirements2, void>)getImageMemoryRequirements2KHR;
		GetImageMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2, out VkMemoryRequirements2, void>)getImageMemoryRequirements2KHR;
		var getBufferMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetBufferMemoryRequirements2");
		GetBufferMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2*, out VkMemoryRequirements2, void>)getBufferMemoryRequirements2KHR;
		GetBufferMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2, out VkMemoryRequirements2, void>)getBufferMemoryRequirements2KHR;
		var getImageSparseMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetImageSparseMemoryRequirements2");
		GetImageSparseMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, ref uint, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, uint*, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2, ref uint, VkSparseImageMemoryRequirements2[], void>)getImageSparseMemoryRequirements2KHR;
		var createAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "CreateAccelerationStructureKHR");
		CreateAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, out VkAccelerationStructureKHR, VkResult>)createAccelerationStructureKHR;
		CreateAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoKHR*, ref VkAllocationCallbacks, out VkAccelerationStructureKHR, VkResult>)createAccelerationStructureKHR;
		CreateAccelerationStructureKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoKHR, VkAllocationCallbacks*, out VkAccelerationStructureKHR, VkResult>)createAccelerationStructureKHR;
		CreateAccelerationStructureKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoKHR, ref VkAllocationCallbacks, out VkAccelerationStructureKHR, VkResult>)createAccelerationStructureKHR;
		var destroyAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "DestroyAccelerationStructureKHR");
		DestroyAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)destroyAccelerationStructureKHR;
		DestroyAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureKHR, ref VkAllocationCallbacks, void>)destroyAccelerationStructureKHR;
		var commandBuildAccelerationStructuresKHR = GetInstanceProcedureAddress(instance, "CommandBuildAccelerationStructuresKHR");
		CommandBuildAccelerationStructuresKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkAccelerationStructureBuildRangeInfoKHR[], void>)commandBuildAccelerationStructuresKHR;
		var commandBuildAccelerationStructuresIndirectKHR = GetInstanceProcedureAddress(instance, "CommandBuildAccelerationStructuresIndirectKHR");
		CommandBuildAccelerationStructuresIndirectKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, uint*, uint**, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, uint*, ref uint, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, ref uint, uint**, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkDeviceAddress*, ref uint, ref uint, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, uint*, uint**, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, uint*, ref uint, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, ref uint, uint**, void>)commandBuildAccelerationStructuresIndirectKHR;
		CommandBuildAccelerationStructuresIndirectKHR_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR[], ref VkDeviceAddress, ref uint, ref uint, void>)commandBuildAccelerationStructuresIndirectKHR;
		var buildAccelerationStructuresKHR = GetInstanceProcedureAddress(instance, "BuildAccelerationStructuresKHR");
		BuildAccelerationStructuresKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR[], VkAccelerationStructureBuildRangeInfoKHR[], VkResult>)buildAccelerationStructuresKHR;
		var copyAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "CopyAccelerationStructureKHR");
		CopyAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult>)copyAccelerationStructureKHR;
		CopyAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyAccelerationStructureInfoKHR, VkResult>)copyAccelerationStructureKHR;
		var copyAccelerationStructureToMemoryKHR = GetInstanceProcedureAddress(instance, "CopyAccelerationStructureToMemoryKHR");
		CopyAccelerationStructureToMemoryKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult>)copyAccelerationStructureToMemoryKHR;
		CopyAccelerationStructureToMemoryKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyAccelerationStructureToMemoryInfoKHR, VkResult>)copyAccelerationStructureToMemoryKHR;
		var copyMemoryToAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "CopyMemoryToAccelerationStructureKHR");
		CopyMemoryToAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult>)copyMemoryToAccelerationStructureKHR;
		CopyMemoryToAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMemoryToAccelerationStructureInfoKHR, VkResult>)copyMemoryToAccelerationStructureKHR;
		var writeAccelerationStructuresPropertiesKHR = GetInstanceProcedureAddress(instance, "WriteAccelerationStructuresPropertiesKHR");
		WriteAccelerationStructuresPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkAccelerationStructureKHR[], VkQueryType, nuint, void*, nuint, VkResult>)writeAccelerationStructuresPropertiesKHR;
		var commandCopyAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "CommandCopyAccelerationStructureKHR");
		CommandCopyAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void>)commandCopyAccelerationStructureKHR;
		CommandCopyAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyAccelerationStructureInfoKHR, void>)commandCopyAccelerationStructureKHR;
		var commandCopyAccelerationStructureToMemoryKHR = GetInstanceProcedureAddress(instance, "CommandCopyAccelerationStructureToMemoryKHR");
		CommandCopyAccelerationStructureToMemoryKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void>)commandCopyAccelerationStructureToMemoryKHR;
		CommandCopyAccelerationStructureToMemoryKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyAccelerationStructureToMemoryInfoKHR, void>)commandCopyAccelerationStructureToMemoryKHR;
		var commandCopyMemoryToAccelerationStructureKHR = GetInstanceProcedureAddress(instance, "CommandCopyMemoryToAccelerationStructureKHR");
		CommandCopyMemoryToAccelerationStructureKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void>)commandCopyMemoryToAccelerationStructureKHR;
		CommandCopyMemoryToAccelerationStructureKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMemoryToAccelerationStructureInfoKHR, void>)commandCopyMemoryToAccelerationStructureKHR;
		var getAccelerationStructureDeviceAddressKHR = GetInstanceProcedureAddress(instance, "GetAccelerationStructureDeviceAddressKHR");
		GetAccelerationStructureDeviceAddressKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkAccelerationStructureDeviceAddressInfoKHR, VkDeviceAddress>)getAccelerationStructureDeviceAddressKHR;
		var commandWriteAccelerationStructuresPropertiesKHR = GetInstanceProcedureAddress(instance, "CommandWriteAccelerationStructuresPropertiesKHR");
		CommandWriteAccelerationStructuresPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureKHR[], VkQueryType, VkQueryPool, uint, void>)commandWriteAccelerationStructuresPropertiesKHR;
		var getDeviceAccelerationStructureCompatibilityKHR = GetInstanceProcedureAddress(instance, "GetDeviceAccelerationStructureCompatibilityKHR");
		GetDeviceAccelerationStructureCompatibilityKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureVersionInfoKHR*, out VkAccelerationStructureCompatibilityKHR, void>)getDeviceAccelerationStructureCompatibilityKHR;
		GetDeviceAccelerationStructureCompatibilityKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureVersionInfoKHR, out VkAccelerationStructureCompatibilityKHR, void>)getDeviceAccelerationStructureCompatibilityKHR;
		var getAccelerationStructureBuildSizesKHR = GetInstanceProcedureAddress(instance, "GetAccelerationStructureBuildSizesKHR");
		GetAccelerationStructureBuildSizesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, out VkAccelerationStructureBuildSizesInfoKHR, void>)getAccelerationStructureBuildSizesKHR;
		GetAccelerationStructureBuildSizesKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, ref uint, out VkAccelerationStructureBuildSizesInfoKHR, void>)getAccelerationStructureBuildSizesKHR;
		GetAccelerationStructureBuildSizesKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkAccelerationStructureBuildGeometryInfoKHR, uint*, out VkAccelerationStructureBuildSizesInfoKHR, void>)getAccelerationStructureBuildSizesKHR;
		GetAccelerationStructureBuildSizesKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkAccelerationStructureBuildGeometryInfoKHR, ref uint, out VkAccelerationStructureBuildSizesInfoKHR, void>)getAccelerationStructureBuildSizesKHR;
		var commandTraceRaysKHR = GetInstanceProcedureAddress(instance, "CommandTraceRaysKHR");
		CommandTraceRaysKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_8 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_9 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_10 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_11 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_12 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_13 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_14 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)commandTraceRaysKHR;
		CommandTraceRaysKHR_15 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, uint, uint, uint, void>)commandTraceRaysKHR;
		var createRayTracingPipelinesKHR = GetInstanceProcedureAddress(instance, "CreateRayTracingPipelinesKHR");
		CreateRayTracingPipelinesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createRayTracingPipelinesKHR;
		CreateRayTracingPipelinesKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createRayTracingPipelinesKHR;
		var getRayTracingShaderGroupHandlesKHR = GetInstanceProcedureAddress(instance, "GetRayTracingShaderGroupHandlesKHR");
		GetRayTracingShaderGroupHandlesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult>)getRayTracingShaderGroupHandlesKHR;
		var getRayTracingCaptureReplayShaderGroupHandlesKHR = GetInstanceProcedureAddress(instance, "GetRayTracingCaptureReplayShaderGroupHandlesKHR");
		GetRayTracingCaptureReplayShaderGroupHandlesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, VkResult>)getRayTracingCaptureReplayShaderGroupHandlesKHR;
		var commandTraceRaysIndirectKHR = GetInstanceProcedureAddress(instance, "CommandTraceRaysIndirectKHR");
		CommandTraceRaysIndirectKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_8 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_9 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_10 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_11 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_12 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_13 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_14 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		CommandTraceRaysIndirectKHR_15 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, ref VkStridedDeviceAddressRegionKHR, VkDeviceAddress, void>)commandTraceRaysIndirectKHR;
		var getRayTracingShaderGroupStackSizeKHR = GetInstanceProcedureAddress(instance, "GetRayTracingShaderGroupStackSizeKHR");
		GetRayTracingShaderGroupStackSizeKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, VkDeviceSize>)getRayTracingShaderGroupStackSizeKHR;
		var commandSetRayTracingPipelineStackSizeKHR = GetInstanceProcedureAddress(instance, "CommandSetRayTracingPipelineStackSizeKHR");
		CommandSetRayTracingPipelineStackSizeKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetRayTracingPipelineStackSizeKHR;
		var createSamplerYcbcrConversionKHR = GetInstanceProcedureAddress(instance, "CreateSamplerYcbcrConversion");
		CreateSamplerYcbcrConversionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, void>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, void>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, VkAllocationCallbacks*, out VkSamplerYcbcrConversion, void>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfo, ref VkAllocationCallbacks, out VkSamplerYcbcrConversion, void>)createSamplerYcbcrConversionKHR;
		var destroySamplerYcbcrConversionKHR = GetInstanceProcedureAddress(instance, "DestroySamplerYcbcrConversion");
		DestroySamplerYcbcrConversionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)destroySamplerYcbcrConversionKHR;
		DestroySamplerYcbcrConversionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, ref VkAllocationCallbacks, void>)destroySamplerYcbcrConversionKHR;
		var bindBufferMemory2KHR = GetInstanceProcedureAddress(instance, "BindBufferMemory2");
		BindBufferMemory2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfo[], void>)bindBufferMemory2KHR;
		var bindImageMemory2KHR = GetInstanceProcedureAddress(instance, "BindImageMemory2");
		BindImageMemory2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfo[], void>)bindImageMemory2KHR;
		var getImageDrmFormatModifierPropertiesEXT = GetInstanceProcedureAddress(instance, "GetImageDrmFormatModifierPropertiesEXT");
		GetImageDrmFormatModifierPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkImageDrmFormatModifierPropertiesEXT, VkResult>)getImageDrmFormatModifierPropertiesEXT;
		var createValidationCacheEXT = GetInstanceProcedureAddress(instance, "CreateValidationCacheEXT");
		CreateValidationCacheEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		var destroyValidationCacheEXT = GetInstanceProcedureAddress(instance, "DestroyValidationCacheEXT");
		DestroyValidationCacheEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)destroyValidationCacheEXT;
		DestroyValidationCacheEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref VkAllocationCallbacks, void>)destroyValidationCacheEXT;
		var mergeValidationCachesEXT = GetInstanceProcedureAddress(instance, "MergeValidationCachesEXT");
		MergeValidationCachesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT[], VkResult>)mergeValidationCachesEXT;
		var getValidationCacheDataEXT = GetInstanceProcedureAddress(instance, "GetValidationCacheDataEXT");
		GetValidationCacheDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, nuint*, void*, VkResult>)getValidationCacheDataEXT;
		GetValidationCacheDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref nuint, void*, VkResult>)getValidationCacheDataEXT;
		var commandBindShadingRateImageNV = GetInstanceProcedureAddress(instance, "CommandBindShadingRateImageNV");
		CommandBindShadingRateImageNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImageView, VkImageLayout, void>)commandBindShadingRateImageNV;
		var commandSetViewportShadingRatePaletteNV = GetInstanceProcedureAddress(instance, "CommandSetViewportShadingRatePaletteNV");
		CommandSetViewportShadingRatePaletteNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void>)commandSetViewportShadingRatePaletteNV;
		CommandSetViewportShadingRatePaletteNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkShadingRatePaletteNV, void>)commandSetViewportShadingRatePaletteNV;
		var commandSetCoarseSampleOrderNV = GetInstanceProcedureAddress(instance, "CommandSetCoarseSampleOrderNV");
		CommandSetCoarseSampleOrderNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV[], void>)commandSetCoarseSampleOrderNV;
		var createAccelerationStructureNV = GetInstanceProcedureAddress(instance, "CreateAccelerationStructureNV");
		CreateAccelerationStructureNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, out VkAccelerationStructureNV, VkResult>)createAccelerationStructureNV;
		CreateAccelerationStructureNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCreateInfoNV*, ref VkAllocationCallbacks, out VkAccelerationStructureNV, VkResult>)createAccelerationStructureNV;
		CreateAccelerationStructureNV_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoNV, VkAllocationCallbacks*, out VkAccelerationStructureNV, VkResult>)createAccelerationStructureNV;
		CreateAccelerationStructureNV_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCreateInfoNV, ref VkAllocationCallbacks, out VkAccelerationStructureNV, VkResult>)createAccelerationStructureNV;
		var destroyAccelerationStructureNV = GetInstanceProcedureAddress(instance, "DestroyAccelerationStructureNV");
		DestroyAccelerationStructureNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*, void>)destroyAccelerationStructureNV;
		DestroyAccelerationStructureNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, ref VkAllocationCallbacks, void>)destroyAccelerationStructureNV;
		var getAccelerationStructureMemoryRequirementsNV = GetInstanceProcedureAddress(instance, "GetAccelerationStructureMemoryRequirementsNV");
		GetAccelerationStructureMemoryRequirementsNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, out VkMemoryRequirements2KHR, void>)getAccelerationStructureMemoryRequirementsNV;
		GetAccelerationStructureMemoryRequirementsNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureMemoryRequirementsInfoNV, out VkMemoryRequirements2KHR, void>)getAccelerationStructureMemoryRequirementsNV;
		var bindAccelerationStructureMemoryNV = GetInstanceProcedureAddress(instance, "BindAccelerationStructureMemoryNV");
		BindAccelerationStructureMemoryNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV[], VkResult>)bindAccelerationStructureMemoryNV;
		var commandBuildAccelerationStructureNV = GetInstanceProcedureAddress(instance, "CommandBuildAccelerationStructureNV");
		CommandBuildAccelerationStructureNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void>)commandBuildAccelerationStructureNV;
		CommandBuildAccelerationStructureNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void>)commandBuildAccelerationStructureNV;
		var commandCopyAccelerationStructureNV = GetInstanceProcedureAddress(instance, "CommandCopyAccelerationStructureNV");
		CommandCopyAccelerationStructureNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR, void>)commandCopyAccelerationStructureNV;
		var commandTraceRaysNV = GetInstanceProcedureAddress(instance, "CommandTraceRaysNV");
		CommandTraceRaysNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint, uint, uint, void>)commandTraceRaysNV;
		var createRayTracingPipelinesNV = GetInstanceProcedureAddress(instance, "CreateRayTracingPipelinesNV");
		CreateRayTracingPipelinesNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createRayTracingPipelinesNV;
		CreateRayTracingPipelinesNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createRayTracingPipelinesNV;
		var getRayTracingShaderGroupHandlesNV = GetInstanceProcedureAddress(instance, "GetRayTracingShaderGroupHandlesKHR");
		GetRayTracingShaderGroupHandlesNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, uint, nuint, void*, void>)getRayTracingShaderGroupHandlesNV;
		var getAccelerationStructureHandleNV = GetInstanceProcedureAddress(instance, "GetAccelerationStructureHandleNV");
		GetAccelerationStructureHandleNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureNV, nuint, void*, VkResult>)getAccelerationStructureHandleNV;
		var commandWriteAccelerationStructuresPropertiesNV = GetInstanceProcedureAddress(instance, "CommandWriteAccelerationStructuresPropertiesNV");
		CommandWriteAccelerationStructuresPropertiesNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkAccelerationStructureNV[], VkQueryType, VkQueryPool, uint, void>)commandWriteAccelerationStructuresPropertiesNV;
		var compileDeferredNV = GetInstanceProcedureAddress(instance, "CompileDeferredNV");
		CompileDeferredNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, uint, VkResult>)compileDeferredNV;
		var getDescriptorSetLayoutSupportKHR = GetInstanceProcedureAddress(instance, "GetDescriptorSetLayoutSupport");
		GetDescriptorSetLayoutSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, out VkDescriptorSetLayoutSupport, void>)getDescriptorSetLayoutSupportKHR;
		GetDescriptorSetLayoutSupportKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, out VkDescriptorSetLayoutSupport, void>)getDescriptorSetLayoutSupportKHR;
		var commandDrawIndirectCountKHR = GetInstanceProcedureAddress(instance, "CommandDrawIndirectCount");
		CommandDrawIndirectCountKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirectCountKHR;
		var commandDrawIndexedIndirectCountKHR = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirectCount");
		CommandDrawIndexedIndirectCountKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirectCountKHR;
		var getMemoryHostPointerPropertiesEXT = GetInstanceProcedureAddress(instance, "GetMemoryHostPointerPropertiesEXT");
		GetMemoryHostPointerPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlags, void*, out VkMemoryHostPointerPropertiesEXT, VkResult>)getMemoryHostPointerPropertiesEXT;
		var commandWriteBufferMarkerAMD = GetInstanceProcedureAddress(instance, "CommandWriteBufferMarkerAMD");
		CommandWriteBufferMarkerAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, VkDeviceSize, uint, void>)commandWriteBufferMarkerAMD;
		var getPhysicalDeviceCalibrateableTimeDomainsEXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceCalibrateableTimeDomainsEXT");
		GetPhysicalDeviceCalibrateableTimeDomainsEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkTimeDomainEXT[], VkResult>)getPhysicalDeviceCalibrateableTimeDomainsEXT;
		GetPhysicalDeviceCalibrateableTimeDomainsEXT_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkTimeDomainEXT[], VkResult>)getPhysicalDeviceCalibrateableTimeDomainsEXT;
		var getCalibratedTimestampsEXT = GetInstanceProcedureAddress(instance, "GetCalibratedTimestampsEXT");
		GetCalibratedTimestampsEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkCalibratedTimestampInfoEXT[], ulong*, out ulong, VkResult>)getCalibratedTimestampsEXT;
		GetCalibratedTimestampsEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkCalibratedTimestampInfoEXT[], ref ulong, out ulong, VkResult>)getCalibratedTimestampsEXT;
		var commandDrawMeshTasksNV = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksNV");
		CommandDrawMeshTasksNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, void>)commandDrawMeshTasksNV;
		var commandDrawMeshTasksIndirectNV = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksIndirectNV");
		CommandDrawMeshTasksIndirectNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawMeshTasksIndirectNV;
		var commandDrawMeshTasksIndirectCountNV = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksIndirectCountNV");
		CommandDrawMeshTasksIndirectCountNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawMeshTasksIndirectCountNV;
		var commandSetExclusiveScissorNV = GetInstanceProcedureAddress(instance, "CommandSetExclusiveScissorNV");
		CommandSetExclusiveScissorNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void>)commandSetExclusiveScissorNV;
		var commandSetCheckpointNV = GetInstanceProcedureAddress(instance, "CommandSetCheckpointNV");
		CommandSetCheckpointNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void*, void>)commandSetCheckpointNV;
		var getQueueCheckpointDataNV = GetInstanceProcedureAddress(instance, "GetQueueCheckpointDataNV");
		GetQueueCheckpointDataNV_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint*, VkCheckpointDataNV[], void>)getQueueCheckpointDataNV;
		GetQueueCheckpointDataNV_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref uint, VkCheckpointDataNV[], void>)getQueueCheckpointDataNV;
		var getSemaphoreCounterValueKHR = GetInstanceProcedureAddress(instance, "GetSemaphoreCounterValue");
		GetSemaphoreCounterValueKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, out ulong, void>)getSemaphoreCounterValueKHR;
		var waitSemaphoresKHR = GetInstanceProcedureAddress(instance, "WaitSemaphores");
		WaitSemaphoresKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreWaitInfo*, ulong, void>)waitSemaphoresKHR;
		WaitSemaphoresKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreWaitInfo, ulong, void>)waitSemaphoresKHR;
		var signalSemaphoreKHR = GetInstanceProcedureAddress(instance, "SignalSemaphore");
		SignalSemaphoreKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreSignalInfo*, void>)signalSemaphoreKHR;
		SignalSemaphoreKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreSignalInfo, void>)signalSemaphoreKHR;
		var initializePerformanceApiINTEL = GetInstanceProcedureAddress(instance, "InitializePerformanceApiINTEL");
		InitializePerformanceApiINTEL_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult>)initializePerformanceApiINTEL;
		InitializePerformanceApiINTEL_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkInitializePerformanceApiInfoINTEL, VkResult>)initializePerformanceApiINTEL;
		var uninitializePerformanceApiINTEL = GetInstanceProcedureAddress(instance, "UninitializePerformanceApiINTEL");
		UninitializePerformanceApiINTEL_0 = (delegate* unmanaged[Cdecl]<VkDevice, void>)uninitializePerformanceApiINTEL;
		var commandSetPerformanceMarkerINTEL = GetInstanceProcedureAddress(instance, "CommandSetPerformanceMarkerINTEL");
		CommandSetPerformanceMarkerINTEL_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult>)commandSetPerformanceMarkerINTEL;
		CommandSetPerformanceMarkerINTEL_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceMarkerInfoINTEL, VkResult>)commandSetPerformanceMarkerINTEL;
		var commandSetPerformanceStreamMarkerINTEL = GetInstanceProcedureAddress(instance, "CommandSetPerformanceStreamMarkerINTEL");
		CommandSetPerformanceStreamMarkerINTEL_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult>)commandSetPerformanceStreamMarkerINTEL;
		CommandSetPerformanceStreamMarkerINTEL_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceStreamMarkerInfoINTEL, VkResult>)commandSetPerformanceStreamMarkerINTEL;
		var commandSetPerformanceOverrideINTEL = GetInstanceProcedureAddress(instance, "CommandSetPerformanceOverrideINTEL");
		CommandSetPerformanceOverrideINTEL_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult>)commandSetPerformanceOverrideINTEL;
		CommandSetPerformanceOverrideINTEL_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkPerformanceOverrideInfoINTEL, VkResult>)commandSetPerformanceOverrideINTEL;
		var acquirePerformanceConfigurationINTEL = GetInstanceProcedureAddress(instance, "AcquirePerformanceConfigurationINTEL");
		AcquirePerformanceConfigurationINTEL_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult>)acquirePerformanceConfigurationINTEL;
		AcquirePerformanceConfigurationINTEL_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, ref VkPerformanceConfigurationINTEL, VkResult>)acquirePerformanceConfigurationINTEL;
		AcquirePerformanceConfigurationINTEL_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPerformanceConfigurationAcquireInfoINTEL, VkPerformanceConfigurationINTEL*, VkResult>)acquirePerformanceConfigurationINTEL;
		AcquirePerformanceConfigurationINTEL_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPerformanceConfigurationAcquireInfoINTEL, ref VkPerformanceConfigurationINTEL, VkResult>)acquirePerformanceConfigurationINTEL;
		var releasePerformanceConfigurationINTEL = GetInstanceProcedureAddress(instance, "ReleasePerformanceConfigurationINTEL");
		ReleasePerformanceConfigurationINTEL_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceConfigurationINTEL, VkResult>)releasePerformanceConfigurationINTEL;
		var queueSetPerformanceConfigurationINTEL = GetInstanceProcedureAddress(instance, "QueueSetPerformanceConfigurationINTEL");
		QueueSetPerformanceConfigurationINTEL_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkPerformanceConfigurationINTEL, VkResult>)queueSetPerformanceConfigurationINTEL;
		var getPerformanceParameterINTEL = GetInstanceProcedureAddress(instance, "GetPerformanceParameterINTEL");
		GetPerformanceParameterINTEL_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPerformanceParameterTypeINTEL, out VkPerformanceValueINTEL, VkResult>)getPerformanceParameterINTEL;
		var setLocalDimmingAMD = GetInstanceProcedureAddress(instance, "SetLocalDimmingAMD");
		SetLocalDimmingAMD_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkBool32, void>)setLocalDimmingAMD;
		var getPhysicalDeviceFragmentShadingRatesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFragmentShadingRatesKHR");
		GetPhysicalDeviceFragmentShadingRatesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR[], VkResult>)getPhysicalDeviceFragmentShadingRatesKHR;
		GetPhysicalDeviceFragmentShadingRatesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceFragmentShadingRateKHR[], VkResult>)getPhysicalDeviceFragmentShadingRatesKHR;
		var commandSetFragmentShadingRateKHR = GetInstanceProcedureAddress(instance, "CommandSetFragmentShadingRateKHR");
		CommandSetFragmentShadingRateKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR, void>)commandSetFragmentShadingRateKHR;
		CommandSetFragmentShadingRateKHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkExtent2D, VkFragmentShadingRateCombinerOpKHR, void>)commandSetFragmentShadingRateKHR;
		var getBufferDeviceAddressEXT = GetInstanceProcedureAddress(instance, "GetBufferDeviceAddress");
		GetBufferDeviceAddressEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void>)getBufferDeviceAddressEXT;
		var getPhysicalDeviceToolPropertiesEXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceToolProperties");
		GetPhysicalDeviceToolPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties[], void>)getPhysicalDeviceToolPropertiesEXT;
		GetPhysicalDeviceToolPropertiesEXT_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkPhysicalDeviceToolProperties[], void>)getPhysicalDeviceToolPropertiesEXT;
		var waitForPresentKHR = GetInstanceProcedureAddress(instance, "WaitForPresentKHR");
		WaitForPresentKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, ulong, VkResult>)waitForPresentKHR;
		var getPhysicalDeviceCooperativeMatrixPropertiesNV = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceCooperativeMatrixPropertiesNV");
		GetPhysicalDeviceCooperativeMatrixPropertiesNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV[], VkResult>)getPhysicalDeviceCooperativeMatrixPropertiesNV;
		GetPhysicalDeviceCooperativeMatrixPropertiesNV_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkCooperativeMatrixPropertiesNV[], VkResult>)getPhysicalDeviceCooperativeMatrixPropertiesNV;
		var getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV[], VkResult>)getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
		GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkFramebufferMixedSamplesCombinationNV[], VkResult>)getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
		var getPhysicalDeviceSurfacePresentModes2EXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfacePresentModes2EXT");
		GetPhysicalDeviceSurfacePresentModes2EXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModes2EXT;
		GetPhysicalDeviceSurfacePresentModes2EXT_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModes2EXT;
		GetPhysicalDeviceSurfacePresentModes2EXT_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModes2EXT;
		GetPhysicalDeviceSurfacePresentModes2EXT_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModes2EXT;
		var acquireFullScreenExclusiveModeEXT = GetInstanceProcedureAddress(instance, "AcquireFullScreenExclusiveModeEXT");
		AcquireFullScreenExclusiveModeEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult>)acquireFullScreenExclusiveModeEXT;
		var releaseFullScreenExclusiveModeEXT = GetInstanceProcedureAddress(instance, "ReleaseFullScreenExclusiveModeEXT");
		ReleaseFullScreenExclusiveModeEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult>)releaseFullScreenExclusiveModeEXT;
		var getDeviceGroupSurfacePresentModes2EXT = GetInstanceProcedureAddress(instance, "GetDeviceGroupSurfacePresentModes2EXT");
		GetDeviceGroupSurfacePresentModes2EXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkDeviceGroupPresentModeFlagsKHR, VkResult>)getDeviceGroupSurfacePresentModes2EXT;
		GetDeviceGroupSurfacePresentModes2EXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkDeviceGroupPresentModeFlagsKHR, VkResult>)getDeviceGroupSurfacePresentModes2EXT;
		var createHeadlessSurfaceEXT = GetInstanceProcedureAddress(instance, "CreateHeadlessSurfaceEXT");
		CreateHeadlessSurfaceEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createHeadlessSurfaceEXT;
		CreateHeadlessSurfaceEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createHeadlessSurfaceEXT;
		CreateHeadlessSurfaceEXT_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkHeadlessSurfaceCreateInfoEXT, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createHeadlessSurfaceEXT;
		CreateHeadlessSurfaceEXT_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkHeadlessSurfaceCreateInfoEXT, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createHeadlessSurfaceEXT;
		var getBufferDeviceAddressKHR = GetInstanceProcedureAddress(instance, "GetBufferDeviceAddress");
		GetBufferDeviceAddressKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void>)getBufferDeviceAddressKHR;
		var getBufferOpaqueCaptureAddressKHR = GetInstanceProcedureAddress(instance, "GetBufferOpaqueCaptureAddress");
		GetBufferOpaqueCaptureAddressKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkBufferDeviceAddressInfo, void>)getBufferOpaqueCaptureAddressKHR;
		var getDeviceMemoryOpaqueCaptureAddressKHR = GetInstanceProcedureAddress(instance, "GetDeviceMemoryOpaqueCaptureAddress");
		GetDeviceMemoryOpaqueCaptureAddressKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceMemoryOpaqueCaptureAddressInfo, void>)getDeviceMemoryOpaqueCaptureAddressKHR;
		var commandSetLineStippleEXT = GetInstanceProcedureAddress(instance, "CommandSetLineStippleEXT");
		CommandSetLineStippleEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ushort, void>)commandSetLineStippleEXT;
		var resetQueryPoolEXT = GetInstanceProcedureAddress(instance, "ResetQueryPool");
		ResetQueryPoolEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void>)resetQueryPoolEXT;
		var commandSetCullModeEXT = GetInstanceProcedureAddress(instance, "CommandSetCullMode");
		CommandSetCullModeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void>)commandSetCullModeEXT;
		var commandSetFrontFaceEXT = GetInstanceProcedureAddress(instance, "CommandSetFrontFace");
		CommandSetFrontFaceEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void>)commandSetFrontFaceEXT;
		var commandSetPrimitiveTopologyEXT = GetInstanceProcedureAddress(instance, "CommandSetPrimitiveTopology");
		CommandSetPrimitiveTopologyEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void>)commandSetPrimitiveTopologyEXT;
		var commandSetViewportWithCountEXT = GetInstanceProcedureAddress(instance, "CommandSetViewportWithCount");
		CommandSetViewportWithCountEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkViewport[], void>)commandSetViewportWithCountEXT;
		var commandSetScissorWithCountEXT = GetInstanceProcedureAddress(instance, "CommandSetScissorWithCount");
		CommandSetScissorWithCountEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkRect2D[], void>)commandSetScissorWithCountEXT;
		var commandBindVertexBuffers2EXT = GetInstanceProcedureAddress(instance, "CommandBindVertexBuffers2");
		CommandBindVertexBuffers2EXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_4 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_5 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_6 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_7 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_8 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_9 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_10 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_11 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_12 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_13 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, VkDeviceSize*, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_14 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, VkDeviceSize*, void>)commandBindVertexBuffers2EXT;
		CommandBindVertexBuffers2EXT_15 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, ref VkDeviceSize, ref VkDeviceSize, void>)commandBindVertexBuffers2EXT;
		var commandSetDepthTestEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthTestEnable");
		CommandSetDepthTestEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthTestEnableEXT;
		var commandSetDepthWriteEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthWriteEnable");
		CommandSetDepthWriteEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthWriteEnableEXT;
		var commandSetDepthCompareOpEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthCompareOp");
		CommandSetDepthCompareOpEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void>)commandSetDepthCompareOpEXT;
		var commandSetDepthBoundsTestEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthBoundsTestEnable");
		CommandSetDepthBoundsTestEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthBoundsTestEnableEXT;
		var commandSetStencilTestEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetStencilTestEnable");
		CommandSetStencilTestEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetStencilTestEnableEXT;
		var commandSetStencilOpEXT = GetInstanceProcedureAddress(instance, "CommandSetStencilOp");
		CommandSetStencilOpEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)commandSetStencilOpEXT;
		var createDeferredOperationKHR = GetInstanceProcedureAddress(instance, "CreateDeferredOperationKHR");
		CreateDeferredOperationKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, out VkDeferredOperationKHR, VkResult>)createDeferredOperationKHR;
		CreateDeferredOperationKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, out VkDeferredOperationKHR, VkResult>)createDeferredOperationKHR;
		var destroyDeferredOperationKHR = GetInstanceProcedureAddress(instance, "DestroyDeferredOperationKHR");
		DestroyDeferredOperationKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void>)destroyDeferredOperationKHR;
		DestroyDeferredOperationKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkAllocationCallbacks, void>)destroyDeferredOperationKHR;
		var getDeferredOperationMaxConcurrencyKHR = GetInstanceProcedureAddress(instance, "GetDeferredOperationMaxConcurrencyKHR");
		GetDeferredOperationMaxConcurrencyKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint>)getDeferredOperationMaxConcurrencyKHR;
		var getDeferredOperationResultKHR = GetInstanceProcedureAddress(instance, "GetDeferredOperationResultKHR");
		GetDeferredOperationResultKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkResult>)getDeferredOperationResultKHR;
		var deferredOperationJoinKHR = GetInstanceProcedureAddress(instance, "DeferredOperationJoinKHR");
		DeferredOperationJoinKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkResult>)deferredOperationJoinKHR;
		var getPipelineExecutablePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPipelineExecutablePropertiesKHR");
		GetPipelineExecutablePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR[], VkResult>)getPipelineExecutablePropertiesKHR;
		GetPipelineExecutablePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoKHR*, ref uint, VkPipelineExecutablePropertiesKHR[], VkResult>)getPipelineExecutablePropertiesKHR;
		GetPipelineExecutablePropertiesKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoKHR, uint*, VkPipelineExecutablePropertiesKHR[], VkResult>)getPipelineExecutablePropertiesKHR;
		GetPipelineExecutablePropertiesKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoKHR, ref uint, VkPipelineExecutablePropertiesKHR[], VkResult>)getPipelineExecutablePropertiesKHR;
		var getPipelineExecutableStatisticsKHR = GetInstanceProcedureAddress(instance, "GetPipelineExecutableStatisticsKHR");
		GetPipelineExecutableStatisticsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR[], VkResult>)getPipelineExecutableStatisticsKHR;
		GetPipelineExecutableStatisticsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, ref uint, VkPipelineExecutableStatisticKHR[], VkResult>)getPipelineExecutableStatisticsKHR;
		GetPipelineExecutableStatisticsKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, uint*, VkPipelineExecutableStatisticKHR[], VkResult>)getPipelineExecutableStatisticsKHR;
		GetPipelineExecutableStatisticsKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, ref uint, VkPipelineExecutableStatisticKHR[], VkResult>)getPipelineExecutableStatisticsKHR;
		var getPipelineExecutableInternalRepresentationsKHR = GetInstanceProcedureAddress(instance, "GetPipelineExecutableInternalRepresentationsKHR");
		GetPipelineExecutableInternalRepresentationsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR[], VkResult>)getPipelineExecutableInternalRepresentationsKHR;
		GetPipelineExecutableInternalRepresentationsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineExecutableInfoKHR*, ref uint, VkPipelineExecutableInternalRepresentationKHR[], VkResult>)getPipelineExecutableInternalRepresentationsKHR;
		GetPipelineExecutableInternalRepresentationsKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, uint*, VkPipelineExecutableInternalRepresentationKHR[], VkResult>)getPipelineExecutableInternalRepresentationsKHR;
		GetPipelineExecutableInternalRepresentationsKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineExecutableInfoKHR, ref uint, VkPipelineExecutableInternalRepresentationKHR[], VkResult>)getPipelineExecutableInternalRepresentationsKHR;
		var releaseSwapchainImagesEXT = GetInstanceProcedureAddress(instance, "ReleaseSwapchainImagesEXT");
		ReleaseSwapchainImagesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkReleaseSwapchainImagesInfoEXT*, VkResult>)releaseSwapchainImagesEXT;
		ReleaseSwapchainImagesEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkReleaseSwapchainImagesInfoEXT, VkResult>)releaseSwapchainImagesEXT;
		var getGeneratedCommandsMemoryRequirementsNV = GetInstanceProcedureAddress(instance, "GetGeneratedCommandsMemoryRequirementsNV");
		GetGeneratedCommandsMemoryRequirementsNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, out VkMemoryRequirements2, void>)getGeneratedCommandsMemoryRequirementsNV;
		GetGeneratedCommandsMemoryRequirementsNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkGeneratedCommandsMemoryRequirementsInfoNV, out VkMemoryRequirements2, void>)getGeneratedCommandsMemoryRequirementsNV;
		var commandPreprocessGeneratedCommandsNV = GetInstanceProcedureAddress(instance, "CommandPreprocessGeneratedCommandsNV");
		CommandPreprocessGeneratedCommandsNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void>)commandPreprocessGeneratedCommandsNV;
		CommandPreprocessGeneratedCommandsNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkGeneratedCommandsInfoNV, void>)commandPreprocessGeneratedCommandsNV;
		var commandExecuteGeneratedCommandsNV = GetInstanceProcedureAddress(instance, "CommandExecuteGeneratedCommandsNV");
		CommandExecuteGeneratedCommandsNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void>)commandExecuteGeneratedCommandsNV;
		CommandExecuteGeneratedCommandsNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, ref VkGeneratedCommandsInfoNV, void>)commandExecuteGeneratedCommandsNV;
		var commandBindPipelineShaderGroupNV = GetInstanceProcedureAddress(instance, "CommandBindPipelineShaderGroupNV");
		CommandBindPipelineShaderGroupNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void>)commandBindPipelineShaderGroupNV;
		var createIndirectCommandsLayoutNV = GetInstanceProcedureAddress(instance, "CreateIndirectCommandsLayoutNV");
		CreateIndirectCommandsLayoutNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNV, VkResult>)createIndirectCommandsLayoutNV;
		CreateIndirectCommandsLayoutNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNV, VkResult>)createIndirectCommandsLayoutNV;
		CreateIndirectCommandsLayoutNV_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNV, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNV, VkResult>)createIndirectCommandsLayoutNV;
		CreateIndirectCommandsLayoutNV_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNV, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNV, VkResult>)createIndirectCommandsLayoutNV;
		var destroyIndirectCommandsLayoutNV = GetInstanceProcedureAddress(instance, "DestroyIndirectCommandsLayoutNV");
		DestroyIndirectCommandsLayoutNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void>)destroyIndirectCommandsLayoutNV;
		DestroyIndirectCommandsLayoutNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNV, ref VkAllocationCallbacks, void>)destroyIndirectCommandsLayoutNV;
		var acquireDrmDisplayEXT = GetInstanceProcedureAddress(instance, "AcquireDrmDisplayEXT");
		AcquireDrmDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, int, VkDisplayKHR, VkResult>)acquireDrmDisplayEXT;
		var getDrmDisplayEXT = GetInstanceProcedureAddress(instance, "GetDrmDisplayEXT");
		GetDrmDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, int, uint, out VkDisplayKHR, VkResult>)getDrmDisplayEXT;
		var createPrivateDataSlotEXT = GetInstanceProcedureAddress(instance, "CreatePrivateDataSlot");
		CreatePrivateDataSlotEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, out VkPrivateDataSlot, void>)createPrivateDataSlotEXT;
		CreatePrivateDataSlotEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, ref VkAllocationCallbacks, out VkPrivateDataSlot, void>)createPrivateDataSlotEXT;
		CreatePrivateDataSlotEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, VkAllocationCallbacks*, out VkPrivateDataSlot, void>)createPrivateDataSlotEXT;
		CreatePrivateDataSlotEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPrivateDataSlotCreateInfo, ref VkAllocationCallbacks, out VkPrivateDataSlot, void>)createPrivateDataSlotEXT;
		var destroyPrivateDataSlotEXT = GetInstanceProcedureAddress(instance, "DestroyPrivateDataSlot");
		DestroyPrivateDataSlotEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)destroyPrivateDataSlotEXT;
		DestroyPrivateDataSlotEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, ref VkAllocationCallbacks, void>)destroyPrivateDataSlotEXT;
		var setPrivateDataEXT = GetInstanceProcedureAddress(instance, "SetPrivateData");
		SetPrivateDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, void>)setPrivateDataEXT;
		var getPrivateDataEXT = GetInstanceProcedureAddress(instance, "GetPrivateData");
		GetPrivateDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, out ulong, void>)getPrivateDataEXT;
		var commandSetEvent2KHR = GetInstanceProcedureAddress(instance, "CommandSetEvent2");
		CommandSetEvent2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)commandSetEvent2KHR;
		CommandSetEvent2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ref VkDependencyInfo, void>)commandSetEvent2KHR;
		var commandResetEvent2KHR = GetInstanceProcedureAddress(instance, "CommandResetEvent2");
		CommandResetEvent2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)commandResetEvent2KHR;
		var commandWaitEvents2KHR = GetInstanceProcedureAddress(instance, "CommandWaitEvents2");
		CommandWaitEvents2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkDependencyInfo[], void>)commandWaitEvents2KHR;
		var commandPipelineBarrier2KHR = GetInstanceProcedureAddress(instance, "CommandPipelineBarrier2");
		CommandPipelineBarrier2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDependencyInfo*, void>)commandPipelineBarrier2KHR;
		CommandPipelineBarrier2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDependencyInfo, void>)commandPipelineBarrier2KHR;
		var commandWriteTimestamp2KHR = GetInstanceProcedureAddress(instance, "CommandWriteTimestamp2");
		CommandWriteTimestamp2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)commandWriteTimestamp2KHR;
		var queueSubmit2KHR = GetInstanceProcedureAddress(instance, "QueueSubmit2");
		QueueSubmit2KHR_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo2[], VkFence, void>)queueSubmit2KHR;
		var commandWriteBufferMarker2AMD = GetInstanceProcedureAddress(instance, "CommandWriteBufferMarker2AMD");
		CommandWriteBufferMarker2AMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint, void>)commandWriteBufferMarker2AMD;
		var getQueueCheckpointData2NV = GetInstanceProcedureAddress(instance, "GetQueueCheckpointData2NV");
		GetQueueCheckpointData2NV_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint*, VkCheckpointData2NV[], void>)getQueueCheckpointData2NV;
		GetQueueCheckpointData2NV_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref uint, VkCheckpointData2NV[], void>)getQueueCheckpointData2NV;
		var getDescriptorSetLayoutSizeEXT = GetInstanceProcedureAddress(instance, "GetDescriptorSetLayoutSizeEXT");
		GetDescriptorSetLayoutSizeEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, out VkDeviceSize, void>)getDescriptorSetLayoutSizeEXT;
		var getDescriptorSetLayoutBindingOffsetEXT = GetInstanceProcedureAddress(instance, "GetDescriptorSetLayoutBindingOffsetEXT");
		GetDescriptorSetLayoutBindingOffsetEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, uint, out VkDeviceSize, void>)getDescriptorSetLayoutBindingOffsetEXT;
		var getDescriptorEXT = GetInstanceProcedureAddress(instance, "GetDescriptorEXT");
		GetDescriptorEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorGetInfoEXT*, nuint, void*, void>)getDescriptorEXT;
		GetDescriptorEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorGetInfoEXT, nuint, void*, void>)getDescriptorEXT;
		var commandBindDescriptorBuffersEXT = GetInstanceProcedureAddress(instance, "CommandBindDescriptorBuffersEXT");
		CommandBindDescriptorBuffersEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkDescriptorBufferBindingInfoEXT[], void>)commandBindDescriptorBuffersEXT;
		var commandSetDescriptorBufferOffsetsEXT = GetInstanceProcedureAddress(instance, "CommandSetDescriptorBufferOffsetsEXT");
		CommandSetDescriptorBufferOffsetsEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, uint*, VkDeviceSize*, void>)commandSetDescriptorBufferOffsetsEXT;
		CommandSetDescriptorBufferOffsetsEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, uint*, ref VkDeviceSize, void>)commandSetDescriptorBufferOffsetsEXT;
		CommandSetDescriptorBufferOffsetsEXT_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, ref uint, VkDeviceSize*, void>)commandSetDescriptorBufferOffsetsEXT;
		CommandSetDescriptorBufferOffsetsEXT_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, ref uint, ref VkDeviceSize, void>)commandSetDescriptorBufferOffsetsEXT;
		var commandBindDescriptorBufferEmbeddedSamplersEXT = GetInstanceProcedureAddress(instance, "CommandBindDescriptorBufferEmbeddedSamplersEXT");
		CommandBindDescriptorBufferEmbeddedSamplersEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, void>)commandBindDescriptorBufferEmbeddedSamplersEXT;
		var getBufferOpaqueCaptureDescriptorDataEXT = GetInstanceProcedureAddress(instance, "GetBufferOpaqueCaptureDescriptorDataEXT");
		GetBufferOpaqueCaptureDescriptorDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferCaptureDescriptorDataInfoEXT*, void*, VkResult>)getBufferOpaqueCaptureDescriptorDataEXT;
		GetBufferOpaqueCaptureDescriptorDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCaptureDescriptorDataInfoEXT, void*, VkResult>)getBufferOpaqueCaptureDescriptorDataEXT;
		var getImageOpaqueCaptureDescriptorDataEXT = GetInstanceProcedureAddress(instance, "GetImageOpaqueCaptureDescriptorDataEXT");
		GetImageOpaqueCaptureDescriptorDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageCaptureDescriptorDataInfoEXT*, void*, VkResult>)getImageOpaqueCaptureDescriptorDataEXT;
		GetImageOpaqueCaptureDescriptorDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCaptureDescriptorDataInfoEXT, void*, VkResult>)getImageOpaqueCaptureDescriptorDataEXT;
		var getImageViewOpaqueCaptureDescriptorDataEXT = GetInstanceProcedureAddress(instance, "GetImageViewOpaqueCaptureDescriptorDataEXT");
		GetImageViewOpaqueCaptureDescriptorDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCaptureDescriptorDataInfoEXT*, void*, VkResult>)getImageViewOpaqueCaptureDescriptorDataEXT;
		GetImageViewOpaqueCaptureDescriptorDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCaptureDescriptorDataInfoEXT, void*, VkResult>)getImageViewOpaqueCaptureDescriptorDataEXT;
		var getSamplerOpaqueCaptureDescriptorDataEXT = GetInstanceProcedureAddress(instance, "GetSamplerOpaqueCaptureDescriptorDataEXT");
		GetSamplerOpaqueCaptureDescriptorDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCaptureDescriptorDataInfoEXT*, void*, VkResult>)getSamplerOpaqueCaptureDescriptorDataEXT;
		GetSamplerOpaqueCaptureDescriptorDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCaptureDescriptorDataInfoEXT, void*, VkResult>)getSamplerOpaqueCaptureDescriptorDataEXT;
		var getAccelerationStructureOpaqueCaptureDescriptorDataEXT = GetInstanceProcedureAddress(instance, "GetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
		GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, VkResult>)getAccelerationStructureOpaqueCaptureDescriptorDataEXT;
		GetAccelerationStructureOpaqueCaptureDescriptorDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAccelerationStructureCaptureDescriptorDataInfoEXT, void*, VkResult>)getAccelerationStructureOpaqueCaptureDescriptorDataEXT;
		var commandSetFragmentShadingRateEnumNV = GetInstanceProcedureAddress(instance, "CommandSetFragmentShadingRateEnumNV");
		CommandSetFragmentShadingRateEnumNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR, void>)commandSetFragmentShadingRateEnumNV;
		var commandDrawMeshTasksEXT = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksEXT");
		CommandDrawMeshTasksEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)commandDrawMeshTasksEXT;
		var commandDrawMeshTasksIndirectEXT = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksIndirectEXT");
		CommandDrawMeshTasksIndirectEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawMeshTasksIndirectEXT;
		var commandDrawMeshTasksIndirectCountEXT = GetInstanceProcedureAddress(instance, "CommandDrawMeshTasksIndirectCountEXT");
		CommandDrawMeshTasksIndirectCountEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawMeshTasksIndirectCountEXT;
		var commandCopyBuffer2KHR = GetInstanceProcedureAddress(instance, "CommandCopyBuffer2");
		CommandCopyBuffer2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferInfo2*, void>)commandCopyBuffer2KHR;
		CommandCopyBuffer2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferInfo2, void>)commandCopyBuffer2KHR;
		var commandCopyImage2KHR = GetInstanceProcedureAddress(instance, "CommandCopyImage2");
		CommandCopyImage2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageInfo2*, void>)commandCopyImage2KHR;
		CommandCopyImage2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageInfo2, void>)commandCopyImage2KHR;
		var commandCopyBufferToImage2KHR = GetInstanceProcedureAddress(instance, "CommandCopyBufferToImage2");
		CommandCopyBufferToImage2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)commandCopyBufferToImage2KHR;
		CommandCopyBufferToImage2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyBufferToImageInfo2, void>)commandCopyBufferToImage2KHR;
		var commandCopyImageToBuffer2KHR = GetInstanceProcedureAddress(instance, "CommandCopyImageToBuffer2");
		CommandCopyImageToBuffer2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)commandCopyImageToBuffer2KHR;
		CommandCopyImageToBuffer2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyImageToBufferInfo2, void>)commandCopyImageToBuffer2KHR;
		var commandBlitImage2KHR = GetInstanceProcedureAddress(instance, "CommandBlitImage2");
		CommandBlitImage2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBlitImageInfo2*, void>)commandBlitImage2KHR;
		CommandBlitImage2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkBlitImageInfo2, void>)commandBlitImage2KHR;
		var commandResolveImage2KHR = GetInstanceProcedureAddress(instance, "CommandResolveImage2");
		CommandResolveImage2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResolveImageInfo2*, void>)commandResolveImage2KHR;
		CommandResolveImage2KHR_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkResolveImageInfo2, void>)commandResolveImage2KHR;
		var getImageSubresourceLayout2EXT = GetInstanceProcedureAddress(instance, "GetImageSubresourceLayout2EXT");
		GetImageSubresourceLayout2EXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource2EXT*, out VkSubresourceLayout2EXT, void>)getImageSubresourceLayout2EXT;
		GetImageSubresourceLayout2EXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource2EXT, out VkSubresourceLayout2EXT, void>)getImageSubresourceLayout2EXT;
		var getDeviceFaultInfoEXT = GetInstanceProcedureAddress(instance, "GetDeviceFaultInfoEXT");
		GetDeviceFaultInfoEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceFaultCountsEXT*, out VkDeviceFaultInfoEXT, VkResult>)getDeviceFaultInfoEXT;
		GetDeviceFaultInfoEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceFaultCountsEXT, out VkDeviceFaultInfoEXT, VkResult>)getDeviceFaultInfoEXT;
		var acquireWinrtDisplayNV = GetInstanceProcedureAddress(instance, "AcquireWinrtDisplayNV");
		AcquireWinrtDisplayNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult>)acquireWinrtDisplayNV;
		var getWinrtDisplayNV = GetInstanceProcedureAddress(instance, "GetWinrtDisplayNV");
		GetWinrtDisplayNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, out VkDisplayKHR, VkResult>)getWinrtDisplayNV;
		var commandSetVertexInputEXT = GetInstanceProcedureAddress(instance, "CommandSetVertexInputEXT");
		CommandSetVertexInputEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkVertexInputBindingDescription2EXT[], uint, VkVertexInputAttributeDescription2EXT[], void>)commandSetVertexInputEXT;
		var getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = GetInstanceProcedureAddress(instance, "GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
		GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, VkResult>)getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
		var commandSubpassShadingHUAWEI = GetInstanceProcedureAddress(instance, "CommandSubpassShadingHUAWEI");
		CommandSubpassShadingHUAWEI_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandSubpassShadingHUAWEI;
		var commandBindInvocationMaskHUAWEI = GetInstanceProcedureAddress(instance, "CommandBindInvocationMaskHUAWEI");
		CommandBindInvocationMaskHUAWEI_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImageView, VkImageLayout, void>)commandBindInvocationMaskHUAWEI;
		var getMemoryRemoteAddressNV = GetInstanceProcedureAddress(instance, "GetMemoryRemoteAddressNV");
		GetMemoryRemoteAddressNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetRemoteAddressInfoNV*, out IntPtr, VkResult>)getMemoryRemoteAddressNV;
		GetMemoryRemoteAddressNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetRemoteAddressInfoNV, out IntPtr, VkResult>)getMemoryRemoteAddressNV;
		var getPipelinePropertiesEXT = GetInstanceProcedureAddress(instance, "GetPipelinePropertiesEXT");
		GetPipelinePropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineInfoEXT*, out VkBaseOutStructure, VkResult>)getPipelinePropertiesEXT;
		GetPipelinePropertiesEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineInfoEXT, out VkBaseOutStructure, VkResult>)getPipelinePropertiesEXT;
		var commandSetPatchControlPointsEXT = GetInstanceProcedureAddress(instance, "CommandSetPatchControlPointsEXT");
		CommandSetPatchControlPointsEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetPatchControlPointsEXT;
		var commandSetRasterizerDiscardEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetRasterizerDiscardEnable");
		CommandSetRasterizerDiscardEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetRasterizerDiscardEnableEXT;
		var commandSetDepthBiasEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthBiasEnable");
		CommandSetDepthBiasEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthBiasEnableEXT;
		var commandSetLogicOpEXT = GetInstanceProcedureAddress(instance, "CommandSetLogicOpEXT");
		CommandSetLogicOpEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkLogicOp, void>)commandSetLogicOpEXT;
		var commandSetPrimitiveRestartEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetPrimitiveRestartEnable");
		CommandSetPrimitiveRestartEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetPrimitiveRestartEnableEXT;
		var commandSetColorWriteEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetColorWriteEnableEXT");
		CommandSetColorWriteEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkBool32*, void>)commandSetColorWriteEnableEXT;
		CommandSetColorWriteEnableEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkBool32, void>)commandSetColorWriteEnableEXT;
		var commandTraceRaysIndirect2KHR = GetInstanceProcedureAddress(instance, "CommandTraceRaysIndirect2KHR");
		CommandTraceRaysIndirect2KHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, void>)commandTraceRaysIndirect2KHR;
		var commandDrawMultiEXT = GetInstanceProcedureAddress(instance, "CommandDrawMultiEXT");
		CommandDrawMultiEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawInfoEXT*, uint, uint, uint, void>)commandDrawMultiEXT;
		CommandDrawMultiEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawInfoEXT, uint, uint, uint, void>)commandDrawMultiEXT;
		var commandDrawMultiIndexedEXT = GetInstanceProcedureAddress(instance, "CommandDrawMultiIndexedEXT");
		CommandDrawMultiIndexedEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void>)commandDrawMultiIndexedEXT;
		CommandDrawMultiIndexedEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, ref int, void>)commandDrawMultiIndexedEXT;
		CommandDrawMultiIndexedEXT_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawIndexedInfoEXT, uint, uint, uint, int*, void>)commandDrawMultiIndexedEXT;
		CommandDrawMultiIndexedEXT_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkMultiDrawIndexedInfoEXT, uint, uint, uint, ref int, void>)commandDrawMultiIndexedEXT;
		var createMicromapEXT = GetInstanceProcedureAddress(instance, "CreateMicromapEXT");
		CreateMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, out VkMicromapEXT, VkResult>)createMicromapEXT;
		CreateMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkMicromapCreateInfoEXT*, ref VkAllocationCallbacks, out VkMicromapEXT, VkResult>)createMicromapEXT;
		CreateMicromapEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapCreateInfoEXT, VkAllocationCallbacks*, out VkMicromapEXT, VkResult>)createMicromapEXT;
		CreateMicromapEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapCreateInfoEXT, ref VkAllocationCallbacks, out VkMicromapEXT, VkResult>)createMicromapEXT;
		var destroyMicromapEXT = GetInstanceProcedureAddress(instance, "DestroyMicromapEXT");
		DestroyMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMicromapEXT, VkAllocationCallbacks*, void>)destroyMicromapEXT;
		DestroyMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkMicromapEXT, ref VkAllocationCallbacks, void>)destroyMicromapEXT;
		var commandBuildMicromapsEXT = GetInstanceProcedureAddress(instance, "CommandBuildMicromapsEXT");
		CommandBuildMicromapsEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMicromapBuildInfoEXT[], void>)commandBuildMicromapsEXT;
		var buildMicromapsEXT = GetInstanceProcedureAddress(instance, "BuildMicromapsEXT");
		BuildMicromapsEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, uint, VkMicromapBuildInfoEXT[], VkResult>)buildMicromapsEXT;
		var copyMicromapEXT = GetInstanceProcedureAddress(instance, "CopyMicromapEXT");
		CopyMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMicromapInfoEXT*, VkResult>)copyMicromapEXT;
		CopyMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMicromapInfoEXT, VkResult>)copyMicromapEXT;
		var copyMicromapToMemoryEXT = GetInstanceProcedureAddress(instance, "CopyMicromapToMemoryEXT");
		CopyMicromapToMemoryEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMicromapToMemoryInfoEXT*, VkResult>)copyMicromapToMemoryEXT;
		CopyMicromapToMemoryEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMicromapToMemoryInfoEXT, VkResult>)copyMicromapToMemoryEXT;
		var copyMemoryToMicromapEXT = GetInstanceProcedureAddress(instance, "CopyMemoryToMicromapEXT");
		CopyMemoryToMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToMicromapInfoEXT*, VkResult>)copyMemoryToMicromapEXT;
		CopyMemoryToMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeferredOperationKHR, ref VkCopyMemoryToMicromapInfoEXT, VkResult>)copyMemoryToMicromapEXT;
		var writeMicromapsPropertiesEXT = GetInstanceProcedureAddress(instance, "WriteMicromapsPropertiesEXT");
		WriteMicromapsPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkMicromapEXT[], VkQueryType, nuint, void*, nuint, VkResult>)writeMicromapsPropertiesEXT;
		var commandCopyMicromapEXT = GetInstanceProcedureAddress(instance, "CommandCopyMicromapEXT");
		CommandCopyMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMicromapInfoEXT*, void>)commandCopyMicromapEXT;
		CommandCopyMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMicromapInfoEXT, void>)commandCopyMicromapEXT;
		var commandCopyMicromapToMemoryEXT = GetInstanceProcedureAddress(instance, "CommandCopyMicromapToMemoryEXT");
		CommandCopyMicromapToMemoryEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMicromapToMemoryInfoEXT*, void>)commandCopyMicromapToMemoryEXT;
		CommandCopyMicromapToMemoryEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMicromapToMemoryInfoEXT, void>)commandCopyMicromapToMemoryEXT;
		var commandCopyMemoryToMicromapEXT = GetInstanceProcedureAddress(instance, "CommandCopyMemoryToMicromapEXT");
		CommandCopyMemoryToMicromapEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyMemoryToMicromapInfoEXT*, void>)commandCopyMemoryToMicromapEXT;
		CommandCopyMemoryToMicromapEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCopyMemoryToMicromapInfoEXT, void>)commandCopyMemoryToMicromapEXT;
		var commandWriteMicromapsPropertiesEXT = GetInstanceProcedureAddress(instance, "CommandWriteMicromapsPropertiesEXT");
		CommandWriteMicromapsPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkMicromapEXT[], VkQueryType, VkQueryPool, uint, void>)commandWriteMicromapsPropertiesEXT;
		var getDeviceMicromapCompatibilityEXT = GetInstanceProcedureAddress(instance, "GetDeviceMicromapCompatibilityEXT");
		GetDeviceMicromapCompatibilityEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMicromapVersionInfoEXT*, out VkAccelerationStructureCompatibilityKHR, void>)getDeviceMicromapCompatibilityEXT;
		GetDeviceMicromapCompatibilityEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMicromapVersionInfoEXT, out VkAccelerationStructureCompatibilityKHR, void>)getDeviceMicromapCompatibilityEXT;
		var getMicromapBuildSizesEXT = GetInstanceProcedureAddress(instance, "GetMicromapBuildSizesEXT");
		GetMicromapBuildSizesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, VkMicromapBuildInfoEXT*, out VkMicromapBuildSizesInfoEXT, void>)getMicromapBuildSizesEXT;
		GetMicromapBuildSizesEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkAccelerationStructureBuildTypeKHR, ref VkMicromapBuildInfoEXT, out VkMicromapBuildSizesInfoEXT, void>)getMicromapBuildSizesEXT;
		var commandDrawClusterHUAWEI = GetInstanceProcedureAddress(instance, "CommandDrawClusterHUAWEI");
		CommandDrawClusterHUAWEI_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)commandDrawClusterHUAWEI;
		var commandDrawClusterIndirectHUAWEI = GetInstanceProcedureAddress(instance, "CommandDrawClusterIndirectHUAWEI");
		CommandDrawClusterIndirectHUAWEI_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)commandDrawClusterIndirectHUAWEI;
		var setDeviceMemoryPriorityEXT = GetInstanceProcedureAddress(instance, "SetDeviceMemoryPriorityEXT");
		SetDeviceMemoryPriorityEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, float, void>)setDeviceMemoryPriorityEXT;
		var getDeviceBufferMemoryRequirementsKHR = GetInstanceProcedureAddress(instance, "GetDeviceBufferMemoryRequirements");
		GetDeviceBufferMemoryRequirementsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceBufferMemoryRequirements*, out VkMemoryRequirements2, void>)getDeviceBufferMemoryRequirementsKHR;
		GetDeviceBufferMemoryRequirementsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceBufferMemoryRequirements, out VkMemoryRequirements2, void>)getDeviceBufferMemoryRequirementsKHR;
		var getDeviceImageMemoryRequirementsKHR = GetInstanceProcedureAddress(instance, "GetDeviceImageMemoryRequirements");
		GetDeviceImageMemoryRequirementsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, out VkMemoryRequirements2, void>)getDeviceImageMemoryRequirementsKHR;
		GetDeviceImageMemoryRequirementsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, out VkMemoryRequirements2, void>)getDeviceImageMemoryRequirementsKHR;
		var getDeviceImageSparseMemoryRequirementsKHR = GetInstanceProcedureAddress(instance, "GetDeviceImageSparseMemoryRequirements");
		GetDeviceImageSparseMemoryRequirementsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirementsKHR;
		GetDeviceImageSparseMemoryRequirementsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, ref uint, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirementsKHR;
		GetDeviceImageSparseMemoryRequirementsKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, uint*, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirementsKHR;
		GetDeviceImageSparseMemoryRequirementsKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceImageMemoryRequirements, ref uint, VkSparseImageMemoryRequirements2[], void>)getDeviceImageSparseMemoryRequirementsKHR;
		var getDescriptorSetLayoutHostMappingInfoVALVE = GetInstanceProcedureAddress(instance, "GetDescriptorSetLayoutHostMappingInfoVALVE");
		GetDescriptorSetLayoutHostMappingInfoVALVE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetBindingReferenceVALVE*, out VkDescriptorSetLayoutHostMappingInfoVALVE, void>)getDescriptorSetLayoutHostMappingInfoVALVE;
		GetDescriptorSetLayoutHostMappingInfoVALVE_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetBindingReferenceVALVE, out VkDescriptorSetLayoutHostMappingInfoVALVE, void>)getDescriptorSetLayoutHostMappingInfoVALVE;
		var getDescriptorSetHostMappingVALVE = GetInstanceProcedureAddress(instance, "GetDescriptorSetHostMappingVALVE");
		GetDescriptorSetHostMappingVALVE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, void**, void>)getDescriptorSetHostMappingVALVE;
		var commandCopyMemoryIndirectNV = GetInstanceProcedureAddress(instance, "CommandCopyMemoryIndirectNV");
		CommandCopyMemoryIndirectNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, void>)commandCopyMemoryIndirectNV;
		var commandCopyMemoryToImageIndirectNV = GetInstanceProcedureAddress(instance, "CommandCopyMemoryToImageIndirectNV");
		CommandCopyMemoryToImageIndirectNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, VkImage, VkImageLayout, VkImageSubresourceLayers*, void>)commandCopyMemoryToImageIndirectNV;
		CommandCopyMemoryToImageIndirectNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, uint, uint, VkImage, VkImageLayout, ref VkImageSubresourceLayers, void>)commandCopyMemoryToImageIndirectNV;
		var commandDecompressMemoryNV = GetInstanceProcedureAddress(instance, "CommandDecompressMemoryNV");
		CommandDecompressMemoryNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkDecompressMemoryRegionNV*, void>)commandDecompressMemoryNV;
		CommandDecompressMemoryNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref VkDecompressMemoryRegionNV, void>)commandDecompressMemoryNV;
		var commandDecompressMemoryIndirectCountNV = GetInstanceProcedureAddress(instance, "CommandDecompressMemoryIndirectCountNV");
		CommandDecompressMemoryIndirectCountNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, uint, void>)commandDecompressMemoryIndirectCountNV;
		var commandSetTessellationDomainOriginEXT = GetInstanceProcedureAddress(instance, "CommandSetTessellationDomainOriginEXT");
		CommandSetTessellationDomainOriginEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkTessellationDomainOrigin, void>)commandSetTessellationDomainOriginEXT;
		var commandSetDepthClampEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthClampEnableEXT");
		CommandSetDepthClampEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthClampEnableEXT;
		var commandSetPolygonModeEXT = GetInstanceProcedureAddress(instance, "CommandSetPolygonModeEXT");
		CommandSetPolygonModeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPolygonMode, void>)commandSetPolygonModeEXT;
		var commandSetRasterizationSamplesEXT = GetInstanceProcedureAddress(instance, "CommandSetRasterizationSamplesEXT");
		CommandSetRasterizationSamplesEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, void>)commandSetRasterizationSamplesEXT;
		var commandSetSampleMaskEXT = GetInstanceProcedureAddress(instance, "CommandSetSampleMaskEXT");
		CommandSetSampleMaskEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, uint*, void>)commandSetSampleMaskEXT;
		CommandSetSampleMaskEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleCountFlags, ref uint, void>)commandSetSampleMaskEXT;
		var commandSetAlphaToCoverageEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetAlphaToCoverageEnableEXT");
		CommandSetAlphaToCoverageEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetAlphaToCoverageEnableEXT;
		var commandSetAlphaToOneEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetAlphaToOneEnableEXT");
		CommandSetAlphaToOneEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetAlphaToOneEnableEXT;
		var commandSetLogicOpEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetLogicOpEnableEXT");
		CommandSetLogicOpEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetLogicOpEnableEXT;
		var commandSetColorBlendEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetColorBlendEnableEXT");
		CommandSetColorBlendEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBool32*, void>)commandSetColorBlendEnableEXT;
		CommandSetColorBlendEnableEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBool32, void>)commandSetColorBlendEnableEXT;
		var commandSetColorBlendEquationEXT = GetInstanceProcedureAddress(instance, "CommandSetColorBlendEquationEXT");
		CommandSetColorBlendEquationEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorBlendEquationEXT*, void>)commandSetColorBlendEquationEXT;
		CommandSetColorBlendEquationEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorBlendEquationEXT, void>)commandSetColorBlendEquationEXT;
		var commandSetColorWriteMaskEXT = GetInstanceProcedureAddress(instance, "CommandSetColorWriteMaskEXT");
		CommandSetColorWriteMaskEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorComponentFlags*, void>)commandSetColorWriteMaskEXT;
		CommandSetColorWriteMaskEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorComponentFlags, void>)commandSetColorWriteMaskEXT;
		var commandSetRasterizationStreamEXT = GetInstanceProcedureAddress(instance, "CommandSetRasterizationStreamEXT");
		CommandSetRasterizationStreamEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetRasterizationStreamEXT;
		var commandSetConservativeRasterizationModeEXT = GetInstanceProcedureAddress(instance, "CommandSetConservativeRasterizationModeEXT");
		CommandSetConservativeRasterizationModeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkConservativeRasterizationModeEXT, void>)commandSetConservativeRasterizationModeEXT;
		var commandSetExtraPrimitiveOverestimationSizeEXT = GetInstanceProcedureAddress(instance, "CommandSetExtraPrimitiveOverestimationSizeEXT");
		CommandSetExtraPrimitiveOverestimationSizeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)commandSetExtraPrimitiveOverestimationSizeEXT;
		var commandSetDepthClipEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthClipEnableEXT");
		CommandSetDepthClipEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthClipEnableEXT;
		var commandSetSampleLocationsEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetSampleLocationsEnableEXT");
		CommandSetSampleLocationsEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetSampleLocationsEnableEXT;
		var commandSetColorBlendAdvancedEXT = GetInstanceProcedureAddress(instance, "CommandSetColorBlendAdvancedEXT");
		CommandSetColorBlendAdvancedEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkColorBlendAdvancedEXT*, void>)commandSetColorBlendAdvancedEXT;
		CommandSetColorBlendAdvancedEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkColorBlendAdvancedEXT, void>)commandSetColorBlendAdvancedEXT;
		var commandSetProvokingVertexModeEXT = GetInstanceProcedureAddress(instance, "CommandSetProvokingVertexModeEXT");
		CommandSetProvokingVertexModeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkProvokingVertexModeEXT, void>)commandSetProvokingVertexModeEXT;
		var commandSetLineRasterizationModeEXT = GetInstanceProcedureAddress(instance, "CommandSetLineRasterizationModeEXT");
		CommandSetLineRasterizationModeEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkLineRasterizationModeEXT, void>)commandSetLineRasterizationModeEXT;
		var commandSetLineStippleEnableEXT = GetInstanceProcedureAddress(instance, "CommandSetLineStippleEnableEXT");
		CommandSetLineStippleEnableEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetLineStippleEnableEXT;
		var commandSetDepthClipNegativeOneToOneEXT = GetInstanceProcedureAddress(instance, "CommandSetDepthClipNegativeOneToOneEXT");
		CommandSetDepthClipNegativeOneToOneEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetDepthClipNegativeOneToOneEXT;
		var commandSetViewportWScalingEnableNV = GetInstanceProcedureAddress(instance, "CommandSetViewportWScalingEnableNV");
		CommandSetViewportWScalingEnableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetViewportWScalingEnableNV;
		var commandSetViewportSwizzleNV = GetInstanceProcedureAddress(instance, "CommandSetViewportSwizzleNV");
		CommandSetViewportSwizzleNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportSwizzleNV*, void>)commandSetViewportSwizzleNV;
		CommandSetViewportSwizzleNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportSwizzleNV, void>)commandSetViewportSwizzleNV;
		var commandSetCoverageToColorEnableNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageToColorEnableNV");
		CommandSetCoverageToColorEnableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetCoverageToColorEnableNV;
		var commandSetCoverageToColorLocationNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageToColorLocationNV");
		CommandSetCoverageToColorLocationNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetCoverageToColorLocationNV;
		var commandSetCoverageModulationModeNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageModulationModeNV");
		CommandSetCoverageModulationModeNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoverageModulationModeNV, void>)commandSetCoverageModulationModeNV;
		var commandSetCoverageModulationTableEnableNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageModulationTableEnableNV");
		CommandSetCoverageModulationTableEnableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetCoverageModulationTableEnableNV;
		var commandSetCoverageModulationTableNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageModulationTableNV");
		CommandSetCoverageModulationTableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, float*, void>)commandSetCoverageModulationTableNV;
		CommandSetCoverageModulationTableNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ref float, void>)commandSetCoverageModulationTableNV;
		var commandSetShadingRateImageEnableNV = GetInstanceProcedureAddress(instance, "CommandSetShadingRateImageEnableNV");
		CommandSetShadingRateImageEnableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetShadingRateImageEnableNV;
		var commandSetRepresentativeFragmentTestEnableNV = GetInstanceProcedureAddress(instance, "CommandSetRepresentativeFragmentTestEnableNV");
		CommandSetRepresentativeFragmentTestEnableNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)commandSetRepresentativeFragmentTestEnableNV;
		var commandSetCoverageReductionModeNV = GetInstanceProcedureAddress(instance, "CommandSetCoverageReductionModeNV");
		CommandSetCoverageReductionModeNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCoverageReductionModeNV, void>)commandSetCoverageReductionModeNV;
		var getShaderModuleIdentifierEXT = GetInstanceProcedureAddress(instance, "GetShaderModuleIdentifierEXT");
		GetShaderModuleIdentifierEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, out VkShaderModuleIdentifierEXT, void>)getShaderModuleIdentifierEXT;
		var getShaderModuleCreateInfoIdentifierEXT = GetInstanceProcedureAddress(instance, "GetShaderModuleCreateInfoIdentifierEXT");
		GetShaderModuleCreateInfoIdentifierEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, out VkShaderModuleIdentifierEXT, void>)getShaderModuleCreateInfoIdentifierEXT;
		GetShaderModuleCreateInfoIdentifierEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, out VkShaderModuleIdentifierEXT, void>)getShaderModuleCreateInfoIdentifierEXT;
		var getPhysicalDeviceOpticalFlowImageFormatsNV = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceOpticalFlowImageFormatsNV");
		GetPhysicalDeviceOpticalFlowImageFormatsNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, uint*, VkOpticalFlowImageFormatPropertiesNV[], VkResult>)getPhysicalDeviceOpticalFlowImageFormatsNV;
		GetPhysicalDeviceOpticalFlowImageFormatsNV_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, ref uint, VkOpticalFlowImageFormatPropertiesNV[], VkResult>)getPhysicalDeviceOpticalFlowImageFormatsNV;
		GetPhysicalDeviceOpticalFlowImageFormatsNV_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkOpticalFlowImageFormatInfoNV, uint*, VkOpticalFlowImageFormatPropertiesNV[], VkResult>)getPhysicalDeviceOpticalFlowImageFormatsNV;
		GetPhysicalDeviceOpticalFlowImageFormatsNV_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkOpticalFlowImageFormatInfoNV, ref uint, VkOpticalFlowImageFormatPropertiesNV[], VkResult>)getPhysicalDeviceOpticalFlowImageFormatsNV;
		var createOpticalFlowSessionNV = GetInstanceProcedureAddress(instance, "CreateOpticalFlowSessionNV");
		CreateOpticalFlowSessionNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, out VkOpticalFlowSessionNV, VkResult>)createOpticalFlowSessionNV;
		CreateOpticalFlowSessionNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionCreateInfoNV*, ref VkAllocationCallbacks, out VkOpticalFlowSessionNV, VkResult>)createOpticalFlowSessionNV;
		CreateOpticalFlowSessionNV_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkOpticalFlowSessionCreateInfoNV, VkAllocationCallbacks*, out VkOpticalFlowSessionNV, VkResult>)createOpticalFlowSessionNV;
		CreateOpticalFlowSessionNV_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkOpticalFlowSessionCreateInfoNV, ref VkAllocationCallbacks, out VkOpticalFlowSessionNV, VkResult>)createOpticalFlowSessionNV;
		var destroyOpticalFlowSessionNV = GetInstanceProcedureAddress(instance, "DestroyOpticalFlowSessionNV");
		DestroyOpticalFlowSessionNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, VkAllocationCallbacks*, void>)destroyOpticalFlowSessionNV;
		DestroyOpticalFlowSessionNV_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, ref VkAllocationCallbacks, void>)destroyOpticalFlowSessionNV;
		var bindOpticalFlowSessionImageNV = GetInstanceProcedureAddress(instance, "BindOpticalFlowSessionImageNV");
		BindOpticalFlowSessionImageNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout, VkResult>)bindOpticalFlowSessionImageNV;
		var commandOpticalFlowExecuteNV = GetInstanceProcedureAddress(instance, "CommandOpticalFlowExecuteNV");
		CommandOpticalFlowExecuteNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkOpticalFlowSessionNV, VkOpticalFlowExecuteInfoNV*, void>)commandOpticalFlowExecuteNV;
		CommandOpticalFlowExecuteNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkOpticalFlowSessionNV, ref VkOpticalFlowExecuteInfoNV, void>)commandOpticalFlowExecuteNV;
		var getFramebufferTilePropertiesQCOM = GetInstanceProcedureAddress(instance, "GetFramebufferTilePropertiesQCOM");
		GetFramebufferTilePropertiesQCOM_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, uint*, VkTilePropertiesQCOM[], VkResult>)getFramebufferTilePropertiesQCOM;
		GetFramebufferTilePropertiesQCOM_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref uint, VkTilePropertiesQCOM[], VkResult>)getFramebufferTilePropertiesQCOM;
		var getDynamicRenderingTilePropertiesQCOM = GetInstanceProcedureAddress(instance, "GetDynamicRenderingTilePropertiesQCOM");
		GetDynamicRenderingTilePropertiesQCOM_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderingInfo*, out VkTilePropertiesQCOM, VkResult>)getDynamicRenderingTilePropertiesQCOM;
		GetDynamicRenderingTilePropertiesQCOM_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderingInfo, out VkTilePropertiesQCOM, VkResult>)getDynamicRenderingTilePropertiesQCOM;
	}
}

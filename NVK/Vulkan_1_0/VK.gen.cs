// This file was generated, don't manually edit
namespace Vulkan_1_0;

public static unsafe class VK
{
	public const float LodClampNone = 1000F;
	public const uint RemainingMipLevels = ~0U;
	public const uint RemainingArrayLayers = ~0U;
	public const ulong WholeSize = ~0UL;
	public const uint AttachmentUnused = ~0U;
	public const uint True = 1;
	public const uint False = 0;
	public const uint QueueFamilyIgnored = ~0U;
	public const uint SubpassExternal = ~0U;
	public const uint MaxPhysicalDeviceNameSize = 256;
	public const uint UuidSize = 16;
	public const uint MaxMemoryTypes = 32;
	public const uint MaxMemoryHeaps = 16;
	public const uint MaxExtensionNameSize = 256;
	public const uint MaxDescriptionSize = 256;
	public const uint KhrSurfaceSpecVersion = 25;
	public const string KhrSurfaceExtensionName = "VK_KHR_surface";
	public const uint KhrSwapchainSpecVersion = 68;
	public const string KhrSwapchainExtensionName = "VK_KHR_swapchain";
	public const uint KhrDisplaySpecVersion = 21;
	public const string KhrDisplayExtensionName = "VK_KHR_display";
	public const uint KhrDisplaySwapchainSpecVersion = 9;
	public const string KhrDisplaySwapchainExtensionName = "VK_KHR_display_swapchain";
	public const uint KhrXlibSurfaceSpecVersion = 6;
	public const string KhrXlibSurfaceExtensionName = "VK_KHR_xlib_surface";
	public const uint KhrXcbSurfaceSpecVersion = 6;
	public const string KhrXcbSurfaceExtensionName = "VK_KHR_xcb_surface";
	public const uint KhrWaylandSurfaceSpecVersion = 6;
	public const string KhrWaylandSurfaceExtensionName = "VK_KHR_wayland_surface";
	public const uint KhrAndroidSurfaceSpecVersion = 6;
	public const string KhrAndroidSurfaceExtensionName = "VK_KHR_android_surface";
	public const uint KhrWin32SurfaceSpecVersion = 6;
	public const string KhrWin32SurfaceExtensionName = "VK_KHR_win32_surface";
	public const uint ExtDebugReportSpecVersion = 9;
	public const string ExtDebugReportExtensionName = "VK_EXT_debug_report";
	public const uint NvGlslShaderSpecVersion = 1;
	public const string NvGlslShaderExtensionName = "VK_NV_glsl_shader";
	public const uint ExtDepthRangeUnrestrictedSpecVersion = 1;
	public const string ExtDepthRangeUnrestrictedExtensionName = "VK_EXT_depth_range_unrestricted";
	public const uint KhrSamplerMirrorClampToEdgeSpecVersion = 1;
	public const string KhrSamplerMirrorClampToEdgeExtensionName = "VK_KHR_sampler_mirror_clamp_to_edge";
	public const uint ImgFilterCubicSpecVersion = 1;
	public const string ImgFilterCubicExtensionName = "VK_IMG_filter_cubic";
	public const uint AmdRasterizationOrderSpecVersion = 1;
	public const string AmdRasterizationOrderExtensionName = "VK_AMD_rasterization_order";
	public const uint AmdShaderTrinaryMinmaxSpecVersion = 1;
	public const string AmdShaderTrinaryMinmaxExtensionName = "VK_AMD_shader_trinary_minmax";
	public const uint AmdShaderExplicitVertexParameterSpecVersion = 1;
	public const string AmdShaderExplicitVertexParameterExtensionName = "VK_AMD_shader_explicit_vertex_parameter";
	public const uint ExtDebugMarkerSpecVersion = 4;
	public const string ExtDebugMarkerExtensionName = "VK_EXT_debug_marker";
	public const uint AmdGcnShaderSpecVersion = 1;
	public const string AmdGcnShaderExtensionName = "VK_AMD_gcn_shader";
	public const uint NvDedicatedAllocationSpecVersion = 1;
	public const string NvDedicatedAllocationExtensionName = "VK_NV_dedicated_allocation";
	public const uint AmdDrawIndirectCountSpecVersion = 1;
	public const string AmdDrawIndirectCountExtensionName = "VK_AMD_draw_indirect_count";
	public const uint AmdNegativeViewportHeightSpecVersion = 1;
	public const string AmdNegativeViewportHeightExtensionName = "VK_AMD_negative_viewport_height";
	public const uint AmdGpuShaderHalfFloatSpecVersion = 1;
	public const string AmdGpuShaderHalfFloatExtensionName = "VK_AMD_gpu_shader_half_float";
	public const uint AmdShaderBallotSpecVersion = 1;
	public const string AmdShaderBallotExtensionName = "VK_AMD_shader_ballot";
	public const uint AmdTextureGatherBiasLodSpecVersion = 1;
	public const string AmdTextureGatherBiasLodExtensionName = "VK_AMD_texture_gather_bias_lod";
	public const uint AmdShaderInfoSpecVersion = 1;
	public const string AmdShaderInfoExtensionName = "VK_AMD_shader_info";
	public const uint AmdShaderImageLoadStoreLodSpecVersion = 1;
	public const string AmdShaderImageLoadStoreLodExtensionName = "VK_AMD_shader_image_load_store_lod";
	public const uint KhxMultiviewSpecVersion = 1;
	public const string KhxMultiviewExtensionName = "VK_KHX_multiview";
	public const uint ImgFormatPvrtcSpecVersion = 1;
	public const string ImgFormatPvrtcExtensionName = "VK_IMG_format_pvrtc";
	public const uint NvExternalMemoryCapabilitiesSpecVersion = 1;
	public const string NvExternalMemoryCapabilitiesExtensionName = "VK_NV_external_memory_capabilities";
	public const uint NvExternalMemorySpecVersion = 1;
	public const string NvExternalMemoryExtensionName = "VK_NV_external_memory";
	public const uint NvExternalMemoryWin32SpecVersion = 1;
	public const string NvExternalMemoryWin32ExtensionName = "VK_NV_external_memory_win32";
	public const uint NvWin32KeyedMutexSpecVersion = 1;
	public const string NvWin32KeyedMutexExtensionName = "VK_NV_win32_keyed_mutex";
	public const uint KhrGetPhysicalDeviceProperties2SpecVersion = 1;
	public const string KhrGetPhysicalDeviceProperties2ExtensionName = "VK_KHR_get_physical_device_properties2";
	public const uint KhxDeviceGroupSpecVersion = 2;
	public const string KhxDeviceGroupExtensionName = "VK_KHX_device_group";
	public const uint MaxDeviceGroupSizeKhx = 32;
	public const uint ExtValidationFlagsSpecVersion = 1;
	public const string ExtValidationFlagsExtensionName = "VK_EXT_validation_flags";
	public const uint NnViSurfaceSpecVersion = 1;
	public const string NnViSurfaceExtensionName = "VK_NN_vi_surface";
	public const uint KhrShaderDrawParametersSpecVersion = 1;
	public const string KhrShaderDrawParametersExtensionName = "VK_KHR_shader_draw_parameters";
	public const uint ExtShaderSubgroupBallotSpecVersion = 1;
	public const string ExtShaderSubgroupBallotExtensionName = "VK_EXT_shader_subgroup_ballot";
	public const uint ExtShaderSubgroupVoteSpecVersion = 1;
	public const string ExtShaderSubgroupVoteExtensionName = "VK_EXT_shader_subgroup_vote";
	public const uint KhrMaintenance1SpecVersion = 1;
	public const string KhrMaintenance1ExtensionName = "VK_KHR_maintenance1";
	public const uint KhxDeviceGroupCreationSpecVersion = 1;
	public const string KhxDeviceGroupCreationExtensionName = "VK_KHX_device_group_creation";
	public const uint LuidSizeKhr = 8;
	public const uint KhrExternalMemoryCapabilitiesSpecVersion = 1;
	public const string KhrExternalMemoryCapabilitiesExtensionName = "VK_KHR_external_memory_capabilities";
	public const uint QueueFamilyExternalKhr = ~0U-1;
	public const uint KhrExternalMemorySpecVersion = 1;
	public const string KhrExternalMemoryExtensionName = "VK_KHR_external_memory";
	public const uint KhrExternalMemoryWin32SpecVersion = 1;
	public const string KhrExternalMemoryWin32ExtensionName = "VK_KHR_external_memory_win32";
	public const uint KhrExternalMemoryFdSpecVersion = 1;
	public const string KhrExternalMemoryFdExtensionName = "VK_KHR_external_memory_fd";
	public const uint KhrWin32KeyedMutexSpecVersion = 1;
	public const string KhrWin32KeyedMutexExtensionName = "VK_KHR_win32_keyed_mutex";
	public const uint KhrExternalSemaphoreCapabilitiesSpecVersion = 1;
	public const string KhrExternalSemaphoreCapabilitiesExtensionName = "VK_KHR_external_semaphore_capabilities";
	public const uint KhrExternalSemaphoreSpecVersion = 1;
	public const string KhrExternalSemaphoreExtensionName = "VK_KHR_external_semaphore";
	public const uint KhrExternalSemaphoreWin32SpecVersion = 1;
	public const string KhrExternalSemaphoreWin32ExtensionName = "VK_KHR_external_semaphore_win32";
	public const uint KhrExternalSemaphoreFdSpecVersion = 1;
	public const string KhrExternalSemaphoreFdExtensionName = "VK_KHR_external_semaphore_fd";
	public const uint KhrPushDescriptorSpecVersion = 1;
	public const string KhrPushDescriptorExtensionName = "VK_KHR_push_descriptor";
	public const uint Khr16bitStorageSpecVersion = 1;
	public const string Khr16bitStorageExtensionName = "VK_KHR_16bit_storage";
	public const uint KhrIncrementalPresentSpecVersion = 1;
	public const string KhrIncrementalPresentExtensionName = "VK_KHR_incremental_present";
	public const uint KhrDescriptorUpdateTemplateSpecVersion = 1;
	public const string KhrDescriptorUpdateTemplateExtensionName = "VK_KHR_descriptor_update_template";
	public const uint NvxDeviceGeneratedCommandsSpecVersion = 3;
	public const string NvxDeviceGeneratedCommandsExtensionName = "VK_NVX_device_generated_commands";
	public const uint NvClipSpaceWScalingSpecVersion = 1;
	public const string NvClipSpaceWScalingExtensionName = "VK_NV_clip_space_w_scaling";
	public const uint ExtDirectModeDisplaySpecVersion = 1;
	public const string ExtDirectModeDisplayExtensionName = "VK_EXT_direct_mode_display";
	public const uint ExtAcquireXlibDisplaySpecVersion = 1;
	public const string ExtAcquireXlibDisplayExtensionName = "VK_EXT_acquire_xlib_display";
	public const uint ExtDisplaySurfaceCounterSpecVersion = 1;
	public const string ExtDisplaySurfaceCounterExtensionName = "VK_EXT_display_surface_counter";
	public const uint ExtDisplayControlSpecVersion = 1;
	public const string ExtDisplayControlExtensionName = "VK_EXT_display_control";
	public const uint GoogleDisplayTimingSpecVersion = 1;
	public const string GoogleDisplayTimingExtensionName = "VK_GOOGLE_display_timing";
	public const uint NvSampleMaskOverrideCoverageSpecVersion = 1;
	public const string NvSampleMaskOverrideCoverageExtensionName = "VK_NV_sample_mask_override_coverage";
	public const uint NvGeometryShaderPassthroughSpecVersion = 1;
	public const string NvGeometryShaderPassthroughExtensionName = "VK_NV_geometry_shader_passthrough";
	public const uint NvViewportArray2SpecVersion = 1;
	public const string NvViewportArray2ExtensionName = "VK_NV_viewport_array2";
	public const uint NvxMultiviewPerViewAttributesSpecVersion = 1;
	public const string NvxMultiviewPerViewAttributesExtensionName = "VK_NVX_multiview_per_view_attributes";
	public const uint NvViewportSwizzleSpecVersion = 1;
	public const string NvViewportSwizzleExtensionName = "VK_NV_viewport_swizzle";
	public const uint ExtDiscardRectanglesSpecVersion = 1;
	public const string ExtDiscardRectanglesExtensionName = "VK_EXT_discard_rectangles";
	public const uint ExtConservativeRasterizationSpecVersion = 1;
	public const string ExtConservativeRasterizationExtensionName = "VK_EXT_conservative_rasterization";
	public const uint ExtSwapchainColorSpaceSpecVersion = 3;
	public const string ExtSwapchainColorSpaceExtensionName = "VK_EXT_swapchain_colorspace";
	public const uint ExtHdrMetadataSpecVersion = 1;
	public const string ExtHdrMetadataExtensionName = "VK_EXT_hdr_metadata";
	public const uint KhrSharedPresentableImageSpecVersion = 1;
	public const string KhrSharedPresentableImageExtensionName = "VK_KHR_shared_presentable_image";
	public const uint KhrExternalFenceCapabilitiesSpecVersion = 1;
	public const string KhrExternalFenceCapabilitiesExtensionName = "VK_KHR_external_fence_capabilities";
	public const uint KhrExternalFenceSpecVersion = 1;
	public const string KhrExternalFenceExtensionName = "VK_KHR_external_fence";
	public const uint KhrExternalFenceWin32SpecVersion = 1;
	public const string KhrExternalFenceWin32ExtensionName = "VK_KHR_external_fence_win32";
	public const uint KhrExternalFenceFdSpecVersion = 1;
	public const string KhrExternalFenceFdExtensionName = "VK_KHR_external_fence_fd";
	public const uint KhrMaintenance2SpecVersion = 1;
	public const string KhrMaintenance2ExtensionName = "VK_KHR_maintenance2";
	public const uint KhrGetSurfaceCapabilities2SpecVersion = 1;
	public const string KhrGetSurfaceCapabilities2ExtensionName = "VK_KHR_get_surface_capabilities2";
	public const uint KhrVariablePointersSpecVersion = 1;
	public const string KhrVariablePointersExtensionName = "VK_KHR_variable_pointers";
	public const uint MvkIosSurfaceSpecVersion = 2;
	public const string MvkIosSurfaceExtensionName = "VK_MVK_ios_surface";
	public const uint MvkMacosSurfaceSpecVersion = 2;
	public const string MvkMacosSurfaceExtensionName = "VK_MVK_macos_surface";
	public const uint ExtExternalMemoryDmaBufSpecVersion = 1;
	public const string ExtExternalMemoryDmaBufExtensionName = "VK_EXT_external_memory_dma_buf";
	public const uint QueueFamilyForeignExt = ~0U-2;
	public const uint ExtQueueFamilyForeignSpecVersion = 1;
	public const string ExtQueueFamilyForeignExtensionName = "VK_EXT_queue_family_foreign";
	public const uint KhrDedicatedAllocationSpecVersion = 3;
	public const string KhrDedicatedAllocationExtensionName = "VK_KHR_dedicated_allocation";
	public const uint ExtSamplerFilterMinmaxSpecVersion = 1;
	public const string ExtSamplerFilterMinmaxExtensionName = "VK_EXT_sampler_filter_minmax";
	public const uint KhrStorageBufferStorageClassSpecVersion = 1;
	public const string KhrStorageBufferStorageClassExtensionName = "VK_KHR_storage_buffer_storage_class";
	public const uint AmdGpuShaderInt16SpecVersion = 1;
	public const string AmdGpuShaderInt16ExtensionName = "VK_AMD_gpu_shader_int16";
	public const uint AmdMixedAttachmentSamplesSpecVersion = 1;
	public const string AmdMixedAttachmentSamplesExtensionName = "VK_AMD_mixed_attachment_samples";
	public const uint AmdShaderFragmentMaskSpecVersion = 1;
	public const string AmdShaderFragmentMaskExtensionName = "VK_AMD_shader_fragment_mask";
	public const uint ExtShaderStencilExportSpecVersion = 1;
	public const string ExtShaderStencilExportExtensionName = "VK_EXT_shader_stencil_export";
	public const uint ExtSampleLocationsSpecVersion = 1;
	public const string ExtSampleLocationsExtensionName = "VK_EXT_sample_locations";
	public const uint KhrRelaxedBlockLayoutSpecVersion = 1;
	public const string KhrRelaxedBlockLayoutExtensionName = "VK_KHR_relaxed_block_layout";
	public const uint KhrGetMemoryRequirements2SpecVersion = 1;
	public const string KhrGetMemoryRequirements2ExtensionName = "VK_KHR_get_memory_requirements2";
	public const uint KhrImageFormatListSpecVersion = 1;
	public const string KhrImageFormatListExtensionName = "VK_KHR_image_format_list";
	public const uint ExtBlendOperationAdvancedSpecVersion = 2;
	public const string ExtBlendOperationAdvancedExtensionName = "VK_EXT_blend_operation_advanced";
	public const uint NvFragmentCoverageToColorSpecVersion = 1;
	public const string NvFragmentCoverageToColorExtensionName = "VK_NV_fragment_coverage_to_color";
	public const uint NvFramebufferMixedSamplesSpecVersion = 1;
	public const string NvFramebufferMixedSamplesExtensionName = "VK_NV_framebuffer_mixed_samples";
	public const uint NvFillRectangleSpecVersion = 1;
	public const string NvFillRectangleExtensionName = "VK_NV_fill_rectangle";
	public const uint ExtPostDepthCoverageSpecVersion = 1;
	public const string ExtPostDepthCoverageExtensionName = "VK_EXT_post_depth_coverage";
	public const uint KhrSamplerYcbcrConversionSpecVersion = 1;
	public const string KhrSamplerYcbcrConversionExtensionName = "VK_KHR_sampler_ycbcr_conversion";
	public const uint KhrBindMemory2SpecVersion = 1;
	public const string KhrBindMemory2ExtensionName = "VK_KHR_bind_memory2";
	public const uint ExtValidationCacheSpecVersion = 1;
	public const string ExtValidationCacheExtensionName = "VK_EXT_validation_cache";
	public const uint ExtShaderViewportIndexLayerSpecVersion = 1;
	public const string ExtShaderViewportIndexLayerExtensionName = "VK_EXT_shader_viewport_index_layer";
	public const uint ExtGlobalPrioritySpecVersion = 2;
	public const string ExtGlobalPriorityExtensionName = "VK_EXT_global_priority";
	public const uint ExtExternalMemoryHostSpecVersion = 1;
	public const string ExtExternalMemoryHostExtensionName = "VK_EXT_external_memory_host";
	public const uint AmdBufferMarkerSpecVersion = 1;
	public const string AmdBufferMarkerExtensionName = "VK_AMD_buffer_marker";
	public static VkResult CreateInstance(VkInstanceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkInstance instance) => CreateInstance_0(createInfo, allocator, out instance);
	private static delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, VkAllocationCallbacks*, out VkInstance, VkResult> CreateInstance_0;
	public static VkResult CreateInstance(VkInstanceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => CreateInstance_1(createInfo, ref allocator, out instance);
	private static delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, ref VkAllocationCallbacks, out VkInstance, VkResult> CreateInstance_1;
	public static VkResult CreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkInstance instance) => CreateInstance_2(ref createInfo, allocator, out instance);
	private static delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, VkAllocationCallbacks*, out VkInstance, VkResult> CreateInstance_2;
	public static VkResult CreateInstance(ref VkInstanceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkInstance instance) => CreateInstance_3(ref createInfo, ref allocator, out instance);
	private static delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, ref VkAllocationCallbacks, out VkInstance, VkResult> CreateInstance_3;
	public static void DestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator) => DestroyInstance_0(instance, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAllocationCallbacks*, void> DestroyInstance_0;
	public static void DestroyInstance(VkInstance instance, ref VkAllocationCallbacks allocator) => DestroyInstance_1(instance, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAllocationCallbacks, void> DestroyInstance_1;
	public static VkResult EnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, [In, Out] VkPhysicalDevice[] physicalDevices) => EnumeratePhysicalDevices_0(instance, physicalDeviceCount, physicalDevices);
	private static delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDevice[], VkResult> EnumeratePhysicalDevices_0;
	public static VkResult EnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, [In, Out] VkPhysicalDevice[] physicalDevices) => EnumeratePhysicalDevices_1(instance, ref physicalDeviceCount, physicalDevices);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDevice[], VkResult> EnumeratePhysicalDevices_1;
	public static void GetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features) => GetPhysicalDeviceFeatures_0(physicalDevice, out features);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures, void> GetPhysicalDeviceFeatures_0;
	public static void GetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties) => GetPhysicalDeviceFormatProperties_0(physicalDevice, format, out formatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties, void> GetPhysicalDeviceFormatProperties_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties) => GetPhysicalDeviceImageFormatProperties_0(physicalDevice, format, type, tiling, usage, flags, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, out VkImageFormatProperties, VkResult> GetPhysicalDeviceImageFormatProperties_0;
	public static void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties) => GetPhysicalDeviceProperties_0(physicalDevice, out properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties, void> GetPhysicalDeviceProperties_0;
	public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties_0(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties[], void> GetPhysicalDeviceQueueFamilyProperties_0;
	public static void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties_1(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties[], void> GetPhysicalDeviceQueueFamilyProperties_1;
	public static void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties) => GetPhysicalDeviceMemoryProperties_0(physicalDevice, out memoryProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties, void> GetPhysicalDeviceMemoryProperties_0;
	public static delegate*<void> GetInstanceProcedureAddress(VkInstance instance, string name) => GetInstanceProcedureAddress_0(instance, name);
	private static delegate* unmanaged[Cdecl]<VkInstance, string, delegate*<void>> GetInstanceProcedureAddress_0;
	public static delegate*<void> GetDeviceProcedureAddress(VkDevice device, string name) => GetDeviceProcedureAddress_0(device, name);
	private static delegate* unmanaged[Cdecl]<VkDevice, string, delegate*<void>> GetDeviceProcedureAddress_0;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDevice device) => CreateDevice_0(physicalDevice, createInfo, allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, out VkDevice, VkResult> CreateDevice_0;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => CreateDevice_1(physicalDevice, createInfo, ref allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, ref VkAllocationCallbacks, out VkDevice, VkResult> CreateDevice_1;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDevice device) => CreateDevice_2(physicalDevice, ref createInfo, allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, VkAllocationCallbacks*, out VkDevice, VkResult> CreateDevice_2;
	public static VkResult CreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDevice device) => CreateDevice_3(physicalDevice, ref createInfo, ref allocator, out device);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, ref VkAllocationCallbacks, out VkDevice, VkResult> CreateDevice_3;
	public static void DestroyDevice(VkDevice device, VkAllocationCallbacks* allocator) => DestroyDevice_0(device, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, void> DestroyDevice_0;
	public static void DestroyDevice(VkDevice device, ref VkAllocationCallbacks allocator) => DestroyDevice_1(device, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, void> DestroyDevice_1;
	public static VkResult EnumerateInstanceExtensionProperties(string layerName, uint* propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateInstanceExtensionProperties_0(layerName, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<string, uint*, VkExtensionProperties[], VkResult> EnumerateInstanceExtensionProperties_0;
	public static VkResult EnumerateInstanceExtensionProperties(string layerName, ref uint propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateInstanceExtensionProperties_1(layerName, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<string, ref uint, VkExtensionProperties[], VkResult> EnumerateInstanceExtensionProperties_1;
	public static VkResult EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, uint* propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateDeviceExtensionProperties_0(physicalDevice, layerName, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, uint*, VkExtensionProperties[], VkResult> EnumerateDeviceExtensionProperties_0;
	public static VkResult EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string layerName, ref uint propertyCount, [In, Out] VkExtensionProperties[] properties) => EnumerateDeviceExtensionProperties_1(physicalDevice, layerName, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, ref uint, VkExtensionProperties[], VkResult> EnumerateDeviceExtensionProperties_1;
	public static VkResult EnumerateInstanceLayerProperties(uint* propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateInstanceLayerProperties_0(propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<uint*, VkLayerProperties[], VkResult> EnumerateInstanceLayerProperties_0;
	public static VkResult EnumerateInstanceLayerProperties(ref uint propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateInstanceLayerProperties_1(ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<ref uint, VkLayerProperties[], VkResult> EnumerateInstanceLayerProperties_1;
	public static VkResult EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateDeviceLayerProperties_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkLayerProperties[], VkResult> EnumerateDeviceLayerProperties_0;
	public static VkResult EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkLayerProperties[] properties) => EnumerateDeviceLayerProperties_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkLayerProperties[], VkResult> EnumerateDeviceLayerProperties_1;
	public static void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue) => GetDeviceQueue_0(device, queueFamilyIndex, queueIndex, out queue);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, uint, out VkQueue, void> GetDeviceQueue_0;
	public static VkResult QueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo[] submits, VkFence fence) => QueueSubmit_0(queue, submitCount, submits, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo[], VkFence, VkResult> QueueSubmit_0;
	public static VkResult QueueWaitIdle(VkQueue queue) => QueueWaitIdle_0(queue);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkResult> QueueWaitIdle_0;
	public static VkResult DeviceWaitIdle(VkDevice device) => DeviceWaitIdle_0(device);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkResult> DeviceWaitIdle_0;
	public static VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, out VkDeviceMemory memory) => AllocateMemory_0(device, allocateInfo, allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, out VkDeviceMemory, VkResult> AllocateMemory_0;
	public static VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => AllocateMemory_1(device, allocateInfo, ref allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult> AllocateMemory_1;
	public static VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, VkAllocationCallbacks* allocator, out VkDeviceMemory memory) => AllocateMemory_2(device, ref allocateInfo, allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, VkAllocationCallbacks*, out VkDeviceMemory, VkResult> AllocateMemory_2;
	public static VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo allocateInfo, ref VkAllocationCallbacks allocator, out VkDeviceMemory memory) => AllocateMemory_3(device, ref allocateInfo, ref allocator, out memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult> AllocateMemory_3;
	public static void FreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator) => FreeMemory_0(device, memory, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void> FreeMemory_0;
	public static void FreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks allocator) => FreeMemory_1(device, memory, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, ref VkAllocationCallbacks, void> FreeMemory_1;
	public static VkResult MapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** data) => MapMemory_0(device, memory, offset, size, flags, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**, VkResult> MapMemory_0;
	public static void UnmapMemory(VkDevice device, VkDeviceMemory memory) => UnmapMemory_0(device, memory);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void> UnmapMemory_0;
	public static VkResult FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => FlushMappedMemoryRanges_0(device, memoryRangeCount, memoryRanges);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult> FlushMappedMemoryRanges_0;
	public static VkResult InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange[] memoryRanges) => InvalidateMappedMemoryRanges_0(device, memoryRangeCount, memoryRanges);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult> InvalidateMappedMemoryRanges_0;
	public static void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize committedMemoryInBytes) => GetDeviceMemoryCommitment_0(device, memory, out committedMemoryInBytes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, out VkDeviceSize, void> GetDeviceMemoryCommitment_0;
	public static VkResult BindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) => BindBufferMemory_0(device, buffer, memory, memoryOffset);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult> BindBufferMemory_0;
	public static VkResult BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) => BindImageMemory_0(device, image, memory, memoryOffset);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult> BindImageMemory_0;
	public static void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements) => GetBufferMemoryRequirements_0(device, buffer, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, out VkMemoryRequirements, void> GetBufferMemoryRequirements_0;
	public static void GetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements) => GetImageMemoryRequirements_0(device, image, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkMemoryRequirements, void> GetImageMemoryRequirements_0;
	public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements_0(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements[], void> GetImageSparseMemoryRequirements_0;
	public static void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements_1(device, image, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref uint, VkSparseImageMemoryRequirements[], void> GetImageSparseMemoryRequirements_1;
	public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, [In, Out] VkSparseImageFormatProperties[] properties) => GetPhysicalDeviceSparseImageFormatProperties_0(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties[], void> GetPhysicalDeviceSparseImageFormatProperties_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties[] properties) => GetPhysicalDeviceSparseImageFormatProperties_1(physicalDevice, format, type, samples, usage, tiling, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, ref uint, VkSparseImageFormatProperties[], void> GetPhysicalDeviceSparseImageFormatProperties_1;
	public static VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence) => QueueBindSparse_0(queue, bindInfoCount, bindInfo, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult> QueueBindSparse_0;
	public static VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence) => QueueBindSparse_1(queue, bindInfoCount, ref bindInfo, fence);
	private static delegate* unmanaged[Cdecl]<VkQueue, uint, ref VkBindSparseInfo, VkFence, VkResult> QueueBindSparse_1;
	public static VkResult CreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFence fence) => CreateFence_0(device, createInfo, allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, out VkFence, VkResult> CreateFence_0;
	public static VkResult CreateFence(VkDevice device, VkFenceCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => CreateFence_1(device, createInfo, ref allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, ref VkAllocationCallbacks, out VkFence, VkResult> CreateFence_1;
	public static VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFence fence) => CreateFence_2(device, ref createInfo, allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, VkAllocationCallbacks*, out VkFence, VkResult> CreateFence_2;
	public static VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFence fence) => CreateFence_3(device, ref createInfo, ref allocator, out fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, ref VkAllocationCallbacks, out VkFence, VkResult> CreateFence_3;
	public static void DestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator) => DestroyFence_0(device, fence, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkAllocationCallbacks*, void> DestroyFence_0;
	public static void DestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks allocator) => DestroyFence_1(device, fence, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, ref VkAllocationCallbacks, void> DestroyFence_1;
	public static VkResult ResetFences(VkDevice device, uint fenceCount, VkFence[] fences) => ResetFences_0(device, fenceCount, fences);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkResult> ResetFences_0;
	public static VkResult GetFenceStatus(VkDevice device, VkFence fence) => GetFenceStatus_0(device, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult> GetFenceStatus_0;
	public static VkResult WaitForFences(VkDevice device, uint fenceCount, VkFence[] fences, VkBool32 waitAll, ulong timeout) => WaitForFences_0(device, fenceCount, fences, waitAll, timeout);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkBool32, ulong, VkResult> WaitForFences_0;
	public static VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore) => CreateSemaphore_0(device, createInfo, allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, out VkSemaphore, VkResult> CreateSemaphore_0;
	public static VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => CreateSemaphore_1(device, createInfo, ref allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, ref VkAllocationCallbacks, out VkSemaphore, VkResult> CreateSemaphore_1;
	public static VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore) => CreateSemaphore_2(device, ref createInfo, allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, VkAllocationCallbacks*, out VkSemaphore, VkResult> CreateSemaphore_2;
	public static VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSemaphore semaphore) => CreateSemaphore_3(device, ref createInfo, ref allocator, out semaphore);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, ref VkAllocationCallbacks, out VkSemaphore, VkResult> CreateSemaphore_3;
	public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator) => DestroySemaphore_0(device, semaphore, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, VkAllocationCallbacks*, void> DestroySemaphore_0;
	public static void DestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks allocator) => DestroySemaphore_1(device, semaphore, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, ref VkAllocationCallbacks, void> DestroySemaphore_1;
	public static VkResult CreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkEvent @event) => CreateEvent_0(device, createInfo, allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, out VkEvent, VkResult> CreateEvent_0;
	public static VkResult CreateEvent(VkDevice device, VkEventCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkEvent @event) => CreateEvent_1(device, createInfo, ref allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, ref VkAllocationCallbacks, out VkEvent, VkResult> CreateEvent_1;
	public static VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkEvent @event) => CreateEvent_2(device, ref createInfo, allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, VkAllocationCallbacks*, out VkEvent, VkResult> CreateEvent_2;
	public static VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkEvent @event) => CreateEvent_3(device, ref createInfo, ref allocator, out @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, ref VkAllocationCallbacks, out VkEvent, VkResult> CreateEvent_3;
	public static void DestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator) => DestroyEvent_0(device, @event, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkAllocationCallbacks*, void> DestroyEvent_0;
	public static void DestroyEvent(VkDevice device, VkEvent @event, ref VkAllocationCallbacks allocator) => DestroyEvent_1(device, @event, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, ref VkAllocationCallbacks, void> DestroyEvent_1;
	public static VkResult GetEventStatus(VkDevice device, VkEvent @event) => GetEventStatus_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> GetEventStatus_0;
	public static VkResult SetEvent(VkDevice device, VkEvent @event) => SetEvent_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> SetEvent_0;
	public static VkResult ResetEvent(VkDevice device, VkEvent @event) => ResetEvent_0(device, @event);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult> ResetEvent_0;
	public static VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool) => CreateQueryPool_0(device, createInfo, allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, out VkQueryPool, VkResult> CreateQueryPool_0;
	public static VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => CreateQueryPool_1(device, createInfo, ref allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, ref VkAllocationCallbacks, out VkQueryPool, VkResult> CreateQueryPool_1;
	public static VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool) => CreateQueryPool_2(device, ref createInfo, allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, VkAllocationCallbacks*, out VkQueryPool, VkResult> CreateQueryPool_2;
	public static VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkQueryPool queryPool) => CreateQueryPool_3(device, ref createInfo, ref allocator, out queryPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, ref VkAllocationCallbacks, out VkQueryPool, VkResult> CreateQueryPool_3;
	public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator) => DestroyQueryPool_0(device, queryPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, VkAllocationCallbacks*, void> DestroyQueryPool_0;
	public static void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks allocator) => DestroyQueryPool_1(device, queryPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, ref VkAllocationCallbacks, void> DestroyQueryPool_1;
	public static VkResult GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* data, VkDeviceSize stride, VkQueryResultFlags flags) => GetQueryPoolResults_0(device, queryPool, firstQuery, queryCount, dataSize, data, stride, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, void*, VkDeviceSize, VkQueryResultFlags, VkResult> GetQueryPoolResults_0;
	public static VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer) => CreateBuffer_0(device, createInfo, allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, out VkBuffer, VkResult> CreateBuffer_0;
	public static VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => CreateBuffer_1(device, createInfo, ref allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, ref VkAllocationCallbacks, out VkBuffer, VkResult> CreateBuffer_1;
	public static VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer) => CreateBuffer_2(device, ref createInfo, allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, VkAllocationCallbacks*, out VkBuffer, VkResult> CreateBuffer_2;
	public static VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBuffer buffer) => CreateBuffer_3(device, ref createInfo, ref allocator, out buffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, ref VkAllocationCallbacks, out VkBuffer, VkResult> CreateBuffer_3;
	public static void DestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator) => DestroyBuffer_0(device, buffer, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkAllocationCallbacks*, void> DestroyBuffer_0;
	public static void DestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks allocator) => DestroyBuffer_1(device, buffer, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, ref VkAllocationCallbacks, void> DestroyBuffer_1;
	public static VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBufferView view) => CreateBufferView_0(device, createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, out VkBufferView, VkResult> CreateBufferView_0;
	public static VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => CreateBufferView_1(device, createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, ref VkAllocationCallbacks, out VkBufferView, VkResult> CreateBufferView_1;
	public static VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBufferView view) => CreateBufferView_2(device, ref createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, VkAllocationCallbacks*, out VkBufferView, VkResult> CreateBufferView_2;
	public static VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkBufferView view) => CreateBufferView_3(device, ref createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, ref VkAllocationCallbacks, out VkBufferView, VkResult> CreateBufferView_3;
	public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator) => DestroyBufferView_0(device, bufferView, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, VkAllocationCallbacks*, void> DestroyBufferView_0;
	public static void DestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks allocator) => DestroyBufferView_1(device, bufferView, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, ref VkAllocationCallbacks, void> DestroyBufferView_1;
	public static VkResult CreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImage image) => CreateImage_0(device, createInfo, allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, out VkImage, VkResult> CreateImage_0;
	public static VkResult CreateImage(VkDevice device, VkImageCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => CreateImage_1(device, createInfo, ref allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, ref VkAllocationCallbacks, out VkImage, VkResult> CreateImage_1;
	public static VkResult CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImage image) => CreateImage_2(device, ref createInfo, allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, VkAllocationCallbacks*, out VkImage, VkResult> CreateImage_2;
	public static VkResult CreateImage(VkDevice device, ref VkImageCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImage image) => CreateImage_3(device, ref createInfo, ref allocator, out image);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, ref VkAllocationCallbacks, out VkImage, VkResult> CreateImage_3;
	public static void DestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator) => DestroyImage_0(device, image, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkAllocationCallbacks*, void> DestroyImage_0;
	public static void DestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks allocator) => DestroyImage_1(device, image, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkAllocationCallbacks, void> DestroyImage_1;
	public static void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, out VkSubresourceLayout layout) => GetImageSubresourceLayout_0(device, image, subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource*, out VkSubresourceLayout, void> GetImageSubresourceLayout_0;
	public static void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, out VkSubresourceLayout layout) => GetImageSubresourceLayout_1(device, image, ref subresource, out layout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource, out VkSubresourceLayout, void> GetImageSubresourceLayout_1;
	public static VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImageView view) => CreateImageView_0(device, createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, out VkImageView, VkResult> CreateImageView_0;
	public static VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => CreateImageView_1(device, createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, ref VkAllocationCallbacks, out VkImageView, VkResult> CreateImageView_1;
	public static VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImageView view) => CreateImageView_2(device, ref createInfo, allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, VkAllocationCallbacks*, out VkImageView, VkResult> CreateImageView_2;
	public static VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkImageView view) => CreateImageView_3(device, ref createInfo, ref allocator, out view);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, ref VkAllocationCallbacks, out VkImageView, VkResult> CreateImageView_3;
	public static void DestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator) => DestroyImageView_0(device, imageView, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageView, VkAllocationCallbacks*, void> DestroyImageView_0;
	public static void DestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks allocator) => DestroyImageView_1(device, imageView, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageView, ref VkAllocationCallbacks, void> DestroyImageView_1;
	public static VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule) => CreateShaderModule_0(device, createInfo, allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, out VkShaderModule, VkResult> CreateShaderModule_0;
	public static VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => CreateShaderModule_1(device, createInfo, ref allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, ref VkAllocationCallbacks, out VkShaderModule, VkResult> CreateShaderModule_1;
	public static VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule) => CreateShaderModule_2(device, ref createInfo, allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, VkAllocationCallbacks*, out VkShaderModule, VkResult> CreateShaderModule_2;
	public static VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkShaderModule shaderModule) => CreateShaderModule_3(device, ref createInfo, ref allocator, out shaderModule);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, ref VkAllocationCallbacks, out VkShaderModule, VkResult> CreateShaderModule_3;
	public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator) => DestroyShaderModule_0(device, shaderModule, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, VkAllocationCallbacks*, void> DestroyShaderModule_0;
	public static void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks allocator) => DestroyShaderModule_1(device, shaderModule, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, ref VkAllocationCallbacks, void> DestroyShaderModule_1;
	public static VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_0(device, createInfo, allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, out VkPipelineCache, VkResult> CreatePipelineCache_0;
	public static VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_1(device, createInfo, ref allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, ref VkAllocationCallbacks, out VkPipelineCache, VkResult> CreatePipelineCache_1;
	public static VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_2(device, ref createInfo, allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, VkAllocationCallbacks*, out VkPipelineCache, VkResult> CreatePipelineCache_2;
	public static VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineCache pipelineCache) => CreatePipelineCache_3(device, ref createInfo, ref allocator, out pipelineCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, ref VkAllocationCallbacks, out VkPipelineCache, VkResult> CreatePipelineCache_3;
	public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator) => DestroyPipelineCache_0(device, pipelineCache, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void> DestroyPipelineCache_0;
	public static void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks allocator) => DestroyPipelineCache_1(device, pipelineCache, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref VkAllocationCallbacks, void> DestroyPipelineCache_1;
	public static VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* dataSize, void* data) => GetPipelineCacheData_0(device, pipelineCache, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nuint*, void*, VkResult> GetPipelineCacheData_0;
	public static VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ref nuint dataSize, void* data) => GetPipelineCacheData_1(device, pipelineCache, ref dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref nuint, void*, VkResult> GetPipelineCacheData_1;
	public static VkResult MergePipelineCaches(VkDevice device, VkPipelineCache destinationCache, uint sourceCacheCount, VkPipelineCache[] sourceCaches) => MergePipelineCaches_0(device, destinationCache, sourceCacheCount, sourceCaches);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkPipelineCache[], VkResult> MergePipelineCaches_0;
	public static VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateGraphicsPipelines_0(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateGraphicsPipelines_0;
	public static VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateGraphicsPipelines_1(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateGraphicsPipelines_1;
	public static VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, VkAllocationCallbacks* allocator, out VkPipeline pipelines) => CreateComputePipelines_0(device, pipelineCache, createInfoCount, createInfos, allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult> CreateComputePipelines_0;
	public static VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo[] createInfos, ref VkAllocationCallbacks allocator, out VkPipeline pipelines) => CreateComputePipelines_1(device, pipelineCache, createInfoCount, createInfos, ref allocator, out pipelines);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult> CreateComputePipelines_1;
	public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator) => DestroyPipeline_0(device, pipeline, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkAllocationCallbacks*, void> DestroyPipeline_0;
	public static void DestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks allocator) => DestroyPipeline_1(device, pipeline, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, ref VkAllocationCallbacks, void> DestroyPipeline_1;
	public static VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_0(device, createInfo, allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, out VkPipelineLayout, VkResult> CreatePipelineLayout_0;
	public static VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_1(device, createInfo, ref allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult> CreatePipelineLayout_1;
	public static VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_2(device, ref createInfo, allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, VkAllocationCallbacks*, out VkPipelineLayout, VkResult> CreatePipelineLayout_2;
	public static VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkPipelineLayout pipelineLayout) => CreatePipelineLayout_3(device, ref createInfo, ref allocator, out pipelineLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult> CreatePipelineLayout_3;
	public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator) => DestroyPipelineLayout_0(device, pipelineLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void> DestroyPipelineLayout_0;
	public static void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks allocator) => DestroyPipelineLayout_1(device, pipelineLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, ref VkAllocationCallbacks, void> DestroyPipelineLayout_1;
	public static VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler) => CreateSampler_0(device, createInfo, allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, out VkSampler, VkResult> CreateSampler_0;
	public static VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => CreateSampler_1(device, createInfo, ref allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, ref VkAllocationCallbacks, out VkSampler, VkResult> CreateSampler_1;
	public static VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler) => CreateSampler_2(device, ref createInfo, allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, VkAllocationCallbacks*, out VkSampler, VkResult> CreateSampler_2;
	public static VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkSampler sampler) => CreateSampler_3(device, ref createInfo, ref allocator, out sampler);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, ref VkAllocationCallbacks, out VkSampler, VkResult> CreateSampler_3;
	public static void DestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator) => DestroySampler_0(device, sampler, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSampler, VkAllocationCallbacks*, void> DestroySampler_0;
	public static void DestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks allocator) => DestroySampler_1(device, sampler, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSampler, ref VkAllocationCallbacks, void> DestroySampler_1;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_0(device, createInfo, allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_0;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_1(device, createInfo, ref allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_1;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_2(device, ref createInfo, allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_2;
	public static VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorSetLayout setLayout) => CreateDescriptorSetLayout_3(device, ref createInfo, ref allocator, out setLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult> CreateDescriptorSetLayout_3;
	public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator) => DestroyDescriptorSetLayout_0(device, descriptorSetLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void> DestroyDescriptorSetLayout_0;
	public static void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks allocator) => DestroyDescriptorSetLayout_1(device, descriptorSetLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, ref VkAllocationCallbacks, void> DestroyDescriptorSetLayout_1;
	public static VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_0(device, createInfo, allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, out VkDescriptorPool, VkResult> CreateDescriptorPool_0;
	public static VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_1(device, createInfo, ref allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult> CreateDescriptorPool_1;
	public static VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_2(device, ref createInfo, allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, VkAllocationCallbacks*, out VkDescriptorPool, VkResult> CreateDescriptorPool_2;
	public static VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorPool descriptorPool) => CreateDescriptorPool_3(device, ref createInfo, ref allocator, out descriptorPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult> CreateDescriptorPool_3;
	public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator) => DestroyDescriptorPool_0(device, descriptorPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void> DestroyDescriptorPool_0;
	public static void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks allocator) => DestroyDescriptorPool_1(device, descriptorPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, ref VkAllocationCallbacks, void> DestroyDescriptorPool_1;
	public static VkResult ResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) => ResetDescriptorPool_0(device, descriptorPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult> ResetDescriptorPool_0;
	public static VkResult AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, [In, Out] VkDescriptorSet[] descriptorSets) => AllocateDescriptorSets_0(device, allocateInfo, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet[], VkResult> AllocateDescriptorSets_0;
	public static VkResult AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo allocateInfo, [In, Out] VkDescriptorSet[] descriptorSets) => AllocateDescriptorSets_1(device, ref allocateInfo, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetAllocateInfo, VkDescriptorSet[], VkResult> AllocateDescriptorSets_1;
	public static VkResult FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet[] descriptorSets) => FreeDescriptorSets_0(device, descriptorPool, descriptorSetCount, descriptorSets);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkDescriptorSet[], VkResult> FreeDescriptorSets_0;
	public static void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet[] descriptorCopies) => UpdateDescriptorSets_0(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkWriteDescriptorSet[], uint, VkCopyDescriptorSet[], void> UpdateDescriptorSets_0;
	public static VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_0(device, createInfo, allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, out VkFramebuffer, VkResult> CreateFramebuffer_0;
	public static VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_1(device, createInfo, ref allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, ref VkAllocationCallbacks, out VkFramebuffer, VkResult> CreateFramebuffer_1;
	public static VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_2(device, ref createInfo, allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, VkAllocationCallbacks*, out VkFramebuffer, VkResult> CreateFramebuffer_2;
	public static VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkFramebuffer framebuffer) => CreateFramebuffer_3(device, ref createInfo, ref allocator, out framebuffer);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, ref VkAllocationCallbacks, out VkFramebuffer, VkResult> CreateFramebuffer_3;
	public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator) => DestroyFramebuffer_0(device, framebuffer, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void> DestroyFramebuffer_0;
	public static void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks allocator) => DestroyFramebuffer_1(device, framebuffer, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref VkAllocationCallbacks, void> DestroyFramebuffer_1;
	public static VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass_0(device, createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass_0;
	public static VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass_1(device, createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass_1;
	public static VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass) => CreateRenderPass_2(device, ref createInfo, allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, VkAllocationCallbacks*, out VkRenderPass, VkResult> CreateRenderPass_2;
	public static VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkRenderPass renderPass) => CreateRenderPass_3(device, ref createInfo, ref allocator, out renderPass);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, ref VkAllocationCallbacks, out VkRenderPass, VkResult> CreateRenderPass_3;
	public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator) => DestroyRenderPass_0(device, renderPass, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkAllocationCallbacks*, void> DestroyRenderPass_0;
	public static void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks allocator) => DestroyRenderPass_1(device, renderPass, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, ref VkAllocationCallbacks, void> DestroyRenderPass_1;
	public static void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity) => GetRenderAreaGranularity_0(device, renderPass, out granularity);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, void> GetRenderAreaGranularity_0;
	public static VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool) => CreateCommandPool_0(device, createInfo, allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, out VkCommandPool, VkResult> CreateCommandPool_0;
	public static VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => CreateCommandPool_1(device, createInfo, ref allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, ref VkAllocationCallbacks, out VkCommandPool, VkResult> CreateCommandPool_1;
	public static VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool) => CreateCommandPool_2(device, ref createInfo, allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, VkAllocationCallbacks*, out VkCommandPool, VkResult> CreateCommandPool_2;
	public static VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, ref VkAllocationCallbacks allocator, out VkCommandPool commandPool) => CreateCommandPool_3(device, ref createInfo, ref allocator, out commandPool);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, ref VkAllocationCallbacks, out VkCommandPool, VkResult> CreateCommandPool_3;
	public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator) => DestroyCommandPool_0(device, commandPool, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkAllocationCallbacks*, void> DestroyCommandPool_0;
	public static void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks allocator) => DestroyCommandPool_1(device, commandPool, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, ref VkAllocationCallbacks, void> DestroyCommandPool_1;
	public static VkResult ResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) => ResetCommandPool_0(device, commandPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult> ResetCommandPool_0;
	public static VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, [In, Out] VkCommandBuffer[] commandBuffers) => AllocateCommandBuffers_0(device, allocateInfo, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer[], VkResult> AllocateCommandBuffers_0;
	public static VkResult AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo allocateInfo, [In, Out] VkCommandBuffer[] commandBuffers) => AllocateCommandBuffers_1(device, ref allocateInfo, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandBufferAllocateInfo, VkCommandBuffer[], VkResult> AllocateCommandBuffers_1;
	public static void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => FreeCommandBuffers_0(device, commandPool, commandBufferCount, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, VkCommandBuffer[], void> FreeCommandBuffers_0;
	public static VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo) => BeginCommandBuffer_0(commandBuffer, beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult> BeginCommandBuffer_0;
	public static VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo) => BeginCommandBuffer_1(commandBuffer, ref beginInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCommandBufferBeginInfo, VkResult> BeginCommandBuffer_1;
	public static VkResult EndCommandBuffer(VkCommandBuffer commandBuffer) => EndCommandBuffer_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult> EndCommandBuffer_0;
	public static VkResult ResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) => ResetCommandBuffer_0(commandBuffer, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult> ResetCommandBuffer_0;
	public static void CommandBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) => CommandBindPipeline_0(commandBuffer, pipelineBindPoint, pipeline);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void> CommandBindPipeline_0;
	public static void CommandSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport[] viewports) => CommandSetViewport_0(commandBuffer, firstViewport, viewportCount, viewports);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewport[], void> CommandSetViewport_0;
	public static void CommandSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D[] scissors) => CommandSetScissor_0(commandBuffer, firstScissor, scissorCount, scissors);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void> CommandSetScissor_0;
	public static void CommandSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) => CommandSetLineWidth_0(commandBuffer, lineWidth);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void> CommandSetLineWidth_0;
	public static void CommandSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) => CommandSetDepthBias_0(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void> CommandSetDepthBias_0;
	public static void CommandSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants) => CommandSetBlendConstants_0(commandBuffer, blendConstants);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void> CommandSetBlendConstants_0;
	public static void CommandSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) => CommandSetDepthBounds_0(commandBuffer, minDepthBounds, maxDepthBounds);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void> CommandSetDepthBounds_0;
	public static void CommandSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask) => CommandSetStencilCompareMask_0(commandBuffer, faceMask, compareMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilCompareMask_0;
	public static void CommandSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask) => CommandSetStencilWriteMask_0(commandBuffer, faceMask, writeMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilWriteMask_0;
	public static void CommandSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference) => CommandSetStencilReference_0(commandBuffer, faceMask, reference);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void> CommandSetStencilReference_0;
	public static void CommandBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet[] descriptorSets, uint dynamicOffsetCount, uint[] dynamicOffsets) => CommandBindDescriptorSets_0(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet[], uint, uint[], void> CommandBindDescriptorSets_0;
	public static void CommandBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) => CommandBindIndexBuffer_0(commandBuffer, buffer, offset, indexType);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void> CommandBindIndexBuffer_0;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets) => CommandBindVertexBuffers_0(commandBuffer, firstBinding, bindingCount, buffers, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void> CommandBindVertexBuffers_0;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ref VkDeviceSize offsets) => CommandBindVertexBuffers_1(commandBuffer, firstBinding, bindingCount, buffers, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, void> CommandBindVertexBuffers_1;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, VkDeviceSize* offsets) => CommandBindVertexBuffers_2(commandBuffer, firstBinding, bindingCount, ref buffers, offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, void> CommandBindVertexBuffers_2;
	public static void CommandBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer buffers, ref VkDeviceSize offsets) => CommandBindVertexBuffers_3(commandBuffer, firstBinding, bindingCount, ref buffers, ref offsets);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, void> CommandBindVertexBuffers_3;
	public static void CommandDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance) => CommandDraw_0(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void> CommandDraw_0;
	public static void CommandDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance) => CommandDrawIndexed_0(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void> CommandDrawIndexed_0;
	public static void CommandDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawIndirect_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirect_0;
	public static void CommandDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride) => CommandDrawIndexedIndirect_0(commandBuffer, buffer, offset, drawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirect_0;
	public static void CommandDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDispatch_0(commandBuffer, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void> CommandDispatch_0;
	public static void CommandDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) => CommandDispatchIndirect_0(commandBuffer, buffer, offset);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void> CommandDispatchIndirect_0;
	public static void CommandCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer sourceBuffer, VkBuffer destinationBuffer, uint regionCount, VkBufferCopy[] regions) => CommandCopyBuffer_0(commandBuffer, sourceBuffer, destinationBuffer, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy[], void> CommandCopyBuffer_0;
	public static void CommandCopyImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageCopy[] regions) => CommandCopyImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy[], void> CommandCopyImage_0;
	public static void CommandBlitImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageBlit[] regions, VkFilter filter) => CommandBlitImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions, filter);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit[], VkFilter, void> CommandBlitImage_0;
	public static void CommandCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer sourceBuffer, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkBufferImageCopy[] regions) => CommandCopyBufferToImage_0(commandBuffer, sourceBuffer, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy[], void> CommandCopyBufferToImage_0;
	public static void CommandCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkBuffer destinationBuffer, uint regionCount, VkBufferImageCopy[] regions) => CommandCopyImageToBuffer_0(commandBuffer, sourceImage, sourceImageLayout, destinationBuffer, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy[], void> CommandCopyImageToBuffer_0;
	public static void CommandUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize dataSize, void* data) => CommandUpdateBuffer_0(commandBuffer, destinationBuffer, destinationOffset, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void> CommandUpdateBuffer_0;
	public static void CommandFillBuffer(VkCommandBuffer commandBuffer, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize size, uint data) => CommandFillBuffer_0(commandBuffer, destinationBuffer, destinationOffset, size, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void> CommandFillBuffer_0;
	public static void CommandClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearColorImage_0(commandBuffer, image, imageLayout, color, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange[], void> CommandClearColorImage_0;
	public static void CommandClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearColorImage_1(commandBuffer, image, imageLayout, ref color, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearColorValue, uint, VkImageSubresourceRange[], void> CommandClearColorImage_1;
	public static void CommandClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearDepthStencilImage_0(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange[], void> CommandClearDepthStencilImage_0;
	public static void CommandClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, VkImageSubresourceRange[] ranges) => CommandClearDepthStencilImage_1(commandBuffer, image, imageLayout, ref depthStencil, rangeCount, ranges);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearDepthStencilValue, uint, VkImageSubresourceRange[], void> CommandClearDepthStencilImage_1;
	public static void CommandClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment[] attachments, uint rectCount, VkClearRect[] rects) => CommandClearAttachments_0(commandBuffer, attachmentCount, attachments, rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkClearAttachment[], uint, VkClearRect[], void> CommandClearAttachments_0;
	public static void CommandResolveImage(VkCommandBuffer commandBuffer, VkImage sourceImage, VkImageLayout sourceImageLayout, VkImage destinationImage, VkImageLayout destinationImageLayout, uint regionCount, VkImageResolve[] regions) => CommandResolveImage_0(commandBuffer, sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regionCount, regions);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve[], void> CommandResolveImage_0;
	public static void CommandSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => CommandSetEvent_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> CommandSetEvent_0;
	public static void CommandResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask) => CommandResetEvent_0(commandBuffer, @event, stageMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> CommandResetEvent_0;
	public static void CommandWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent[] events, VkPipelineStageFlags sourceStageMask, VkPipelineStageFlags destinationStageMask, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => CommandWaitEvents_0(commandBuffer, eventCount, events, sourceStageMask, destinationStageMask, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void> CommandWaitEvents_0;
	public static void CommandPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags sourceStageMask, VkPipelineStageFlags destinationStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier[] memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier[] bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier[] imageMemoryBarriers) => CommandPipelineBarrier_0(commandBuffer, sourceStageMask, destinationStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void> CommandPipelineBarrier_0;
	public static void CommandBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags) => CommandBeginQuery_0(commandBuffer, queryPool, query, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void> CommandBeginQuery_0;
	public static void CommandEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query) => CommandEndQuery_0(commandBuffer, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void> CommandEndQuery_0;
	public static void CommandResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount) => CommandResetQueryPool_0(commandBuffer, queryPool, firstQuery, queryCount);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void> CommandResetQueryPool_0;
	public static void CommandWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query) => CommandWriteTimestamp_0(commandBuffer, pipelineStage, queryPool, query);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void> CommandWriteTimestamp_0;
	public static void CommandCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, VkDeviceSize stride, VkQueryResultFlags flags) => CommandCopyQueryPoolResults_0(commandBuffer, queryPool, firstQuery, queryCount, destinationBuffer, destinationOffset, stride, flags);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void> CommandCopyQueryPoolResults_0;
	public static void CommandPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values) => CommandPushConstants_0(commandBuffer, layout, stageFlags, offset, size, values);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void> CommandPushConstants_0;
	public static void CommandBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents) => CommandBeginRenderPass_0(commandBuffer, renderPassBegin, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void> CommandBeginRenderPass_0;
	public static void CommandBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents) => CommandBeginRenderPass_1(commandBuffer, ref renderPassBegin, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassContents, void> CommandBeginRenderPass_1;
	public static void CommandNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) => CommandNextSubpass_0(commandBuffer, contents);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void> CommandNextSubpass_0;
	public static void CommandEndRenderPass(VkCommandBuffer commandBuffer) => CommandEndRenderPass_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandEndRenderPass_0;
	public static void CommandExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer[] commandBuffers) => CommandExecuteCommands_0(commandBuffer, commandBufferCount, commandBuffers);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkCommandBuffer[], void> CommandExecuteCommands_0;
	public static void DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator) => DestroySurfaceKHR_0(instance, surface, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void> DestroySurfaceKHR_0;
	public static void DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, ref VkAllocationCallbacks allocator) => DestroySurfaceKHR_1(instance, surface, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, ref VkAllocationCallbacks, void> DestroySurfaceKHR_1;
	public static VkResult GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 supported) => GetPhysicalDeviceSurfaceSupportKHR_0(physicalDevice, queueFamilyIndex, surface, out supported);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkSurfaceKHR, out VkBool32, VkResult> GetPhysicalDeviceSurfaceSupportKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilitiesKHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilitiesKHR_0(physicalDevice, surface, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilitiesKHR, VkResult> GetPhysicalDeviceSurfaceCapabilitiesKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* surfaceFormatCount, [In, Out] VkSurfaceFormatKHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormatsKHR_0(physicalDevice, surface, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR[], VkResult> GetPhysicalDeviceSurfaceFormatsKHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormatKHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormatsKHR_1(physicalDevice, surface, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkSurfaceFormatKHR[], VkResult> GetPhysicalDeviceSurfaceFormatsKHR_1;
	public static VkResult GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModesKHR_0(physicalDevice, surface, presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModesKHR_0;
	public static VkResult GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint presentModeCount, [In, Out] VkPresentModeKHR[] presentModes) => GetPhysicalDeviceSurfacePresentModesKHR_1(physicalDevice, surface, ref presentModeCount, presentModes);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkPresentModeKHR[], VkResult> GetPhysicalDeviceSurfacePresentModesKHR_1;
	public static VkResult CreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_0(device, createInfo, allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_0;
	public static VkResult CreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_1(device, createInfo, ref allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_1;
	public static VkResult CreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_2(device, ref createInfo, allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_2;
	public static VkResult CreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchain) => CreateSwapchainKHR_3(device, ref createInfo, ref allocator, out swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSwapchainKHR_3;
	public static void DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* allocator) => DestroySwapchainKHR_0(device, swapchain, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void> DestroySwapchainKHR_0;
	public static void DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, ref VkAllocationCallbacks allocator) => DestroySwapchainKHR_1(device, swapchain, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref VkAllocationCallbacks, void> DestroySwapchainKHR_1;
	public static VkResult GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint* swapchainImageCount, [In, Out] VkImage[] swapchainImages) => GetSwapchainImagesKHR_0(device, swapchain, swapchainImageCount, swapchainImages);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkImage[], VkResult> GetSwapchainImagesKHR_0;
	public static VkResult GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, ref uint swapchainImageCount, [In, Out] VkImage[] swapchainImages) => GetSwapchainImagesKHR_1(device, swapchain, ref swapchainImageCount, swapchainImages);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkImage[], VkResult> GetSwapchainImagesKHR_1;
	public static VkResult AcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, out uint imageIndex) => AcquireNextImageKHR_0(device, swapchain, timeout, semaphore, fence, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, out uint, VkResult> AcquireNextImageKHR_0;
	public static VkResult QueuePresentKHR(VkQueue queue, VkPresentInfoKHR* presentInfo) => QueuePresentKHR_0(queue, presentInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, VkPresentInfoKHR*, VkResult> QueuePresentKHR_0;
	public static VkResult QueuePresentKHR(VkQueue queue, ref VkPresentInfoKHR presentInfo) => QueuePresentKHR_1(queue, ref presentInfo);
	private static delegate* unmanaged[Cdecl]<VkQueue, ref VkPresentInfoKHR, VkResult> QueuePresentKHR_1;
	public static VkResult GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayPropertiesKHR[] properties) => GetPhysicalDeviceDisplayPropertiesKHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPropertiesKHR_0;
	public static VkResult GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayPropertiesKHR[] properties) => GetPhysicalDeviceDisplayPropertiesKHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPropertiesKHR_1;
	public static VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, [In, Out] VkDisplayPlanePropertiesKHR[] properties) => GetPhysicalDeviceDisplayPlanePropertiesKHR_0(physicalDevice, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPlanePropertiesKHR_0;
	public static VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, ref uint propertyCount, [In, Out] VkDisplayPlanePropertiesKHR[] properties) => GetPhysicalDeviceDisplayPlanePropertiesKHR_1(physicalDevice, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlanePropertiesKHR[], VkResult> GetPhysicalDeviceDisplayPlanePropertiesKHR_1;
	public static VkResult GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint* displayCount, [In, Out] VkDisplayKHR[] displays) => GetDisplayPlaneSupportedDisplaysKHR_0(physicalDevice, planeIndex, displayCount, displays);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkDisplayKHR[], VkResult> GetDisplayPlaneSupportedDisplaysKHR_0;
	public static VkResult GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, [In, Out] VkDisplayKHR[] displays) => GetDisplayPlaneSupportedDisplaysKHR_1(physicalDevice, planeIndex, ref displayCount, displays);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkDisplayKHR[], VkResult> GetDisplayPlaneSupportedDisplaysKHR_1;
	public static VkResult GetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, [In, Out] VkDisplayModePropertiesKHR[] properties) => GetDisplayModePropertiesKHR_0(physicalDevice, display, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR[], VkResult> GetDisplayModePropertiesKHR_0;
	public static VkResult GetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref uint propertyCount, [In, Out] VkDisplayModePropertiesKHR[] properties) => GetDisplayModePropertiesKHR_1(physicalDevice, display, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModePropertiesKHR[], VkResult> GetDisplayModePropertiesKHR_1;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_0(physicalDevice, display, createInfo, allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_0;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_1(physicalDevice, display, createInfo, ref allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_1;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref VkDisplayModeCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_2(physicalDevice, display, ref createInfo, allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_2;
	public static VkResult CreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, ref VkDisplayModeCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkDisplayModeKHR mode) => CreateDisplayModeKHR_3(physicalDevice, display, ref createInfo, ref allocator, out mode);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult> CreateDisplayModeKHR_3;
	public static VkResult GetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, out VkDisplayPlaneCapabilitiesKHR capabilities) => GetDisplayPlaneCapabilitiesKHR_0(physicalDevice, mode, planeIndex, out capabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayModeKHR, uint, out VkDisplayPlaneCapabilitiesKHR, VkResult> GetDisplayPlaneCapabilitiesKHR_0;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_0;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_1;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_2;
	public static VkResult CreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateDisplayPlaneSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateDisplayPlaneSurfaceKHR_3;
	public static VkResult CreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR[] createInfos, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchains) => CreateSharedSwapchainsKHR_0(device, swapchainCount, createInfos, allocator, out swapchains);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], VkAllocationCallbacks*, out VkSwapchainKHR, VkResult> CreateSharedSwapchainsKHR_0;
	public static VkResult CreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR[] createInfos, ref VkAllocationCallbacks allocator, out VkSwapchainKHR swapchains) => CreateSharedSwapchainsKHR_1(device, swapchainCount, createInfos, ref allocator, out swapchains);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult> CreateSharedSwapchainsKHR_1;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_0;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_1;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, ref VkXlibSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_2;
	public static VkResult CreateXlibSurfaceKHR(VkInstance instance, ref VkXlibSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXlibSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXlibSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* dpy, IntPtr visualID) => GetPhysicalDeviceXlibPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, dpy, visualID);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32> GetPhysicalDeviceXlibPresentationSupportKHR_0;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_0;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_1;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, ref VkXcbSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_2;
	public static VkResult CreateXcbSurfaceKHR(VkInstance instance, ref VkXcbSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateXcbSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateXcbSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* connection, IntPtr visual_id) => GetPhysicalDeviceXcbPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, connection, visual_id);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32> GetPhysicalDeviceXcbPresentationSupportKHR_0;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_0;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_1;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_2;
	public static VkResult CreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWaylandSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWaylandSurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* display) => GetPhysicalDeviceWaylandPresentationSupportKHR_0(physicalDevice, queueFamilyIndex, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, VkBool32> GetPhysicalDeviceWaylandPresentationSupportKHR_0;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_0;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_1;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_2;
	public static VkResult CreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateAndroidSurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateAndroidSurfaceKHR_3;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_0;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_1;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_2;
	public static VkResult CreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateWin32SurfaceKHR_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateWin32SurfaceKHR_3;
	public static VkBool32 GetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex) => GetPhysicalDeviceWin32PresentationSupportKHR_0(physicalDevice, queueFamilyIndex);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkBool32> GetPhysicalDeviceWin32PresentationSupportKHR_0;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_0(instance, createInfo, allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_0;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_1(instance, createInfo, ref allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_1;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_2(instance, ref createInfo, allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_2;
	public static VkResult CreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkDebugReportCallbackEXT callback) => CreateDebugReportCallbackEXT_3(instance, ref createInfo, ref allocator, out callback);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult> CreateDebugReportCallbackEXT_3;
	public static void DestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* allocator) => DestroyDebugReportCallbackEXT_0(instance, callback, allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void> DestroyDebugReportCallbackEXT_0;
	public static void DestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, ref VkAllocationCallbacks allocator) => DestroyDebugReportCallbackEXT_1(instance, callback, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, ref VkAllocationCallbacks, void> DestroyDebugReportCallbackEXT_1;
	public static void DebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, nuint location, int messageCode, string layerPrefix, string message) => DebugReportMessageEXT_0(instance, flags, objectType, @object, location, messageCode, layerPrefix, message);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, string, string, void> DebugReportMessageEXT_0;
	public static VkResult DebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* tagInfo) => DebugMarkerSetObjectTagEXT_0(device, tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult> DebugMarkerSetObjectTagEXT_0;
	public static VkResult DebugMarkerSetObjectTagEXT(VkDevice device, ref VkDebugMarkerObjectTagInfoEXT tagInfo) => DebugMarkerSetObjectTagEXT_1(device, ref tagInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectTagInfoEXT, VkResult> DebugMarkerSetObjectTagEXT_1;
	public static VkResult DebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* nameInfo) => DebugMarkerSetObjectNameEXT_0(device, nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult> DebugMarkerSetObjectNameEXT_0;
	public static VkResult DebugMarkerSetObjectNameEXT(VkDevice device, ref VkDebugMarkerObjectNameInfoEXT nameInfo) => DebugMarkerSetObjectNameEXT_1(device, ref nameInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectNameInfoEXT, VkResult> DebugMarkerSetObjectNameEXT_1;
	public static void CommandDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo) => CommandDebugMarkerBeginEXT_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> CommandDebugMarkerBeginEXT_0;
	public static void CommandDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfoEXT markerInfo) => CommandDebugMarkerBeginEXT_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void> CommandDebugMarkerBeginEXT_1;
	public static void CommandDebugMarkerEndEXT(VkCommandBuffer commandBuffer) => CommandDebugMarkerEndEXT_0(commandBuffer);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, void> CommandDebugMarkerEndEXT_0;
	public static void CommandDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo) => CommandDebugMarkerInsertEXT_0(commandBuffer, markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> CommandDebugMarkerInsertEXT_0;
	public static void CommandDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfoEXT markerInfo) => CommandDebugMarkerInsertEXT_1(commandBuffer, ref markerInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void> CommandDebugMarkerInsertEXT_1;
	public static void CommandDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndirectCountAMD_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndirectCountAMD_0;
	public static void CommandDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride) => CommandDrawIndexedIndirectCountAMD_0(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> CommandDrawIndexedIndirectCountAMD_0;
	public static VkResult GetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, nuint* infoSize, void* info) => GetShaderInfoAMD_0(device, pipeline, shaderStage, infoType, infoSize, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, nuint*, void*, VkResult> GetShaderInfoAMD_0;
	public static VkResult GetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ref nuint infoSize, void* info) => GetShaderInfoAMD_1(device, pipeline, shaderStage, infoType, ref infoSize, info);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, ref nuint, void*, VkResult> GetShaderInfoAMD_1;
	public static VkResult GetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, out VkExternalImageFormatPropertiesNV externalImageFormatProperties) => GetPhysicalDeviceExternalImageFormatPropertiesNV_0(physicalDevice, format, type, tiling, usage, flags, externalHandleType, out externalImageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, out VkExternalImageFormatPropertiesNV, VkResult> GetPhysicalDeviceExternalImageFormatPropertiesNV_0;
	public static VkResult GetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, out IntPtr handle) => GetMemoryWin32HandleNV_0(device, memory, handleType, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, out IntPtr, VkResult> GetMemoryWin32HandleNV_0;
	public static void GetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2KHR features) => GetPhysicalDeviceFeatures2KHR_0(physicalDevice, out features);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2KHR, void> GetPhysicalDeviceFeatures2KHR_0;
	public static void GetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2KHR properties) => GetPhysicalDeviceProperties2KHR_0(physicalDevice, out properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2KHR, void> GetPhysicalDeviceProperties2KHR_0;
	public static void GetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2KHR formatProperties) => GetPhysicalDeviceFormatProperties2KHR_0(physicalDevice, format, out formatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2KHR, void> GetPhysicalDeviceFormatProperties2KHR_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2KHR* imageFormatInfo, out VkImageFormatProperties2KHR imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2KHR_0(physicalDevice, imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2KHR*, out VkImageFormatProperties2KHR, VkResult> GetPhysicalDeviceImageFormatProperties2KHR_0;
	public static VkResult GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2KHR imageFormatInfo, out VkImageFormatProperties2KHR imageFormatProperties) => GetPhysicalDeviceImageFormatProperties2KHR_1(physicalDevice, ref imageFormatInfo, out imageFormatProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2KHR, out VkImageFormatProperties2KHR, VkResult> GetPhysicalDeviceImageFormatProperties2KHR_1;
	public static void GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2KHR[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2KHR_0(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2KHR[], void> GetPhysicalDeviceQueueFamilyProperties2KHR_0;
	public static void GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, [In, Out] VkQueueFamilyProperties2KHR[] queueFamilyProperties) => GetPhysicalDeviceQueueFamilyProperties2KHR_1(physicalDevice, ref queueFamilyPropertyCount, queueFamilyProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2KHR[], void> GetPhysicalDeviceQueueFamilyProperties2KHR_1;
	public static void GetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2KHR memoryProperties) => GetPhysicalDeviceMemoryProperties2KHR_0(physicalDevice, out memoryProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2KHR, void> GetPhysicalDeviceMemoryProperties2KHR_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR* formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2KHR[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_0(physicalDevice, formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR*, uint*, VkSparseImageFormatProperties2KHR[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_0;
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR* formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2KHR[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_1(physicalDevice, formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR*, ref uint, VkSparseImageFormatProperties2KHR[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_1;
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR formatInfo, uint* propertyCount, [In, Out] VkSparseImageFormatProperties2KHR[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_2(physicalDevice, ref formatInfo, propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR, uint*, VkSparseImageFormatProperties2KHR[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_2;
	public static void GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR formatInfo, ref uint propertyCount, [In, Out] VkSparseImageFormatProperties2KHR[] properties) => GetPhysicalDeviceSparseImageFormatProperties2KHR_3(physicalDevice, ref formatInfo, ref propertyCount, properties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR, ref uint, VkSparseImageFormatProperties2KHR[], void> GetPhysicalDeviceSparseImageFormatProperties2KHR_3;
	public static void GetDeviceGroupPeerMemoryFeaturesKHX(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlagsKHX peerMemoryFeatures) => GetDeviceGroupPeerMemoryFeaturesKHX_0(device, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlagsKHX, void> GetDeviceGroupPeerMemoryFeaturesKHX_0;
	public static void CommandSetDeviceMaskKHX(VkCommandBuffer commandBuffer, uint deviceMask) => CommandSetDeviceMaskKHX_0(commandBuffer, deviceMask);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void> CommandSetDeviceMaskKHX_0;
	public static void CommandDispatchBaseKHX(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ) => CommandDispatchBaseKHX_0(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> CommandDispatchBaseKHX_0;
	public static VkResult GetDeviceGroupPresentCapabilitiesKHX(VkDevice device, out VkDeviceGroupPresentCapabilitiesKHX deviceGroupPresentCapabilities) => GetDeviceGroupPresentCapabilitiesKHX_0(device, out deviceGroupPresentCapabilities);
	private static delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceGroupPresentCapabilitiesKHX, VkResult> GetDeviceGroupPresentCapabilitiesKHX_0;
	public static VkResult GetDeviceGroupSurfacePresentModesKHX(VkDevice device, VkSurfaceKHR surface, out VkDeviceGroupPresentModeFlagsKHX modes) => GetDeviceGroupSurfacePresentModesKHX_0(device, surface, out modes);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSurfaceKHR, out VkDeviceGroupPresentModeFlagsKHX, VkResult> GetDeviceGroupSurfacePresentModesKHX_0;
	public static VkResult GetPhysicalDevicePresentRectanglesKHX(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* rectCount, [In, Out] VkRect2D[] rects) => GetPhysicalDevicePresentRectanglesKHX_0(physicalDevice, surface, rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D[], VkResult> GetPhysicalDevicePresentRectanglesKHX_0;
	public static VkResult GetPhysicalDevicePresentRectanglesKHX(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, ref uint rectCount, [In, Out] VkRect2D[] rects) => GetPhysicalDevicePresentRectanglesKHX_1(physicalDevice, surface, ref rectCount, rects);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkRect2D[], VkResult> GetPhysicalDevicePresentRectanglesKHX_1;
	public static VkResult AcquireNextImage2KHX(VkDevice device, VkAcquireNextImageInfoKHX* acquireInfo, out uint imageIndex) => AcquireNextImage2KHX_0(device, acquireInfo, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkAcquireNextImageInfoKHX*, out uint, VkResult> AcquireNextImage2KHX_0;
	public static VkResult AcquireNextImage2KHX(VkDevice device, ref VkAcquireNextImageInfoKHX acquireInfo, out uint imageIndex) => AcquireNextImage2KHX_1(device, ref acquireInfo, out imageIndex);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireNextImageInfoKHX, out uint, VkResult> AcquireNextImage2KHX_1;
	public static VkResult CreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateViSurfaceNN_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateViSurfaceNN_0;
	public static VkResult CreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateViSurfaceNN_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkViSurfaceCreateInfoNN*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateViSurfaceNN_1;
	public static VkResult CreateViSurfaceNN(VkInstance instance, ref VkViSurfaceCreateInfoNN createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateViSurfaceNN_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkViSurfaceCreateInfoNN, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateViSurfaceNN_2;
	public static VkResult CreateViSurfaceNN(VkInstance instance, ref VkViSurfaceCreateInfoNN createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateViSurfaceNN_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkViSurfaceCreateInfoNN, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateViSurfaceNN_3;
	public static void TrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) => TrimCommandPoolKHR_0(device, commandPool, flags);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlagsKHR, void> TrimCommandPoolKHR_0;
	public static VkResult EnumeratePhysicalDeviceGroupsKHX(VkInstance instance, uint* physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupPropertiesKHX[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroupsKHX_0(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupPropertiesKHX[], VkResult> EnumeratePhysicalDeviceGroupsKHX_0;
	public static VkResult EnumeratePhysicalDeviceGroupsKHX(VkInstance instance, ref uint physicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupPropertiesKHX[] physicalDeviceGroupProperties) => EnumeratePhysicalDeviceGroupsKHX_1(instance, ref physicalDeviceGroupCount, physicalDeviceGroupProperties);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupPropertiesKHX[], VkResult> EnumeratePhysicalDeviceGroupsKHX_1;
	public static void GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfoKHR* externalBufferInfo, out VkExternalBufferPropertiesKHR externalBufferProperties) => GetPhysicalDeviceExternalBufferPropertiesKHR_0(physicalDevice, externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfoKHR*, out VkExternalBufferPropertiesKHR, void> GetPhysicalDeviceExternalBufferPropertiesKHR_0;
	public static void GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfoKHR externalBufferInfo, out VkExternalBufferPropertiesKHR externalBufferProperties) => GetPhysicalDeviceExternalBufferPropertiesKHR_1(physicalDevice, ref externalBufferInfo, out externalBufferProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfoKHR, out VkExternalBufferPropertiesKHR, void> GetPhysicalDeviceExternalBufferPropertiesKHR_1;
	public static VkResult GetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetMemoryWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetMemoryWin32HandleKHR_0;
	public static VkResult GetMemoryWin32HandleKHR(VkDevice device, ref VkMemoryGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetMemoryWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetWin32HandleInfoKHR, out IntPtr, VkResult> GetMemoryWin32HandleKHR_1;
	public static VkResult GetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagsKHR handleType, IntPtr handle, out VkMemoryWin32HandlePropertiesKHR memoryWin32HandleProperties) => GetMemoryWin32HandlePropertiesKHR_0(device, handleType, handle, out memoryWin32HandleProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, IntPtr, out VkMemoryWin32HandlePropertiesKHR, VkResult> GetMemoryWin32HandlePropertiesKHR_0;
	public static VkResult GetMemoryFileDescriptorKHR(VkDevice device, VkMemoryGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetMemoryFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetFdInfoKHR*, out int, VkResult> GetMemoryFileDescriptorKHR_0;
	public static VkResult GetMemoryFileDescriptorKHR(VkDevice device, ref VkMemoryGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetMemoryFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetFdInfoKHR, out int, VkResult> GetMemoryFileDescriptorKHR_1;
	public static VkResult GetMemoryFileDescriptorPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagsKHR handleType, int fileDescriptor, out VkMemoryFdPropertiesKHR memoryFileDescriptorProperties) => GetMemoryFileDescriptorPropertiesKHR_0(device, handleType, fileDescriptor, out memoryFileDescriptorProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, int, out VkMemoryFdPropertiesKHR, VkResult> GetMemoryFileDescriptorPropertiesKHR_0;
	public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfoKHR* externalSemaphoreInfo, out VkExternalSemaphorePropertiesKHR externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphorePropertiesKHR_0(physicalDevice, externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfoKHR*, out VkExternalSemaphorePropertiesKHR, void> GetPhysicalDeviceExternalSemaphorePropertiesKHR_0;
	public static void GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfoKHR externalSemaphoreInfo, out VkExternalSemaphorePropertiesKHR externalSemaphoreProperties) => GetPhysicalDeviceExternalSemaphorePropertiesKHR_1(physicalDevice, ref externalSemaphoreInfo, out externalSemaphoreProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfoKHR, out VkExternalSemaphorePropertiesKHR, void> GetPhysicalDeviceExternalSemaphorePropertiesKHR_1;
	public static VkResult ImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* importSemaphoreWin32HandleInfo) => ImportSemaphoreWin32HandleKHR_0(device, importSemaphoreWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult> ImportSemaphoreWin32HandleKHR_0;
	public static VkResult ImportSemaphoreWin32HandleKHR(VkDevice device, ref VkImportSemaphoreWin32HandleInfoKHR importSemaphoreWin32HandleInfo) => ImportSemaphoreWin32HandleKHR_1(device, ref importSemaphoreWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreWin32HandleInfoKHR, VkResult> ImportSemaphoreWin32HandleKHR_1;
	public static VkResult GetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetSemaphoreWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetSemaphoreWin32HandleKHR_0;
	public static VkResult GetSemaphoreWin32HandleKHR(VkDevice device, ref VkSemaphoreGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetSemaphoreWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetWin32HandleInfoKHR, out IntPtr, VkResult> GetSemaphoreWin32HandleKHR_1;
	public static VkResult ImportSemaphoreFileDescriptorKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* importSemaphoreFileDescriptorInfo) => ImportSemaphoreFileDescriptorKHR_0(device, importSemaphoreFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult> ImportSemaphoreFileDescriptorKHR_0;
	public static VkResult ImportSemaphoreFileDescriptorKHR(VkDevice device, ref VkImportSemaphoreFdInfoKHR importSemaphoreFileDescriptorInfo) => ImportSemaphoreFileDescriptorKHR_1(device, ref importSemaphoreFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreFdInfoKHR, VkResult> ImportSemaphoreFileDescriptorKHR_1;
	public static VkResult GetSemaphoreFileDescriptorKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetSemaphoreFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetFdInfoKHR*, out int, VkResult> GetSemaphoreFileDescriptorKHR_0;
	public static VkResult GetSemaphoreFileDescriptorKHR(VkDevice device, ref VkSemaphoreGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetSemaphoreFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetFdInfoKHR, out int, VkResult> GetSemaphoreFileDescriptorKHR_1;
	public static void CommandPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet[] descriptorWrites) => CommandPushDescriptorSetKHR_0(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet[], void> CommandPushDescriptorSetKHR_0;
	public static VkResult CreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_0(device, createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfoKHR*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplateKHR, VkResult> CreateDescriptorUpdateTemplateKHR_0;
	public static VkResult CreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_1(device, createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfoKHR*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplateKHR, VkResult> CreateDescriptorUpdateTemplateKHR_1;
	public static VkResult CreateDescriptorUpdateTemplateKHR(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_2(device, ref createInfo, allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfoKHR, VkAllocationCallbacks*, out VkDescriptorUpdateTemplateKHR, VkResult> CreateDescriptorUpdateTemplateKHR_2;
	public static VkResult CreateDescriptorUpdateTemplateKHR(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate) => CreateDescriptorUpdateTemplateKHR_3(device, ref createInfo, ref allocator, out descriptorUpdateTemplate);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfoKHR, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplateKHR, VkResult> CreateDescriptorUpdateTemplateKHR_3;
	public static void DestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, VkAllocationCallbacks* allocator) => DestroyDescriptorUpdateTemplateKHR_0(device, descriptorUpdateTemplate, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateKHR, VkAllocationCallbacks*, void> DestroyDescriptorUpdateTemplateKHR_0;
	public static void DestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, ref VkAllocationCallbacks allocator) => DestroyDescriptorUpdateTemplateKHR_1(device, descriptorUpdateTemplate, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateKHR, ref VkAllocationCallbacks, void> DestroyDescriptorUpdateTemplateKHR_1;
	public static void UpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, void* data) => UpdateDescriptorSetWithTemplateKHR_0(device, descriptorSet, descriptorUpdateTemplate, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplateKHR, void*, void> UpdateDescriptorSetWithTemplateKHR_0;
	public static void CommandPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data) => CommandPushDescriptorSetWithTemplateKHR_0(commandBuffer, descriptorUpdateTemplate, layout, set, data);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplateKHR, VkPipelineLayout, uint, void*, void> CommandPushDescriptorSetWithTemplateKHR_0;
	public static void CommandProcessCommandsNVX(VkCommandBuffer commandBuffer, VkCmdProcessCommandsInfoNVX* processCommandsInfo) => CommandProcessCommandsNVX_0(commandBuffer, processCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCmdProcessCommandsInfoNVX*, void> CommandProcessCommandsNVX_0;
	public static void CommandProcessCommandsNVX(VkCommandBuffer commandBuffer, ref VkCmdProcessCommandsInfoNVX processCommandsInfo) => CommandProcessCommandsNVX_1(commandBuffer, ref processCommandsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCmdProcessCommandsInfoNVX, void> CommandProcessCommandsNVX_1;
	public static void CommandReserveSpaceForCommandsNVX(VkCommandBuffer commandBuffer, VkCmdReserveSpaceForCommandsInfoNVX* reserveSpaceInfo) => CommandReserveSpaceForCommandsNVX_0(commandBuffer, reserveSpaceInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCmdReserveSpaceForCommandsInfoNVX*, void> CommandReserveSpaceForCommandsNVX_0;
	public static void CommandReserveSpaceForCommandsNVX(VkCommandBuffer commandBuffer, ref VkCmdReserveSpaceForCommandsInfoNVX reserveSpaceInfo) => CommandReserveSpaceForCommandsNVX_1(commandBuffer, ref reserveSpaceInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCmdReserveSpaceForCommandsInfoNVX, void> CommandReserveSpaceForCommandsNVX_1;
	public static VkResult CreateIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, out VkIndirectCommandsLayoutNVX indirectCommandsLayout) => CreateIndirectCommandsLayoutNVX_0(device, createInfo, allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNVX*, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNVX, VkResult> CreateIndirectCommandsLayoutNVX_0;
	public static VkResult CreateIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutCreateInfoNVX* createInfo, ref VkAllocationCallbacks allocator, out VkIndirectCommandsLayoutNVX indirectCommandsLayout) => CreateIndirectCommandsLayoutNVX_1(device, createInfo, ref allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNVX*, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNVX, VkResult> CreateIndirectCommandsLayoutNVX_1;
	public static VkResult CreateIndirectCommandsLayoutNVX(VkDevice device, ref VkIndirectCommandsLayoutCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, out VkIndirectCommandsLayoutNVX indirectCommandsLayout) => CreateIndirectCommandsLayoutNVX_2(device, ref createInfo, allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNVX, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNVX, VkResult> CreateIndirectCommandsLayoutNVX_2;
	public static VkResult CreateIndirectCommandsLayoutNVX(VkDevice device, ref VkIndirectCommandsLayoutCreateInfoNVX createInfo, ref VkAllocationCallbacks allocator, out VkIndirectCommandsLayoutNVX indirectCommandsLayout) => CreateIndirectCommandsLayoutNVX_3(device, ref createInfo, ref allocator, out indirectCommandsLayout);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNVX, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNVX, VkResult> CreateIndirectCommandsLayoutNVX_3;
	public static void DestroyIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, VkAllocationCallbacks* allocator) => DestroyIndirectCommandsLayoutNVX_0(device, indirectCommandsLayout, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNVX, VkAllocationCallbacks*, void> DestroyIndirectCommandsLayoutNVX_0;
	public static void DestroyIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, ref VkAllocationCallbacks allocator) => DestroyIndirectCommandsLayoutNVX_1(device, indirectCommandsLayout, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNVX, ref VkAllocationCallbacks, void> DestroyIndirectCommandsLayoutNVX_1;
	public static VkResult CreateObjectTableNVX(VkDevice device, VkObjectTableCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, out VkObjectTableNVX objectTable) => CreateObjectTableNVX_0(device, createInfo, allocator, out objectTable);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableCreateInfoNVX*, VkAllocationCallbacks*, out VkObjectTableNVX, VkResult> CreateObjectTableNVX_0;
	public static VkResult CreateObjectTableNVX(VkDevice device, VkObjectTableCreateInfoNVX* createInfo, ref VkAllocationCallbacks allocator, out VkObjectTableNVX objectTable) => CreateObjectTableNVX_1(device, createInfo, ref allocator, out objectTable);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableCreateInfoNVX*, ref VkAllocationCallbacks, out VkObjectTableNVX, VkResult> CreateObjectTableNVX_1;
	public static VkResult CreateObjectTableNVX(VkDevice device, ref VkObjectTableCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, out VkObjectTableNVX objectTable) => CreateObjectTableNVX_2(device, ref createInfo, allocator, out objectTable);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkObjectTableCreateInfoNVX, VkAllocationCallbacks*, out VkObjectTableNVX, VkResult> CreateObjectTableNVX_2;
	public static VkResult CreateObjectTableNVX(VkDevice device, ref VkObjectTableCreateInfoNVX createInfo, ref VkAllocationCallbacks allocator, out VkObjectTableNVX objectTable) => CreateObjectTableNVX_3(device, ref createInfo, ref allocator, out objectTable);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkObjectTableCreateInfoNVX, ref VkAllocationCallbacks, out VkObjectTableNVX, VkResult> CreateObjectTableNVX_3;
	public static void DestroyObjectTableNVX(VkDevice device, VkObjectTableNVX objectTable, VkAllocationCallbacks* allocator) => DestroyObjectTableNVX_0(device, objectTable, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, VkAllocationCallbacks*, void> DestroyObjectTableNVX_0;
	public static void DestroyObjectTableNVX(VkDevice device, VkObjectTableNVX objectTable, ref VkAllocationCallbacks allocator) => DestroyObjectTableNVX_1(device, objectTable, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, ref VkAllocationCallbacks, void> DestroyObjectTableNVX_1;
	public static VkResult RegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, VkObjectTableEntryNVX** objectTableEntries, uint* objectIndices) => RegisterObjectsNVX_0(device, objectTable, objectCount, objectTableEntries, objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectTableEntryNVX**, uint*, VkResult> RegisterObjectsNVX_0;
	public static VkResult RegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, VkObjectTableEntryNVX** objectTableEntries, ref uint objectIndices) => RegisterObjectsNVX_1(device, objectTable, objectCount, objectTableEntries, ref objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectTableEntryNVX**, ref uint, VkResult> RegisterObjectsNVX_1;
	public static VkResult RegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, ref VkObjectTableEntryNVX objectTableEntries, uint* objectIndices) => RegisterObjectsNVX_2(device, objectTable, objectCount, ref objectTableEntries, objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectTableEntryNVX, uint*, VkResult> RegisterObjectsNVX_2;
	public static VkResult RegisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, ref VkObjectTableEntryNVX objectTableEntries, ref uint objectIndices) => RegisterObjectsNVX_3(device, objectTable, objectCount, ref objectTableEntries, ref objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectTableEntryNVX, ref uint, VkResult> RegisterObjectsNVX_3;
	public static VkResult UnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, VkObjectEntryTypeNVX* objectEntryTypes, uint* objectIndices) => UnregisterObjectsNVX_0(device, objectTable, objectCount, objectEntryTypes, objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectEntryTypeNVX*, uint*, VkResult> UnregisterObjectsNVX_0;
	public static VkResult UnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, VkObjectEntryTypeNVX* objectEntryTypes, ref uint objectIndices) => UnregisterObjectsNVX_1(device, objectTable, objectCount, objectEntryTypes, ref objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectEntryTypeNVX*, ref uint, VkResult> UnregisterObjectsNVX_1;
	public static VkResult UnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, ref VkObjectEntryTypeNVX objectEntryTypes, uint* objectIndices) => UnregisterObjectsNVX_2(device, objectTable, objectCount, ref objectEntryTypes, objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectEntryTypeNVX, uint*, VkResult> UnregisterObjectsNVX_2;
	public static VkResult UnregisterObjectsNVX(VkDevice device, VkObjectTableNVX objectTable, uint objectCount, ref VkObjectEntryTypeNVX objectEntryTypes, ref uint objectIndices) => UnregisterObjectsNVX_3(device, objectTable, objectCount, ref objectEntryTypes, ref objectIndices);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectEntryTypeNVX, ref uint, VkResult> UnregisterObjectsNVX_3;
	public static void GetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* features, out VkDeviceGeneratedCommandsLimitsNVX limits) => GetPhysicalDeviceGeneratedCommandsPropertiesNVX_0(physicalDevice, features, out limits);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceGeneratedCommandsFeaturesNVX*, out VkDeviceGeneratedCommandsLimitsNVX, void> GetPhysicalDeviceGeneratedCommandsPropertiesNVX_0;
	public static void GetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice physicalDevice, ref VkDeviceGeneratedCommandsFeaturesNVX features, out VkDeviceGeneratedCommandsLimitsNVX limits) => GetPhysicalDeviceGeneratedCommandsPropertiesNVX_1(physicalDevice, ref features, out limits);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceGeneratedCommandsFeaturesNVX, out VkDeviceGeneratedCommandsLimitsNVX, void> GetPhysicalDeviceGeneratedCommandsPropertiesNVX_1;
	public static void CommandSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* viewportWScalings) => CommandSetViewportWScalingNV_0(commandBuffer, firstViewport, viewportCount, viewportWScalings);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void> CommandSetViewportWScalingNV_0;
	public static void CommandSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewportWScalingNV viewportWScalings) => CommandSetViewportWScalingNV_1(commandBuffer, firstViewport, viewportCount, ref viewportWScalings);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportWScalingNV, void> CommandSetViewportWScalingNV_1;
	public static VkResult ReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) => ReleaseDisplayEXT_0(physicalDevice, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult> ReleaseDisplayEXT_0;
	public static VkResult AcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, void* dpy, VkDisplayKHR display) => AcquireXlibDisplayEXT_0(physicalDevice, dpy, display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, void*, VkDisplayKHR, VkResult> AcquireXlibDisplayEXT_0;
	public static VkResult GetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, void* dpy, IntPtr rrOutput, out VkDisplayKHR display) => GetRandROutputDisplayEXT_0(physicalDevice, dpy, rrOutput, out display);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, void*, IntPtr, out VkDisplayKHR, VkResult> GetRandROutputDisplayEXT_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilities2EXT surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2EXT_0(physicalDevice, surface, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilities2EXT, VkResult> GetPhysicalDeviceSurfaceCapabilities2EXT_0;
	public static VkResult DisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* displayPowerInfo) => DisplayPowerControlEXT_0(device, display, displayPowerInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult> DisplayPowerControlEXT_0;
	public static VkResult DisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayPowerInfoEXT displayPowerInfo) => DisplayPowerControlEXT_1(device, display, ref displayPowerInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayPowerInfoEXT, VkResult> DisplayPowerControlEXT_1;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDeviceEventEXT_0(device, deviceEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDeviceEventEXT_0;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDeviceEventEXT_1(device, deviceEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDeviceEventEXT_1;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDeviceEventEXT_2(device, deviceEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDeviceEventEXT_2;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDeviceEventEXT_3(device, deviceEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDeviceEventEXT_3;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDeviceEventEXT_4(device, ref deviceEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDeviceEventEXT_4;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDeviceEventEXT_5(device, ref deviceEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDeviceEventEXT_5;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDeviceEventEXT_6(device, ref deviceEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDeviceEventEXT_6;
	public static VkResult RegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfoEXT deviceEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDeviceEventEXT_7(device, ref deviceEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDeviceEventEXT_7;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDisplayEventEXT_0(device, display, displayEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDisplayEventEXT_0;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDisplayEventEXT_1(device, display, displayEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDisplayEventEXT_1;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDisplayEventEXT_2(device, display, displayEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDisplayEventEXT_2;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDisplayEventEXT_3(device, display, displayEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDisplayEventEXT_3;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence) => RegisterDisplayEventEXT_4(device, display, ref displayEventInfo, allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult> RegisterDisplayEventEXT_4;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, VkAllocationCallbacks* allocator, ref VkFence fence) => RegisterDisplayEventEXT_5(device, display, ref displayEventInfo, allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult> RegisterDisplayEventEXT_5;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, ref VkAllocationCallbacks allocator, VkFence* fence) => RegisterDisplayEventEXT_6(device, display, ref displayEventInfo, ref allocator, fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult> RegisterDisplayEventEXT_6;
	public static VkResult RegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, ref VkDisplayEventInfoEXT displayEventInfo, ref VkAllocationCallbacks allocator, ref VkFence fence) => RegisterDisplayEventEXT_7(device, display, ref displayEventInfo, ref allocator, ref fence);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult> RegisterDisplayEventEXT_7;
	public static VkResult GetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagsEXT counter, out ulong counterValue) => GetSwapchainCounterEXT_0(device, swapchain, counter, out counterValue);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, out ulong, VkResult> GetSwapchainCounterEXT_0;
	public static VkResult GetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, out VkRefreshCycleDurationGOOGLE displayTimingProperties) => GetRefreshCycleDurationGOOGLE_0(device, swapchain, out displayTimingProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, out VkRefreshCycleDurationGOOGLE, VkResult> GetRefreshCycleDurationGOOGLE_0;
	public static VkResult GetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint* presentationTimingCount, [In, Out] VkPastPresentationTimingGOOGLE[] presentationTimings) => GetPastPresentationTimingGOOGLE_0(device, swapchain, presentationTimingCount, presentationTimings);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE[], VkResult> GetPastPresentationTimingGOOGLE_0;
	public static VkResult GetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, ref uint presentationTimingCount, [In, Out] VkPastPresentationTimingGOOGLE[] presentationTimings) => GetPastPresentationTimingGOOGLE_1(device, swapchain, ref presentationTimingCount, presentationTimings);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkPastPresentationTimingGOOGLE[], VkResult> GetPastPresentationTimingGOOGLE_1;
	public static void CommandSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D[] discardRectangles) => CommandSetDiscardRectangleEXT_0(commandBuffer, firstDiscardRectangle, discardRectangleCount, discardRectangles);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void> CommandSetDiscardRectangleEXT_0;
	public static void SetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR[] swapchains, VkHdrMetadataEXT* metadata) => SetHdrMetadataEXT_0(device, swapchainCount, swapchains, metadata);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], VkHdrMetadataEXT*, void> SetHdrMetadataEXT_0;
	public static void SetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR[] swapchains, ref VkHdrMetadataEXT metadata) => SetHdrMetadataEXT_1(device, swapchainCount, swapchains, ref metadata);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], ref VkHdrMetadataEXT, void> SetHdrMetadataEXT_1;
	public static VkResult GetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) => GetSwapchainStatusKHR_0(device, swapchain);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult> GetSwapchainStatusKHR_0;
	public static void GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfoKHR* externalFenceInfo, out VkExternalFencePropertiesKHR externalFenceProperties) => GetPhysicalDeviceExternalFencePropertiesKHR_0(physicalDevice, externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfoKHR*, out VkExternalFencePropertiesKHR, void> GetPhysicalDeviceExternalFencePropertiesKHR_0;
	public static void GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfoKHR externalFenceInfo, out VkExternalFencePropertiesKHR externalFenceProperties) => GetPhysicalDeviceExternalFencePropertiesKHR_1(physicalDevice, ref externalFenceInfo, out externalFenceProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfoKHR, out VkExternalFencePropertiesKHR, void> GetPhysicalDeviceExternalFencePropertiesKHR_1;
	public static VkResult ImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfoKHR* importFenceWin32HandleInfo) => ImportFenceWin32HandleKHR_0(device, importFenceWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult> ImportFenceWin32HandleKHR_0;
	public static VkResult ImportFenceWin32HandleKHR(VkDevice device, ref VkImportFenceWin32HandleInfoKHR importFenceWin32HandleInfo) => ImportFenceWin32HandleKHR_1(device, ref importFenceWin32HandleInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceWin32HandleInfoKHR, VkResult> ImportFenceWin32HandleKHR_1;
	public static VkResult GetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR* getWin32HandleInfo, out IntPtr handle) => GetFenceWin32HandleKHR_0(device, getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetWin32HandleInfoKHR*, out IntPtr, VkResult> GetFenceWin32HandleKHR_0;
	public static VkResult GetFenceWin32HandleKHR(VkDevice device, ref VkFenceGetWin32HandleInfoKHR getWin32HandleInfo, out IntPtr handle) => GetFenceWin32HandleKHR_1(device, ref getWin32HandleInfo, out handle);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetWin32HandleInfoKHR, out IntPtr, VkResult> GetFenceWin32HandleKHR_1;
	public static VkResult ImportFenceFileDescriptorKHR(VkDevice device, VkImportFenceFdInfoKHR* importFenceFileDescriptorInfo) => ImportFenceFileDescriptorKHR_0(device, importFenceFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceFdInfoKHR*, VkResult> ImportFenceFileDescriptorKHR_0;
	public static VkResult ImportFenceFileDescriptorKHR(VkDevice device, ref VkImportFenceFdInfoKHR importFenceFileDescriptorInfo) => ImportFenceFileDescriptorKHR_1(device, ref importFenceFileDescriptorInfo);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceFdInfoKHR, VkResult> ImportFenceFileDescriptorKHR_1;
	public static VkResult GetFenceFileDescriptorKHR(VkDevice device, VkFenceGetFdInfoKHR* getFileDescriptorInfo, out int fileDescriptor) => GetFenceFileDescriptorKHR_0(device, getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetFdInfoKHR*, out int, VkResult> GetFenceFileDescriptorKHR_0;
	public static VkResult GetFenceFileDescriptorKHR(VkDevice device, ref VkFenceGetFdInfoKHR getFileDescriptorInfo, out int fileDescriptor) => GetFenceFileDescriptorKHR_1(device, ref getFileDescriptorInfo, out fileDescriptor);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetFdInfoKHR, out int, VkResult> GetFenceFileDescriptorKHR_1;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, out VkSurfaceCapabilities2KHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2KHR_0(physicalDevice, surfaceInfo, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkSurfaceCapabilities2KHR, VkResult> GetPhysicalDeviceSurfaceCapabilities2KHR_0;
	public static VkResult GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, out VkSurfaceCapabilities2KHR surfaceCapabilities) => GetPhysicalDeviceSurfaceCapabilities2KHR_1(physicalDevice, ref surfaceInfo, out surfaceCapabilities);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkSurfaceCapabilities2KHR, VkResult> GetPhysicalDeviceSurfaceCapabilities2KHR_1;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_0(physicalDevice, surfaceInfo, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_0;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_1(physicalDevice, surfaceInfo, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_1;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, uint* surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_2(physicalDevice, ref surfaceInfo, surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_2;
	public static VkResult GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo, ref uint surfaceFormatCount, [In, Out] VkSurfaceFormat2KHR[] surfaceFormats) => GetPhysicalDeviceSurfaceFormats2KHR_3(physicalDevice, ref surfaceInfo, ref surfaceFormatCount, surfaceFormats);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkSurfaceFormat2KHR[], VkResult> GetPhysicalDeviceSurfaceFormats2KHR_3;
	public static VkResult CreateIOSSurfaceMVK(VkInstance instance, VkIOSSurfaceCreateInfoMVK* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateIOSSurfaceMVK_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateIOSSurfaceMVK_0;
	public static VkResult CreateIOSSurfaceMVK(VkInstance instance, VkIOSSurfaceCreateInfoMVK* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateIOSSurfaceMVK_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkIOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateIOSSurfaceMVK_1;
	public static VkResult CreateIOSSurfaceMVK(VkInstance instance, ref VkIOSSurfaceCreateInfoMVK createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateIOSSurfaceMVK_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkIOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateIOSSurfaceMVK_2;
	public static VkResult CreateIOSSurfaceMVK(VkInstance instance, ref VkIOSSurfaceCreateInfoMVK createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateIOSSurfaceMVK_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkIOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateIOSSurfaceMVK_3;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_0(instance, createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_0;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_1(instance, createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_1;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, ref VkMacOSSurfaceCreateInfoMVK createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_2(instance, ref createInfo, allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_2;
	public static VkResult CreateMacOSSurfaceMVK(VkInstance instance, ref VkMacOSSurfaceCreateInfoMVK createInfo, ref VkAllocationCallbacks allocator, out VkSurfaceKHR surface) => CreateMacOSSurfaceMVK_3(instance, ref createInfo, ref allocator, out surface);
	private static delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult> CreateMacOSSurfaceMVK_3;
	public static void CommandSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* sampleLocationsInfo) => CommandSetSampleLocationsEXT_0(commandBuffer, sampleLocationsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleLocationsInfoEXT*, void> CommandSetSampleLocationsEXT_0;
	public static void CommandSetSampleLocationsEXT(VkCommandBuffer commandBuffer, ref VkSampleLocationsInfoEXT sampleLocationsInfo) => CommandSetSampleLocationsEXT_1(commandBuffer, ref sampleLocationsInfo);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSampleLocationsInfoEXT, void> CommandSetSampleLocationsEXT_1;
	public static void GetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, out VkMultisamplePropertiesEXT multisampleProperties) => GetPhysicalDeviceMultisamplePropertiesEXT_0(physicalDevice, samples, out multisampleProperties);
	private static delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSampleCountFlags, out VkMultisamplePropertiesEXT, void> GetPhysicalDeviceMultisamplePropertiesEXT_0;
	public static void GetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2KHR* info, out VkMemoryRequirements2KHR memoryRequirements) => GetImageMemoryRequirements2KHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2KHR*, out VkMemoryRequirements2KHR, void> GetImageMemoryRequirements2KHR_0;
	public static void GetImageMemoryRequirements2KHR(VkDevice device, ref VkImageMemoryRequirementsInfo2KHR info, out VkMemoryRequirements2KHR memoryRequirements) => GetImageMemoryRequirements2KHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2KHR, out VkMemoryRequirements2KHR, void> GetImageMemoryRequirements2KHR_1;
	public static void GetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2KHR* info, out VkMemoryRequirements2KHR memoryRequirements) => GetBufferMemoryRequirements2KHR_0(device, info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2KHR*, out VkMemoryRequirements2KHR, void> GetBufferMemoryRequirements2KHR_0;
	public static void GetBufferMemoryRequirements2KHR(VkDevice device, ref VkBufferMemoryRequirementsInfo2KHR info, out VkMemoryRequirements2KHR memoryRequirements) => GetBufferMemoryRequirements2KHR_1(device, ref info, out memoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2KHR, out VkMemoryRequirements2KHR, void> GetBufferMemoryRequirements2KHR_1;
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2KHR* info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2KHR[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_0(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2KHR*, uint*, VkSparseImageMemoryRequirements2KHR[], void> GetImageSparseMemoryRequirements2KHR_0;
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2KHR* info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2KHR[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_1(device, info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2KHR*, ref uint, VkSparseImageMemoryRequirements2KHR[], void> GetImageSparseMemoryRequirements2KHR_1;
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2KHR info, uint* sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2KHR[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_2(device, ref info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2KHR, uint*, VkSparseImageMemoryRequirements2KHR[], void> GetImageSparseMemoryRequirements2KHR_2;
	public static void GetImageSparseMemoryRequirements2KHR(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2KHR info, ref uint sparseMemoryRequirementCount, [In, Out] VkSparseImageMemoryRequirements2KHR[] sparseMemoryRequirements) => GetImageSparseMemoryRequirements2KHR_3(device, ref info, ref sparseMemoryRequirementCount, sparseMemoryRequirements);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2KHR, ref uint, VkSparseImageMemoryRequirements2KHR[], void> GetImageSparseMemoryRequirements2KHR_3;
	public static VkResult CreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversionKHR ycbcrConversion) => CreateSamplerYcbcrConversionKHR_0(device, createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfoKHR*, VkAllocationCallbacks*, out VkSamplerYcbcrConversionKHR, VkResult> CreateSamplerYcbcrConversionKHR_0;
	public static VkResult CreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfoKHR* createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversionKHR ycbcrConversion) => CreateSamplerYcbcrConversionKHR_1(device, createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfoKHR*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversionKHR, VkResult> CreateSamplerYcbcrConversionKHR_1;
	public static VkResult CreateSamplerYcbcrConversionKHR(VkDevice device, ref VkSamplerYcbcrConversionCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversionKHR ycbcrConversion) => CreateSamplerYcbcrConversionKHR_2(device, ref createInfo, allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfoKHR, VkAllocationCallbacks*, out VkSamplerYcbcrConversionKHR, VkResult> CreateSamplerYcbcrConversionKHR_2;
	public static VkResult CreateSamplerYcbcrConversionKHR(VkDevice device, ref VkSamplerYcbcrConversionCreateInfoKHR createInfo, ref VkAllocationCallbacks allocator, out VkSamplerYcbcrConversionKHR ycbcrConversion) => CreateSamplerYcbcrConversionKHR_3(device, ref createInfo, ref allocator, out ycbcrConversion);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfoKHR, ref VkAllocationCallbacks, out VkSamplerYcbcrConversionKHR, VkResult> CreateSamplerYcbcrConversionKHR_3;
	public static void DestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, VkAllocationCallbacks* allocator) => DestroySamplerYcbcrConversionKHR_0(device, ycbcrConversion, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionKHR, VkAllocationCallbacks*, void> DestroySamplerYcbcrConversionKHR_0;
	public static void DestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, ref VkAllocationCallbacks allocator) => DestroySamplerYcbcrConversionKHR_1(device, ycbcrConversion, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionKHR, ref VkAllocationCallbacks, void> DestroySamplerYcbcrConversionKHR_1;
	public static VkResult BindBufferMemory2KHR(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfoKHR[] bindInfos) => BindBufferMemory2KHR_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfoKHR[], VkResult> BindBufferMemory2KHR_0;
	public static VkResult BindImageMemory2KHR(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfoKHR[] bindInfos) => BindImageMemory2KHR_0(device, bindInfoCount, bindInfos);
	private static delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfoKHR[], VkResult> BindImageMemory2KHR_0;
	public static VkResult CreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_0(device, createInfo, allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_0;
	public static VkResult CreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, ref VkAllocationCallbacks allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_1(device, createInfo, ref allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_1;
	public static VkResult CreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_2(device, ref createInfo, allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_2;
	public static VkResult CreateValidationCacheEXT(VkDevice device, ref VkValidationCacheCreateInfoEXT createInfo, ref VkAllocationCallbacks allocator, out VkValidationCacheEXT validationCache) => CreateValidationCacheEXT_3(device, ref createInfo, ref allocator, out validationCache);
	private static delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult> CreateValidationCacheEXT_3;
	public static void DestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* allocator) => DestroyValidationCacheEXT_0(device, validationCache, allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void> DestroyValidationCacheEXT_0;
	public static void DestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, ref VkAllocationCallbacks allocator) => DestroyValidationCacheEXT_1(device, validationCache, ref allocator);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref VkAllocationCallbacks, void> DestroyValidationCacheEXT_1;
	public static VkResult MergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT destinationCache, uint sourceCacheCount, VkValidationCacheEXT[] sourceCaches) => MergeValidationCachesEXT_0(device, destinationCache, sourceCacheCount, sourceCaches);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT[], VkResult> MergeValidationCachesEXT_0;
	public static VkResult GetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, nuint* dataSize, void* data) => GetValidationCacheDataEXT_0(device, validationCache, dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, nuint*, void*, VkResult> GetValidationCacheDataEXT_0;
	public static VkResult GetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, ref nuint dataSize, void* data) => GetValidationCacheDataEXT_1(device, validationCache, ref dataSize, data);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref nuint, void*, VkResult> GetValidationCacheDataEXT_1;
	public static VkResult GetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagsKHR handleType, void* hostPointer, out VkMemoryHostPointerPropertiesEXT memoryHostPointerProperties) => GetMemoryHostPointerPropertiesEXT_0(device, handleType, hostPointer, out memoryHostPointerProperties);
	private static delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, void*, out VkMemoryHostPointerPropertiesEXT, VkResult> GetMemoryHostPointerPropertiesEXT_0;
	public static void CommandWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkBuffer destinationBuffer, VkDeviceSize destinationOffset, uint marker) => CommandWriteBufferMarkerAMD_0(commandBuffer, pipelineStage, destinationBuffer, destinationOffset, marker);
	private static delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, VkDeviceSize, uint, void> CommandWriteBufferMarkerAMD_0;
	private static readonly OSVulkanLibraryBase VulkanLibrary;
	static VK()
	{
		VulkanLibrary = OSVulkanLibraryBase.CreateOSVulkanLibrary();
		InitialiseRequiredMethods();
	}
	private static void InitialiseRequiredMethods()
	{
		var createInstance = VulkanLibrary.GetFunctionPointer("CreateInstance");
		CreateInstance_0 = (delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, VkAllocationCallbacks*, out VkInstance, VkResult>)createInstance;
		CreateInstance_1 = (delegate* unmanaged[Cdecl]<VkInstanceCreateInfo*, ref VkAllocationCallbacks, out VkInstance, VkResult>)createInstance;
		CreateInstance_2 = (delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, VkAllocationCallbacks*, out VkInstance, VkResult>)createInstance;
		CreateInstance_3 = (delegate* unmanaged[Cdecl]<ref VkInstanceCreateInfo, ref VkAllocationCallbacks, out VkInstance, VkResult>)createInstance;
		var getInstanceProcedureAddress = VulkanLibrary.GetFunctionPointer("GetInstanceProcedureAddress");
		GetInstanceProcedureAddress_0 = (delegate* unmanaged[Cdecl]<VkInstance, string, delegate*<void>>)getInstanceProcedureAddress;
		var enumerateInstanceExtensionProperties = VulkanLibrary.GetFunctionPointer("EnumerateInstanceExtensionProperties");
		EnumerateInstanceExtensionProperties_0 = (delegate* unmanaged[Cdecl]<string, uint*, VkExtensionProperties[], VkResult>)enumerateInstanceExtensionProperties;
		EnumerateInstanceExtensionProperties_1 = (delegate* unmanaged[Cdecl]<string, ref uint, VkExtensionProperties[], VkResult>)enumerateInstanceExtensionProperties;
		var enumerateInstanceLayerProperties = VulkanLibrary.GetFunctionPointer("EnumerateInstanceLayerProperties");
		EnumerateInstanceLayerProperties_0 = (delegate* unmanaged[Cdecl]<uint*, VkLayerProperties[], VkResult>)enumerateInstanceLayerProperties;
		EnumerateInstanceLayerProperties_1 = (delegate* unmanaged[Cdecl]<ref uint, VkLayerProperties[], VkResult>)enumerateInstanceLayerProperties;
	}
	public static void InitialiseInstanceMethods(VkInstance instance)
	{
		var destroyInstance = GetInstanceProcedureAddress(instance, "DestroyInstance");
		DestroyInstance_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkAllocationCallbacks*, void>)destroyInstance;
		DestroyInstance_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAllocationCallbacks, void>)destroyInstance;
		var enumeratePhysicalDevices = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDevices");
		EnumeratePhysicalDevices_0 = (delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDevice[], VkResult>)enumeratePhysicalDevices;
		EnumeratePhysicalDevices_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDevice[], VkResult>)enumeratePhysicalDevices;
		var getPhysicalDeviceFeatures = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFeatures");
		GetPhysicalDeviceFeatures_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures, void>)getPhysicalDeviceFeatures;
		var getPhysicalDeviceFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFormatProperties");
		GetPhysicalDeviceFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties, void>)getPhysicalDeviceFormatProperties;
		var getPhysicalDeviceImageFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceImageFormatProperties");
		GetPhysicalDeviceImageFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, out VkImageFormatProperties, VkResult>)getPhysicalDeviceImageFormatProperties;
		var getPhysicalDeviceProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceProperties");
		GetPhysicalDeviceProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties, void>)getPhysicalDeviceProperties;
		var getPhysicalDeviceQueueFamilyProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyProperties");
		GetPhysicalDeviceQueueFamilyProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties[], void>)getPhysicalDeviceQueueFamilyProperties;
		GetPhysicalDeviceQueueFamilyProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties[], void>)getPhysicalDeviceQueueFamilyProperties;
		var getPhysicalDeviceMemoryProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMemoryProperties");
		GetPhysicalDeviceMemoryProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties, void>)getPhysicalDeviceMemoryProperties;
		var getDeviceProcedureAddress = GetInstanceProcedureAddress(instance, "GetDeviceProcedureAddress");
		GetDeviceProcedureAddress_0 = (delegate* unmanaged[Cdecl]<VkDevice, string, delegate*<void>>)getDeviceProcedureAddress;
		var createDevice = GetInstanceProcedureAddress(instance, "CreateDevice");
		CreateDevice_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, out VkDevice, VkResult>)createDevice;
		CreateDevice_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceCreateInfo*, ref VkAllocationCallbacks, out VkDevice, VkResult>)createDevice;
		CreateDevice_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, VkAllocationCallbacks*, out VkDevice, VkResult>)createDevice;
		CreateDevice_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceCreateInfo, ref VkAllocationCallbacks, out VkDevice, VkResult>)createDevice;
		var destroyDevice = GetInstanceProcedureAddress(instance, "DestroyDevice");
		DestroyDevice_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAllocationCallbacks*, void>)destroyDevice;
		DestroyDevice_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAllocationCallbacks, void>)destroyDevice;
		var enumerateDeviceExtensionProperties = GetInstanceProcedureAddress(instance, "EnumerateDeviceExtensionProperties");
		EnumerateDeviceExtensionProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, uint*, VkExtensionProperties[], VkResult>)enumerateDeviceExtensionProperties;
		EnumerateDeviceExtensionProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, string, ref uint, VkExtensionProperties[], VkResult>)enumerateDeviceExtensionProperties;
		var enumerateDeviceLayerProperties = GetInstanceProcedureAddress(instance, "EnumerateDeviceLayerProperties");
		EnumerateDeviceLayerProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkLayerProperties[], VkResult>)enumerateDeviceLayerProperties;
		EnumerateDeviceLayerProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkLayerProperties[], VkResult>)enumerateDeviceLayerProperties;
		var getDeviceQueue = GetInstanceProcedureAddress(instance, "GetDeviceQueue");
		GetDeviceQueue_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, uint, out VkQueue, void>)getDeviceQueue;
		var queueSubmit = GetInstanceProcedureAddress(instance, "QueueSubmit");
		QueueSubmit_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo[], VkFence, VkResult>)queueSubmit;
		var queueWaitIdle = GetInstanceProcedureAddress(instance, "QueueWaitIdle");
		QueueWaitIdle_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkResult>)queueWaitIdle;
		var deviceWaitIdle = GetInstanceProcedureAddress(instance, "DeviceWaitIdle");
		DeviceWaitIdle_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkResult>)deviceWaitIdle;
		var allocateMemory = GetInstanceProcedureAddress(instance, "AllocateMemory");
		AllocateMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, VkAllocationCallbacks*, out VkDeviceMemory, VkResult>)allocateMemory;
		AllocateMemory_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryAllocateInfo, ref VkAllocationCallbacks, out VkDeviceMemory, VkResult>)allocateMemory;
		var freeMemory = GetInstanceProcedureAddress(instance, "FreeMemory");
		FreeMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)freeMemory;
		FreeMemory_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, ref VkAllocationCallbacks, void>)freeMemory;
		var mapMemory = GetInstanceProcedureAddress(instance, "MapMemory");
		MapMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**, VkResult>)mapMemory;
		var unmapMemory = GetInstanceProcedureAddress(instance, "UnmapMemory");
		UnmapMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void>)unmapMemory;
		var flushMappedMemoryRanges = GetInstanceProcedureAddress(instance, "FlushMappedMemoryRanges");
		FlushMappedMemoryRanges_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult>)flushMappedMemoryRanges;
		var invalidateMappedMemoryRanges = GetInstanceProcedureAddress(instance, "InvalidateMappedMemoryRanges");
		InvalidateMappedMemoryRanges_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange[], VkResult>)invalidateMappedMemoryRanges;
		var getDeviceMemoryCommitment = GetInstanceProcedureAddress(instance, "GetDeviceMemoryCommitment");
		GetDeviceMemoryCommitment_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, out VkDeviceSize, void>)getDeviceMemoryCommitment;
		var bindBufferMemory = GetInstanceProcedureAddress(instance, "BindBufferMemory");
		BindBufferMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult>)bindBufferMemory;
		var bindImageMemory = GetInstanceProcedureAddress(instance, "BindImageMemory");
		BindImageMemory_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult>)bindImageMemory;
		var getBufferMemoryRequirements = GetInstanceProcedureAddress(instance, "GetBufferMemoryRequirements");
		GetBufferMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, out VkMemoryRequirements, void>)getBufferMemoryRequirements;
		var getImageMemoryRequirements = GetInstanceProcedureAddress(instance, "GetImageMemoryRequirements");
		GetImageMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, out VkMemoryRequirements, void>)getImageMemoryRequirements;
		var getImageSparseMemoryRequirements = GetInstanceProcedureAddress(instance, "GetImageSparseMemoryRequirements");
		GetImageSparseMemoryRequirements_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements[], void>)getImageSparseMemoryRequirements;
		GetImageSparseMemoryRequirements_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref uint, VkSparseImageMemoryRequirements[], void>)getImageSparseMemoryRequirements;
		var getPhysicalDeviceSparseImageFormatProperties = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSparseImageFormatProperties");
		GetPhysicalDeviceSparseImageFormatProperties_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties[], void>)getPhysicalDeviceSparseImageFormatProperties;
		GetPhysicalDeviceSparseImageFormatProperties_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, ref uint, VkSparseImageFormatProperties[], void>)getPhysicalDeviceSparseImageFormatProperties;
		var queueBindSparse = GetInstanceProcedureAddress(instance, "QueueBindSparse");
		QueueBindSparse_0 = (delegate* unmanaged[Cdecl]<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)queueBindSparse;
		QueueBindSparse_1 = (delegate* unmanaged[Cdecl]<VkQueue, uint, ref VkBindSparseInfo, VkFence, VkResult>)queueBindSparse;
		var createFence = GetInstanceProcedureAddress(instance, "CreateFence");
		CreateFence_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, out VkFence, VkResult>)createFence;
		CreateFence_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, ref VkAllocationCallbacks, out VkFence, VkResult>)createFence;
		CreateFence_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, VkAllocationCallbacks*, out VkFence, VkResult>)createFence;
		CreateFence_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceCreateInfo, ref VkAllocationCallbacks, out VkFence, VkResult>)createFence;
		var destroyFence = GetInstanceProcedureAddress(instance, "DestroyFence");
		DestroyFence_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkAllocationCallbacks*, void>)destroyFence;
		DestroyFence_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, ref VkAllocationCallbacks, void>)destroyFence;
		var resetFences = GetInstanceProcedureAddress(instance, "ResetFences");
		ResetFences_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkResult>)resetFences;
		var getFenceStatus = GetInstanceProcedureAddress(instance, "GetFenceStatus");
		GetFenceStatus_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult>)getFenceStatus;
		var waitForFences = GetInstanceProcedureAddress(instance, "WaitForFences");
		WaitForFences_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence[], VkBool32, ulong, VkResult>)waitForFences;
		var createSemaphore = GetInstanceProcedureAddress(instance, "CreateSemaphore");
		CreateSemaphore_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, ref VkAllocationCallbacks, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, VkAllocationCallbacks*, out VkSemaphore, VkResult>)createSemaphore;
		CreateSemaphore_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreCreateInfo, ref VkAllocationCallbacks, out VkSemaphore, VkResult>)createSemaphore;
		var destroySemaphore = GetInstanceProcedureAddress(instance, "DestroySemaphore");
		DestroySemaphore_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)destroySemaphore;
		DestroySemaphore_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, ref VkAllocationCallbacks, void>)destroySemaphore;
		var createEvent = GetInstanceProcedureAddress(instance, "CreateEvent");
		CreateEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, out VkEvent, VkResult>)createEvent;
		CreateEvent_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, ref VkAllocationCallbacks, out VkEvent, VkResult>)createEvent;
		CreateEvent_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, VkAllocationCallbacks*, out VkEvent, VkResult>)createEvent;
		CreateEvent_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkEventCreateInfo, ref VkAllocationCallbacks, out VkEvent, VkResult>)createEvent;
		var destroyEvent = GetInstanceProcedureAddress(instance, "DestroyEvent");
		DestroyEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkAllocationCallbacks*, void>)destroyEvent;
		DestroyEvent_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, ref VkAllocationCallbacks, void>)destroyEvent;
		var getEventStatus = GetInstanceProcedureAddress(instance, "GetEventStatus");
		GetEventStatus_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)getEventStatus;
		var setEvent = GetInstanceProcedureAddress(instance, "SetEvent");
		SetEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)setEvent;
		var resetEvent = GetInstanceProcedureAddress(instance, "ResetEvent");
		ResetEvent_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)resetEvent;
		var createQueryPool = GetInstanceProcedureAddress(instance, "CreateQueryPool");
		CreateQueryPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, ref VkAllocationCallbacks, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, VkAllocationCallbacks*, out VkQueryPool, VkResult>)createQueryPool;
		CreateQueryPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkQueryPoolCreateInfo, ref VkAllocationCallbacks, out VkQueryPool, VkResult>)createQueryPool;
		var destroyQueryPool = GetInstanceProcedureAddress(instance, "DestroyQueryPool");
		DestroyQueryPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)destroyQueryPool;
		DestroyQueryPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, ref VkAllocationCallbacks, void>)destroyQueryPool;
		var getQueryPoolResults = GetInstanceProcedureAddress(instance, "GetQueryPoolResults");
		GetQueryPoolResults_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, void*, VkDeviceSize, VkQueryResultFlags, VkResult>)getQueryPoolResults;
		var createBuffer = GetInstanceProcedureAddress(instance, "CreateBuffer");
		CreateBuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, ref VkAllocationCallbacks, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, VkAllocationCallbacks*, out VkBuffer, VkResult>)createBuffer;
		CreateBuffer_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferCreateInfo, ref VkAllocationCallbacks, out VkBuffer, VkResult>)createBuffer;
		var destroyBuffer = GetInstanceProcedureAddress(instance, "DestroyBuffer");
		DestroyBuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)destroyBuffer;
		DestroyBuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, ref VkAllocationCallbacks, void>)destroyBuffer;
		var createBufferView = GetInstanceProcedureAddress(instance, "CreateBufferView");
		CreateBufferView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, ref VkAllocationCallbacks, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, VkAllocationCallbacks*, out VkBufferView, VkResult>)createBufferView;
		CreateBufferView_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferViewCreateInfo, ref VkAllocationCallbacks, out VkBufferView, VkResult>)createBufferView;
		var destroyBufferView = GetInstanceProcedureAddress(instance, "DestroyBufferView");
		DestroyBufferView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)destroyBufferView;
		DestroyBufferView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, ref VkAllocationCallbacks, void>)destroyBufferView;
		var createImage = GetInstanceProcedureAddress(instance, "CreateImage");
		CreateImage_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, out VkImage, VkResult>)createImage;
		CreateImage_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, ref VkAllocationCallbacks, out VkImage, VkResult>)createImage;
		CreateImage_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, VkAllocationCallbacks*, out VkImage, VkResult>)createImage;
		CreateImage_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageCreateInfo, ref VkAllocationCallbacks, out VkImage, VkResult>)createImage;
		var destroyImage = GetInstanceProcedureAddress(instance, "DestroyImage");
		DestroyImage_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkAllocationCallbacks*, void>)destroyImage;
		DestroyImage_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkAllocationCallbacks, void>)destroyImage;
		var getImageSubresourceLayout = GetInstanceProcedureAddress(instance, "GetImageSubresourceLayout");
		GetImageSubresourceLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource*, out VkSubresourceLayout, void>)getImageSubresourceLayout;
		GetImageSubresourceLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImage, ref VkImageSubresource, out VkSubresourceLayout, void>)getImageSubresourceLayout;
		var createImageView = GetInstanceProcedureAddress(instance, "CreateImageView");
		CreateImageView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, out VkImageView, VkResult>)createImageView;
		CreateImageView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, ref VkAllocationCallbacks, out VkImageView, VkResult>)createImageView;
		CreateImageView_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, VkAllocationCallbacks*, out VkImageView, VkResult>)createImageView;
		CreateImageView_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageViewCreateInfo, ref VkAllocationCallbacks, out VkImageView, VkResult>)createImageView;
		var destroyImageView = GetInstanceProcedureAddress(instance, "DestroyImageView");
		DestroyImageView_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageView, VkAllocationCallbacks*, void>)destroyImageView;
		DestroyImageView_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageView, ref VkAllocationCallbacks, void>)destroyImageView;
		var createShaderModule = GetInstanceProcedureAddress(instance, "CreateShaderModule");
		CreateShaderModule_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, ref VkAllocationCallbacks, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, VkAllocationCallbacks*, out VkShaderModule, VkResult>)createShaderModule;
		CreateShaderModule_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkShaderModuleCreateInfo, ref VkAllocationCallbacks, out VkShaderModule, VkResult>)createShaderModule;
		var destroyShaderModule = GetInstanceProcedureAddress(instance, "DestroyShaderModule");
		DestroyShaderModule_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)destroyShaderModule;
		DestroyShaderModule_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, ref VkAllocationCallbacks, void>)destroyShaderModule;
		var createPipelineCache = GetInstanceProcedureAddress(instance, "CreatePipelineCache");
		CreatePipelineCache_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, ref VkAllocationCallbacks, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, VkAllocationCallbacks*, out VkPipelineCache, VkResult>)createPipelineCache;
		CreatePipelineCache_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineCacheCreateInfo, ref VkAllocationCallbacks, out VkPipelineCache, VkResult>)createPipelineCache;
		var destroyPipelineCache = GetInstanceProcedureAddress(instance, "DestroyPipelineCache");
		DestroyPipelineCache_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)destroyPipelineCache;
		DestroyPipelineCache_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref VkAllocationCallbacks, void>)destroyPipelineCache;
		var getPipelineCacheData = GetInstanceProcedureAddress(instance, "GetPipelineCacheData");
		GetPipelineCacheData_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nuint*, void*, VkResult>)getPipelineCacheData;
		GetPipelineCacheData_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, ref nuint, void*, VkResult>)getPipelineCacheData;
		var mergePipelineCaches = GetInstanceProcedureAddress(instance, "MergePipelineCaches");
		MergePipelineCaches_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkPipelineCache[], VkResult>)mergePipelineCaches;
		var createGraphicsPipelines = GetInstanceProcedureAddress(instance, "CreateGraphicsPipelines");
		CreateGraphicsPipelines_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createGraphicsPipelines;
		CreateGraphicsPipelines_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createGraphicsPipelines;
		var createComputePipelines = GetInstanceProcedureAddress(instance, "CreateComputePipelines");
		CreateComputePipelines_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], VkAllocationCallbacks*, out VkPipeline, VkResult>)createComputePipelines;
		CreateComputePipelines_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo[], ref VkAllocationCallbacks, out VkPipeline, VkResult>)createComputePipelines;
		var destroyPipeline = GetInstanceProcedureAddress(instance, "DestroyPipeline");
		DestroyPipeline_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)destroyPipeline;
		DestroyPipeline_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, ref VkAllocationCallbacks, void>)destroyPipeline;
		var createPipelineLayout = GetInstanceProcedureAddress(instance, "CreatePipelineLayout");
		CreatePipelineLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, VkAllocationCallbacks*, out VkPipelineLayout, VkResult>)createPipelineLayout;
		CreatePipelineLayout_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkPipelineLayoutCreateInfo, ref VkAllocationCallbacks, out VkPipelineLayout, VkResult>)createPipelineLayout;
		var destroyPipelineLayout = GetInstanceProcedureAddress(instance, "DestroyPipelineLayout");
		DestroyPipelineLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)destroyPipelineLayout;
		DestroyPipelineLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, ref VkAllocationCallbacks, void>)destroyPipelineLayout;
		var createSampler = GetInstanceProcedureAddress(instance, "CreateSampler");
		CreateSampler_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, out VkSampler, VkResult>)createSampler;
		CreateSampler_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, ref VkAllocationCallbacks, out VkSampler, VkResult>)createSampler;
		CreateSampler_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, VkAllocationCallbacks*, out VkSampler, VkResult>)createSampler;
		CreateSampler_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerCreateInfo, ref VkAllocationCallbacks, out VkSampler, VkResult>)createSampler;
		var destroySampler = GetInstanceProcedureAddress(instance, "DestroySampler");
		DestroySampler_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSampler, VkAllocationCallbacks*, void>)destroySampler;
		DestroySampler_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSampler, ref VkAllocationCallbacks, void>)destroySampler;
		var createDescriptorSetLayout = GetInstanceProcedureAddress(instance, "CreateDescriptorSetLayout");
		CreateDescriptorSetLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, VkAllocationCallbacks*, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		CreateDescriptorSetLayout_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetLayoutCreateInfo, ref VkAllocationCallbacks, out VkDescriptorSetLayout, VkResult>)createDescriptorSetLayout;
		var destroyDescriptorSetLayout = GetInstanceProcedureAddress(instance, "DestroyDescriptorSetLayout");
		DestroyDescriptorSetLayout_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)destroyDescriptorSetLayout;
		DestroyDescriptorSetLayout_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, ref VkAllocationCallbacks, void>)destroyDescriptorSetLayout;
		var createDescriptorPool = GetInstanceProcedureAddress(instance, "CreateDescriptorPool");
		CreateDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, VkAllocationCallbacks*, out VkDescriptorPool, VkResult>)createDescriptorPool;
		CreateDescriptorPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorPoolCreateInfo, ref VkAllocationCallbacks, out VkDescriptorPool, VkResult>)createDescriptorPool;
		var destroyDescriptorPool = GetInstanceProcedureAddress(instance, "DestroyDescriptorPool");
		DestroyDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)destroyDescriptorPool;
		DestroyDescriptorPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, ref VkAllocationCallbacks, void>)destroyDescriptorPool;
		var resetDescriptorPool = GetInstanceProcedureAddress(instance, "ResetDescriptorPool");
		ResetDescriptorPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult>)resetDescriptorPool;
		var allocateDescriptorSets = GetInstanceProcedureAddress(instance, "AllocateDescriptorSets");
		AllocateDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet[], VkResult>)allocateDescriptorSets;
		AllocateDescriptorSets_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorSetAllocateInfo, VkDescriptorSet[], VkResult>)allocateDescriptorSets;
		var freeDescriptorSets = GetInstanceProcedureAddress(instance, "FreeDescriptorSets");
		FreeDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkDescriptorSet[], VkResult>)freeDescriptorSets;
		var updateDescriptorSets = GetInstanceProcedureAddress(instance, "UpdateDescriptorSets");
		UpdateDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkWriteDescriptorSet[], uint, VkCopyDescriptorSet[], void>)updateDescriptorSets;
		var createFramebuffer = GetInstanceProcedureAddress(instance, "CreateFramebuffer");
		CreateFramebuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, ref VkAllocationCallbacks, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, VkAllocationCallbacks*, out VkFramebuffer, VkResult>)createFramebuffer;
		CreateFramebuffer_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFramebufferCreateInfo, ref VkAllocationCallbacks, out VkFramebuffer, VkResult>)createFramebuffer;
		var destroyFramebuffer = GetInstanceProcedureAddress(instance, "DestroyFramebuffer");
		DestroyFramebuffer_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)destroyFramebuffer;
		DestroyFramebuffer_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, ref VkAllocationCallbacks, void>)destroyFramebuffer;
		var createRenderPass = GetInstanceProcedureAddress(instance, "CreateRenderPass");
		CreateRenderPass_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, VkAllocationCallbacks*, out VkRenderPass, VkResult>)createRenderPass;
		CreateRenderPass_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkRenderPassCreateInfo, ref VkAllocationCallbacks, out VkRenderPass, VkResult>)createRenderPass;
		var destroyRenderPass = GetInstanceProcedureAddress(instance, "DestroyRenderPass");
		DestroyRenderPass_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)destroyRenderPass;
		DestroyRenderPass_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, ref VkAllocationCallbacks, void>)destroyRenderPass;
		var getRenderAreaGranularity = GetInstanceProcedureAddress(instance, "GetRenderAreaGranularity");
		GetRenderAreaGranularity_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, out VkExtent2D, void>)getRenderAreaGranularity;
		var createCommandPool = GetInstanceProcedureAddress(instance, "CreateCommandPool");
		CreateCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, ref VkAllocationCallbacks, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, VkAllocationCallbacks*, out VkCommandPool, VkResult>)createCommandPool;
		CreateCommandPool_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandPoolCreateInfo, ref VkAllocationCallbacks, out VkCommandPool, VkResult>)createCommandPool;
		var destroyCommandPool = GetInstanceProcedureAddress(instance, "DestroyCommandPool");
		DestroyCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)destroyCommandPool;
		DestroyCommandPool_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, ref VkAllocationCallbacks, void>)destroyCommandPool;
		var resetCommandPool = GetInstanceProcedureAddress(instance, "ResetCommandPool");
		ResetCommandPool_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)resetCommandPool;
		var allocateCommandBuffers = GetInstanceProcedureAddress(instance, "AllocateCommandBuffers");
		AllocateCommandBuffers_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer[], VkResult>)allocateCommandBuffers;
		AllocateCommandBuffers_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkCommandBufferAllocateInfo, VkCommandBuffer[], VkResult>)allocateCommandBuffers;
		var freeCommandBuffers = GetInstanceProcedureAddress(instance, "FreeCommandBuffers");
		FreeCommandBuffers_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, VkCommandBuffer[], void>)freeCommandBuffers;
		var beginCommandBuffer = GetInstanceProcedureAddress(instance, "BeginCommandBuffer");
		BeginCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)beginCommandBuffer;
		BeginCommandBuffer_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCommandBufferBeginInfo, VkResult>)beginCommandBuffer;
		var endCommandBuffer = GetInstanceProcedureAddress(instance, "EndCommandBuffer");
		EndCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult>)endCommandBuffer;
		var resetCommandBuffer = GetInstanceProcedureAddress(instance, "ResetCommandBuffer");
		ResetCommandBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)resetCommandBuffer;
		var commandBindPipeline = GetInstanceProcedureAddress(instance, "CommandBindPipeline");
		CommandBindPipeline_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)commandBindPipeline;
		var commandSetViewport = GetInstanceProcedureAddress(instance, "CommandSetViewport");
		CommandSetViewport_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewport[], void>)commandSetViewport;
		var commandSetScissor = GetInstanceProcedureAddress(instance, "CommandSetScissor");
		CommandSetScissor_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void>)commandSetScissor;
		var commandSetLineWidth = GetInstanceProcedureAddress(instance, "CommandSetLineWidth");
		CommandSetLineWidth_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)commandSetLineWidth;
		var commandSetDepthBias = GetInstanceProcedureAddress(instance, "CommandSetDepthBias");
		CommandSetDepthBias_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void>)commandSetDepthBias;
		var commandSetBlendConstants = GetInstanceProcedureAddress(instance, "CommandSetBlendConstants");
		CommandSetBlendConstants_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)commandSetBlendConstants;
		var commandSetDepthBounds = GetInstanceProcedureAddress(instance, "CommandSetDepthBounds");
		CommandSetDepthBounds_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void>)commandSetDepthBounds;
		var commandSetStencilCompareMask = GetInstanceProcedureAddress(instance, "CommandSetStencilCompareMask");
		CommandSetStencilCompareMask_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilCompareMask;
		var commandSetStencilWriteMask = GetInstanceProcedureAddress(instance, "CommandSetStencilWriteMask");
		CommandSetStencilWriteMask_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilWriteMask;
		var commandSetStencilReference = GetInstanceProcedureAddress(instance, "CommandSetStencilReference");
		CommandSetStencilReference_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)commandSetStencilReference;
		var commandBindDescriptorSets = GetInstanceProcedureAddress(instance, "CommandBindDescriptorSets");
		CommandBindDescriptorSets_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet[], uint, uint[], void>)commandBindDescriptorSets;
		var commandBindIndexBuffer = GetInstanceProcedureAddress(instance, "CommandBindIndexBuffer");
		CommandBindIndexBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void>)commandBindIndexBuffer;
		var commandBindVertexBuffers = GetInstanceProcedureAddress(instance, "CommandBindVertexBuffers");
		CommandBindVertexBuffers_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, ref VkDeviceSize, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_2 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, VkDeviceSize*, void>)commandBindVertexBuffers;
		CommandBindVertexBuffers_3 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkBuffer, ref VkDeviceSize, void>)commandBindVertexBuffers;
		var commandDraw = GetInstanceProcedureAddress(instance, "CommandDraw");
		CommandDraw_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void>)commandDraw;
		var commandDrawIndexed = GetInstanceProcedureAddress(instance, "CommandDrawIndexed");
		CommandDrawIndexed_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void>)commandDrawIndexed;
		var commandDrawIndirect = GetInstanceProcedureAddress(instance, "CommandDrawIndirect");
		CommandDrawIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirect;
		var commandDrawIndexedIndirect = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirect");
		CommandDrawIndexedIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirect;
		var commandDispatch = GetInstanceProcedureAddress(instance, "CommandDispatch");
		CommandDispatch_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)commandDispatch;
		var commandDispatchIndirect = GetInstanceProcedureAddress(instance, "CommandDispatchIndirect");
		CommandDispatchIndirect_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)commandDispatchIndirect;
		var commandCopyBuffer = GetInstanceProcedureAddress(instance, "CommandCopyBuffer");
		CommandCopyBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy[], void>)commandCopyBuffer;
		var commandCopyImage = GetInstanceProcedureAddress(instance, "CommandCopyImage");
		CommandCopyImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy[], void>)commandCopyImage;
		var commandBlitImage = GetInstanceProcedureAddress(instance, "CommandBlitImage");
		CommandBlitImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit[], VkFilter, void>)commandBlitImage;
		var commandCopyBufferToImage = GetInstanceProcedureAddress(instance, "CommandCopyBufferToImage");
		CommandCopyBufferToImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy[], void>)commandCopyBufferToImage;
		var commandCopyImageToBuffer = GetInstanceProcedureAddress(instance, "CommandCopyImageToBuffer");
		CommandCopyImageToBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy[], void>)commandCopyImageToBuffer;
		var commandUpdateBuffer = GetInstanceProcedureAddress(instance, "CommandUpdateBuffer");
		CommandUpdateBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void>)commandUpdateBuffer;
		var commandFillBuffer = GetInstanceProcedureAddress(instance, "CommandFillBuffer");
		CommandFillBuffer_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void>)commandFillBuffer;
		var commandClearColorImage = GetInstanceProcedureAddress(instance, "CommandClearColorImage");
		CommandClearColorImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange[], void>)commandClearColorImage;
		CommandClearColorImage_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearColorValue, uint, VkImageSubresourceRange[], void>)commandClearColorImage;
		var commandClearDepthStencilImage = GetInstanceProcedureAddress(instance, "CommandClearDepthStencilImage");
		CommandClearDepthStencilImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange[], void>)commandClearDepthStencilImage;
		CommandClearDepthStencilImage_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, ref VkClearDepthStencilValue, uint, VkImageSubresourceRange[], void>)commandClearDepthStencilImage;
		var commandClearAttachments = GetInstanceProcedureAddress(instance, "CommandClearAttachments");
		CommandClearAttachments_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkClearAttachment[], uint, VkClearRect[], void>)commandClearAttachments;
		var commandResolveImage = GetInstanceProcedureAddress(instance, "CommandResolveImage");
		CommandResolveImage_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve[], void>)commandResolveImage;
		var commandSetEvent = GetInstanceProcedureAddress(instance, "CommandSetEvent");
		CommandSetEvent_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)commandSetEvent;
		var commandResetEvent = GetInstanceProcedureAddress(instance, "CommandResetEvent");
		CommandResetEvent_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)commandResetEvent;
		var commandWaitEvents = GetInstanceProcedureAddress(instance, "CommandWaitEvents");
		CommandWaitEvents_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent[], VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void>)commandWaitEvents;
		var commandPipelineBarrier = GetInstanceProcedureAddress(instance, "CommandPipelineBarrier");
		CommandPipelineBarrier_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier[], uint, VkBufferMemoryBarrier[], uint, VkImageMemoryBarrier[], void>)commandPipelineBarrier;
		var commandBeginQuery = GetInstanceProcedureAddress(instance, "CommandBeginQuery");
		CommandBeginQuery_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)commandBeginQuery;
		var commandEndQuery = GetInstanceProcedureAddress(instance, "CommandEndQuery");
		CommandEndQuery_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void>)commandEndQuery;
		var commandResetQueryPool = GetInstanceProcedureAddress(instance, "CommandResetQueryPool");
		CommandResetQueryPool_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void>)commandResetQueryPool;
		var commandWriteTimestamp = GetInstanceProcedureAddress(instance, "CommandWriteTimestamp");
		CommandWriteTimestamp_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)commandWriteTimestamp;
		var commandCopyQueryPoolResults = GetInstanceProcedureAddress(instance, "CommandCopyQueryPoolResults");
		CommandCopyQueryPoolResults_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void>)commandCopyQueryPoolResults;
		var commandPushConstants = GetInstanceProcedureAddress(instance, "CommandPushConstants");
		CommandPushConstants_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)commandPushConstants;
		var commandBeginRenderPass = GetInstanceProcedureAddress(instance, "CommandBeginRenderPass");
		CommandBeginRenderPass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)commandBeginRenderPass;
		CommandBeginRenderPass_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkRenderPassBeginInfo, VkSubpassContents, void>)commandBeginRenderPass;
		var commandNextSubpass = GetInstanceProcedureAddress(instance, "CommandNextSubpass");
		CommandNextSubpass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void>)commandNextSubpass;
		var commandEndRenderPass = GetInstanceProcedureAddress(instance, "CommandEndRenderPass");
		CommandEndRenderPass_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandEndRenderPass;
		var commandExecuteCommands = GetInstanceProcedureAddress(instance, "CommandExecuteCommands");
		CommandExecuteCommands_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkCommandBuffer[], void>)commandExecuteCommands;
		var destroySurfaceKHR = GetInstanceProcedureAddress(instance, "DestroySurfaceKHR");
		DestroySurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)destroySurfaceKHR;
		DestroySurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, ref VkAllocationCallbacks, void>)destroySurfaceKHR;
		var getPhysicalDeviceSurfaceSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceSupportKHR");
		GetPhysicalDeviceSurfaceSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkSurfaceKHR, out VkBool32, VkResult>)getPhysicalDeviceSurfaceSupportKHR;
		var getPhysicalDeviceSurfaceCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilitiesKHR");
		GetPhysicalDeviceSurfaceCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilitiesKHR, VkResult>)getPhysicalDeviceSurfaceCapabilitiesKHR;
		var getPhysicalDeviceSurfaceFormatsKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceFormatsKHR");
		GetPhysicalDeviceSurfaceFormatsKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR[], VkResult>)getPhysicalDeviceSurfaceFormatsKHR;
		GetPhysicalDeviceSurfaceFormatsKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkSurfaceFormatKHR[], VkResult>)getPhysicalDeviceSurfaceFormatsKHR;
		var getPhysicalDeviceSurfacePresentModesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfacePresentModesKHR");
		GetPhysicalDeviceSurfacePresentModesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModesKHR;
		GetPhysicalDeviceSurfacePresentModesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkPresentModeKHR[], VkResult>)getPhysicalDeviceSurfacePresentModesKHR;
		var createSwapchainKHR = GetInstanceProcedureAddress(instance, "CreateSwapchainKHR");
		CreateSwapchainKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainCreateInfoKHR*, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		CreateSwapchainKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSwapchainCreateInfoKHR, ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSwapchainKHR;
		var destroySwapchainKHR = GetInstanceProcedureAddress(instance, "DestroySwapchainKHR");
		DestroySwapchainKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)destroySwapchainKHR;
		DestroySwapchainKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref VkAllocationCallbacks, void>)destroySwapchainKHR;
		var getSwapchainImagesKHR = GetInstanceProcedureAddress(instance, "GetSwapchainImagesKHR");
		GetSwapchainImagesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkImage[], VkResult>)getSwapchainImagesKHR;
		GetSwapchainImagesKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkImage[], VkResult>)getSwapchainImagesKHR;
		var acquireNextImageKHR = GetInstanceProcedureAddress(instance, "AcquireNextImageKHR");
		AcquireNextImageKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, out uint, VkResult>)acquireNextImageKHR;
		var queuePresentKHR = GetInstanceProcedureAddress(instance, "QueuePresentKHR");
		QueuePresentKHR_0 = (delegate* unmanaged[Cdecl]<VkQueue, VkPresentInfoKHR*, VkResult>)queuePresentKHR;
		QueuePresentKHR_1 = (delegate* unmanaged[Cdecl]<VkQueue, ref VkPresentInfoKHR, VkResult>)queuePresentKHR;
		var getPhysicalDeviceDisplayPropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayPropertiesKHR");
		GetPhysicalDeviceDisplayPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPropertiesKHR;
		GetPhysicalDeviceDisplayPropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPropertiesKHR;
		var getPhysicalDeviceDisplayPlanePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceDisplayPlanePropertiesKHR");
		GetPhysicalDeviceDisplayPlanePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPlanePropertiesKHR;
		GetPhysicalDeviceDisplayPlanePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkDisplayPlanePropertiesKHR[], VkResult>)getPhysicalDeviceDisplayPlanePropertiesKHR;
		var getDisplayPlaneSupportedDisplaysKHR = GetInstanceProcedureAddress(instance, "GetDisplayPlaneSupportedDisplaysKHR");
		GetDisplayPlaneSupportedDisplaysKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, uint*, VkDisplayKHR[], VkResult>)getDisplayPlaneSupportedDisplaysKHR;
		GetDisplayPlaneSupportedDisplaysKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, ref uint, VkDisplayKHR[], VkResult>)getDisplayPlaneSupportedDisplaysKHR;
		var getDisplayModePropertiesKHR = GetInstanceProcedureAddress(instance, "GetDisplayModePropertiesKHR");
		GetDisplayModePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR[], VkResult>)getDisplayModePropertiesKHR;
		GetDisplayModePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref uint, VkDisplayModePropertiesKHR[], VkResult>)getDisplayModePropertiesKHR;
		var createDisplayModeKHR = GetInstanceProcedureAddress(instance, "CreateDisplayModeKHR");
		CreateDisplayModeKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, VkAllocationCallbacks*, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		CreateDisplayModeKHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, ref VkDisplayModeCreateInfoKHR, ref VkAllocationCallbacks, out VkDisplayModeKHR, VkResult>)createDisplayModeKHR;
		var getDisplayPlaneCapabilitiesKHR = GetInstanceProcedureAddress(instance, "GetDisplayPlaneCapabilitiesKHR");
		GetDisplayPlaneCapabilitiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayModeKHR, uint, out VkDisplayPlaneCapabilitiesKHR, VkResult>)getDisplayPlaneCapabilitiesKHR;
		var createDisplayPlaneSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateDisplayPlaneSurfaceKHR");
		CreateDisplayPlaneSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDisplaySurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		CreateDisplayPlaneSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDisplaySurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createDisplayPlaneSurfaceKHR;
		var createSharedSwapchainsKHR = GetInstanceProcedureAddress(instance, "CreateSharedSwapchainsKHR");
		CreateSharedSwapchainsKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], VkAllocationCallbacks*, out VkSwapchainKHR, VkResult>)createSharedSwapchainsKHR;
		CreateSharedSwapchainsKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainCreateInfoKHR[], ref VkAllocationCallbacks, out VkSwapchainKHR, VkResult>)createSharedSwapchainsKHR;
		var createXlibSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateXlibSurfaceKHR");
		CreateXlibSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkXlibSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		CreateXlibSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXlibSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXlibSurfaceKHR;
		var getPhysicalDeviceXlibPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceXlibPresentationSupportKHR");
		GetPhysicalDeviceXlibPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32>)getPhysicalDeviceXlibPresentationSupportKHR;
		var createXcbSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateXcbSurfaceKHR");
		CreateXcbSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkXcbSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		CreateXcbSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkXcbSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createXcbSurfaceKHR;
		var getPhysicalDeviceXcbPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceXcbPresentationSupportKHR");
		GetPhysicalDeviceXcbPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, IntPtr, VkBool32>)getPhysicalDeviceXcbPresentationSupportKHR;
		var createWaylandSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateWaylandSurfaceKHR");
		CreateWaylandSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkWaylandSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		CreateWaylandSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWaylandSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWaylandSurfaceKHR;
		var getPhysicalDeviceWaylandPresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceWaylandPresentationSupportKHR");
		GetPhysicalDeviceWaylandPresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, void*, VkBool32>)getPhysicalDeviceWaylandPresentationSupportKHR;
		var createAndroidSurfaceKHR = GetInstanceProcedureAddress(instance, "CreateAndroidSurfaceKHR");
		CreateAndroidSurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkAndroidSurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		CreateAndroidSurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkAndroidSurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createAndroidSurfaceKHR;
		var createWin32SurfaceKHR = GetInstanceProcedureAddress(instance, "CreateWin32SurfaceKHR");
		CreateWin32SurfaceKHR_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkWin32SurfaceCreateInfoKHR*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		CreateWin32SurfaceKHR_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkWin32SurfaceCreateInfoKHR, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createWin32SurfaceKHR;
		var getPhysicalDeviceWin32PresentationSupportKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceWin32PresentationSupportKHR");
		GetPhysicalDeviceWin32PresentationSupportKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint, VkBool32>)getPhysicalDeviceWin32PresentationSupportKHR;
		var createDebugReportCallbackEXT = GetInstanceProcedureAddress(instance, "CreateDebugReportCallbackEXT");
		CreateDebugReportCallbackEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackCreateInfoEXT*, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, VkAllocationCallbacks*, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		CreateDebugReportCallbackEXT_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkDebugReportCallbackCreateInfoEXT, ref VkAllocationCallbacks, out VkDebugReportCallbackEXT, VkResult>)createDebugReportCallbackEXT;
		var destroyDebugReportCallbackEXT = GetInstanceProcedureAddress(instance, "DestroyDebugReportCallbackEXT");
		DestroyDebugReportCallbackEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void>)destroyDebugReportCallbackEXT;
		DestroyDebugReportCallbackEXT_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportCallbackEXT, ref VkAllocationCallbacks, void>)destroyDebugReportCallbackEXT;
		var debugReportMessageEXT = GetInstanceProcedureAddress(instance, "DebugReportMessageEXT");
		DebugReportMessageEXT_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, string, string, void>)debugReportMessageEXT;
		var debugMarkerSetObjectTagEXT = GetInstanceProcedureAddress(instance, "DebugMarkerSetObjectTagEXT");
		DebugMarkerSetObjectTagEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult>)debugMarkerSetObjectTagEXT;
		DebugMarkerSetObjectTagEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectTagInfoEXT, VkResult>)debugMarkerSetObjectTagEXT;
		var debugMarkerSetObjectNameEXT = GetInstanceProcedureAddress(instance, "DebugMarkerSetObjectNameEXT");
		DebugMarkerSetObjectNameEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult>)debugMarkerSetObjectNameEXT;
		DebugMarkerSetObjectNameEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDebugMarkerObjectNameInfoEXT, VkResult>)debugMarkerSetObjectNameEXT;
		var commandDebugMarkerBeginEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerBeginEXT");
		CommandDebugMarkerBeginEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)commandDebugMarkerBeginEXT;
		CommandDebugMarkerBeginEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void>)commandDebugMarkerBeginEXT;
		var commandDebugMarkerEndEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerEndEXT");
		CommandDebugMarkerEndEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)commandDebugMarkerEndEXT;
		var commandDebugMarkerInsertEXT = GetInstanceProcedureAddress(instance, "CommandDebugMarkerInsertEXT");
		CommandDebugMarkerInsertEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)commandDebugMarkerInsertEXT;
		CommandDebugMarkerInsertEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkDebugMarkerMarkerInfoEXT, void>)commandDebugMarkerInsertEXT;
		var commandDrawIndirectCountAMD = GetInstanceProcedureAddress(instance, "CommandDrawIndirectCountAMD");
		CommandDrawIndirectCountAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndirectCountAMD;
		var commandDrawIndexedIndirectCountAMD = GetInstanceProcedureAddress(instance, "CommandDrawIndexedIndirectCountAMD");
		CommandDrawIndexedIndirectCountAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)commandDrawIndexedIndirectCountAMD;
		var getShaderInfoAMD = GetInstanceProcedureAddress(instance, "GetShaderInfoAMD");
		GetShaderInfoAMD_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, nuint*, void*, VkResult>)getShaderInfoAMD;
		GetShaderInfoAMD_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, ref nuint, void*, VkResult>)getShaderInfoAMD;
		var getPhysicalDeviceExternalImageFormatPropertiesNV = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalImageFormatPropertiesNV");
		GetPhysicalDeviceExternalImageFormatPropertiesNV_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, out VkExternalImageFormatPropertiesNV, VkResult>)getPhysicalDeviceExternalImageFormatPropertiesNV;
		var getMemoryWin32HandleNV = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandleNV");
		GetMemoryWin32HandleNV_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, out IntPtr, VkResult>)getMemoryWin32HandleNV;
		var getPhysicalDeviceFeatures2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFeatures2KHR");
		GetPhysicalDeviceFeatures2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceFeatures2KHR, void>)getPhysicalDeviceFeatures2KHR;
		var getPhysicalDeviceProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceProperties2KHR");
		GetPhysicalDeviceProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceProperties2KHR, void>)getPhysicalDeviceProperties2KHR;
		var getPhysicalDeviceFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceFormatProperties2KHR");
		GetPhysicalDeviceFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkFormat, out VkFormatProperties2KHR, void>)getPhysicalDeviceFormatProperties2KHR;
		var getPhysicalDeviceImageFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceImageFormatProperties2KHR");
		GetPhysicalDeviceImageFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2KHR*, out VkImageFormatProperties2KHR, VkResult>)getPhysicalDeviceImageFormatProperties2KHR;
		GetPhysicalDeviceImageFormatProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceImageFormatInfo2KHR, out VkImageFormatProperties2KHR, VkResult>)getPhysicalDeviceImageFormatProperties2KHR;
		var getPhysicalDeviceQueueFamilyProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceQueueFamilyProperties2KHR");
		GetPhysicalDeviceQueueFamilyProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, uint*, VkQueueFamilyProperties2KHR[], void>)getPhysicalDeviceQueueFamilyProperties2KHR;
		GetPhysicalDeviceQueueFamilyProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref uint, VkQueueFamilyProperties2KHR[], void>)getPhysicalDeviceQueueFamilyProperties2KHR;
		var getPhysicalDeviceMemoryProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMemoryProperties2KHR");
		GetPhysicalDeviceMemoryProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, out VkPhysicalDeviceMemoryProperties2KHR, void>)getPhysicalDeviceMemoryProperties2KHR;
		var getPhysicalDeviceSparseImageFormatProperties2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSparseImageFormatProperties2KHR");
		GetPhysicalDeviceSparseImageFormatProperties2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR*, uint*, VkSparseImageFormatProperties2KHR[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2KHR*, ref uint, VkSparseImageFormatProperties2KHR[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR, uint*, VkSparseImageFormatProperties2KHR[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		GetPhysicalDeviceSparseImageFormatProperties2KHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2KHR, ref uint, VkSparseImageFormatProperties2KHR[], void>)getPhysicalDeviceSparseImageFormatProperties2KHR;
		var getDeviceGroupPeerMemoryFeaturesKHX = GetInstanceProcedureAddress(instance, "GetDeviceGroupPeerMemoryFeaturesKHX");
		GetDeviceGroupPeerMemoryFeaturesKHX_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, out VkPeerMemoryFeatureFlagsKHX, void>)getDeviceGroupPeerMemoryFeaturesKHX;
		var commandSetDeviceMaskKHX = GetInstanceProcedureAddress(instance, "CommandSetDeviceMaskKHX");
		CommandSetDeviceMaskKHX_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)commandSetDeviceMaskKHX;
		var commandDispatchBaseKHX = GetInstanceProcedureAddress(instance, "CommandDispatchBaseKHX");
		CommandDispatchBaseKHX_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)commandDispatchBaseKHX;
		var getDeviceGroupPresentCapabilitiesKHX = GetInstanceProcedureAddress(instance, "GetDeviceGroupPresentCapabilitiesKHX");
		GetDeviceGroupPresentCapabilitiesKHX_0 = (delegate* unmanaged[Cdecl]<VkDevice, out VkDeviceGroupPresentCapabilitiesKHX, VkResult>)getDeviceGroupPresentCapabilitiesKHX;
		var getDeviceGroupSurfacePresentModesKHX = GetInstanceProcedureAddress(instance, "GetDeviceGroupSurfacePresentModesKHX");
		GetDeviceGroupSurfacePresentModesKHX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSurfaceKHR, out VkDeviceGroupPresentModeFlagsKHX, VkResult>)getDeviceGroupSurfacePresentModesKHX;
		var getPhysicalDevicePresentRectanglesKHX = GetInstanceProcedureAddress(instance, "GetPhysicalDevicePresentRectanglesKHX");
		GetPhysicalDevicePresentRectanglesKHX_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D[], VkResult>)getPhysicalDevicePresentRectanglesKHX;
		GetPhysicalDevicePresentRectanglesKHX_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, ref uint, VkRect2D[], VkResult>)getPhysicalDevicePresentRectanglesKHX;
		var acquireNextImage2KHX = GetInstanceProcedureAddress(instance, "AcquireNextImage2KHX");
		AcquireNextImage2KHX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkAcquireNextImageInfoKHX*, out uint, VkResult>)acquireNextImage2KHX;
		AcquireNextImage2KHX_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkAcquireNextImageInfoKHX, out uint, VkResult>)acquireNextImage2KHX;
		var createViSurfaceNN = GetInstanceProcedureAddress(instance, "CreateViSurfaceNN");
		CreateViSurfaceNN_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createViSurfaceNN;
		CreateViSurfaceNN_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkViSurfaceCreateInfoNN*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createViSurfaceNN;
		CreateViSurfaceNN_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkViSurfaceCreateInfoNN, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createViSurfaceNN;
		CreateViSurfaceNN_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkViSurfaceCreateInfoNN, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createViSurfaceNN;
		var trimCommandPoolKHR = GetInstanceProcedureAddress(instance, "TrimCommandPoolKHR");
		TrimCommandPoolKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolTrimFlagsKHR, void>)trimCommandPoolKHR;
		var enumeratePhysicalDeviceGroupsKHX = GetInstanceProcedureAddress(instance, "EnumeratePhysicalDeviceGroupsKHX");
		EnumeratePhysicalDeviceGroupsKHX_0 = (delegate* unmanaged[Cdecl]<VkInstance, uint*, VkPhysicalDeviceGroupPropertiesKHX[], VkResult>)enumeratePhysicalDeviceGroupsKHX;
		EnumeratePhysicalDeviceGroupsKHX_1 = (delegate* unmanaged[Cdecl]<VkInstance, ref uint, VkPhysicalDeviceGroupPropertiesKHX[], VkResult>)enumeratePhysicalDeviceGroupsKHX;
		var getPhysicalDeviceExternalBufferPropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalBufferPropertiesKHR");
		GetPhysicalDeviceExternalBufferPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfoKHR*, out VkExternalBufferPropertiesKHR, void>)getPhysicalDeviceExternalBufferPropertiesKHR;
		GetPhysicalDeviceExternalBufferPropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalBufferInfoKHR, out VkExternalBufferPropertiesKHR, void>)getPhysicalDeviceExternalBufferPropertiesKHR;
		var getMemoryWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandleKHR");
		GetMemoryWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getMemoryWin32HandleKHR;
		GetMemoryWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetWin32HandleInfoKHR, out IntPtr, VkResult>)getMemoryWin32HandleKHR;
		var getMemoryWin32HandlePropertiesKHR = GetInstanceProcedureAddress(instance, "GetMemoryWin32HandlePropertiesKHR");
		GetMemoryWin32HandlePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, IntPtr, out VkMemoryWin32HandlePropertiesKHR, VkResult>)getMemoryWin32HandlePropertiesKHR;
		var getMemoryFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetMemoryFileDescriptorKHR");
		GetMemoryFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkMemoryGetFdInfoKHR*, out int, VkResult>)getMemoryFileDescriptorKHR;
		GetMemoryFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkMemoryGetFdInfoKHR, out int, VkResult>)getMemoryFileDescriptorKHR;
		var getMemoryFileDescriptorPropertiesKHR = GetInstanceProcedureAddress(instance, "GetMemoryFileDescriptorPropertiesKHR");
		GetMemoryFileDescriptorPropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, int, out VkMemoryFdPropertiesKHR, VkResult>)getMemoryFileDescriptorPropertiesKHR;
		var getPhysicalDeviceExternalSemaphorePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalSemaphorePropertiesKHR");
		GetPhysicalDeviceExternalSemaphorePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfoKHR*, out VkExternalSemaphorePropertiesKHR, void>)getPhysicalDeviceExternalSemaphorePropertiesKHR;
		GetPhysicalDeviceExternalSemaphorePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfoKHR, out VkExternalSemaphorePropertiesKHR, void>)getPhysicalDeviceExternalSemaphorePropertiesKHR;
		var importSemaphoreWin32HandleKHR = GetInstanceProcedureAddress(instance, "ImportSemaphoreWin32HandleKHR");
		ImportSemaphoreWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult>)importSemaphoreWin32HandleKHR;
		ImportSemaphoreWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreWin32HandleInfoKHR, VkResult>)importSemaphoreWin32HandleKHR;
		var getSemaphoreWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetSemaphoreWin32HandleKHR");
		GetSemaphoreWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getSemaphoreWin32HandleKHR;
		GetSemaphoreWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetWin32HandleInfoKHR, out IntPtr, VkResult>)getSemaphoreWin32HandleKHR;
		var importSemaphoreFileDescriptorKHR = GetInstanceProcedureAddress(instance, "ImportSemaphoreFileDescriptorKHR");
		ImportSemaphoreFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult>)importSemaphoreFileDescriptorKHR;
		ImportSemaphoreFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportSemaphoreFdInfoKHR, VkResult>)importSemaphoreFileDescriptorKHR;
		var getSemaphoreFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetSemaphoreFileDescriptorKHR");
		GetSemaphoreFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreGetFdInfoKHR*, out int, VkResult>)getSemaphoreFileDescriptorKHR;
		GetSemaphoreFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSemaphoreGetFdInfoKHR, out int, VkResult>)getSemaphoreFileDescriptorKHR;
		var commandPushDescriptorSetKHR = GetInstanceProcedureAddress(instance, "CommandPushDescriptorSetKHR");
		CommandPushDescriptorSetKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet[], void>)commandPushDescriptorSetKHR;
		var createDescriptorUpdateTemplateKHR = GetInstanceProcedureAddress(instance, "CreateDescriptorUpdateTemplateKHR");
		CreateDescriptorUpdateTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfoKHR*, VkAllocationCallbacks*, out VkDescriptorUpdateTemplateKHR, VkResult>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfoKHR*, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplateKHR, VkResult>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfoKHR, VkAllocationCallbacks*, out VkDescriptorUpdateTemplateKHR, VkResult>)createDescriptorUpdateTemplateKHR;
		CreateDescriptorUpdateTemplateKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDescriptorUpdateTemplateCreateInfoKHR, ref VkAllocationCallbacks, out VkDescriptorUpdateTemplateKHR, VkResult>)createDescriptorUpdateTemplateKHR;
		var destroyDescriptorUpdateTemplateKHR = GetInstanceProcedureAddress(instance, "DestroyDescriptorUpdateTemplateKHR");
		DestroyDescriptorUpdateTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateKHR, VkAllocationCallbacks*, void>)destroyDescriptorUpdateTemplateKHR;
		DestroyDescriptorUpdateTemplateKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateKHR, ref VkAllocationCallbacks, void>)destroyDescriptorUpdateTemplateKHR;
		var updateDescriptorSetWithTemplateKHR = GetInstanceProcedureAddress(instance, "UpdateDescriptorSetWithTemplateKHR");
		UpdateDescriptorSetWithTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplateKHR, void*, void>)updateDescriptorSetWithTemplateKHR;
		var commandPushDescriptorSetWithTemplateKHR = GetInstanceProcedureAddress(instance, "CommandPushDescriptorSetWithTemplateKHR");
		CommandPushDescriptorSetWithTemplateKHR_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplateKHR, VkPipelineLayout, uint, void*, void>)commandPushDescriptorSetWithTemplateKHR;
		var commandProcessCommandsNVX = GetInstanceProcedureAddress(instance, "CommandProcessCommandsNVX");
		CommandProcessCommandsNVX_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCmdProcessCommandsInfoNVX*, void>)commandProcessCommandsNVX;
		CommandProcessCommandsNVX_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCmdProcessCommandsInfoNVX, void>)commandProcessCommandsNVX;
		var commandReserveSpaceForCommandsNVX = GetInstanceProcedureAddress(instance, "CommandReserveSpaceForCommandsNVX");
		CommandReserveSpaceForCommandsNVX_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCmdReserveSpaceForCommandsInfoNVX*, void>)commandReserveSpaceForCommandsNVX;
		CommandReserveSpaceForCommandsNVX_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkCmdReserveSpaceForCommandsInfoNVX, void>)commandReserveSpaceForCommandsNVX;
		var createIndirectCommandsLayoutNVX = GetInstanceProcedureAddress(instance, "CreateIndirectCommandsLayoutNVX");
		CreateIndirectCommandsLayoutNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNVX*, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNVX, VkResult>)createIndirectCommandsLayoutNVX;
		CreateIndirectCommandsLayoutNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutCreateInfoNVX*, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNVX, VkResult>)createIndirectCommandsLayoutNVX;
		CreateIndirectCommandsLayoutNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNVX, VkAllocationCallbacks*, out VkIndirectCommandsLayoutNVX, VkResult>)createIndirectCommandsLayoutNVX;
		CreateIndirectCommandsLayoutNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkIndirectCommandsLayoutCreateInfoNVX, ref VkAllocationCallbacks, out VkIndirectCommandsLayoutNVX, VkResult>)createIndirectCommandsLayoutNVX;
		var destroyIndirectCommandsLayoutNVX = GetInstanceProcedureAddress(instance, "DestroyIndirectCommandsLayoutNVX");
		DestroyIndirectCommandsLayoutNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNVX, VkAllocationCallbacks*, void>)destroyIndirectCommandsLayoutNVX;
		DestroyIndirectCommandsLayoutNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkIndirectCommandsLayoutNVX, ref VkAllocationCallbacks, void>)destroyIndirectCommandsLayoutNVX;
		var createObjectTableNVX = GetInstanceProcedureAddress(instance, "CreateObjectTableNVX");
		CreateObjectTableNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableCreateInfoNVX*, VkAllocationCallbacks*, out VkObjectTableNVX, VkResult>)createObjectTableNVX;
		CreateObjectTableNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableCreateInfoNVX*, ref VkAllocationCallbacks, out VkObjectTableNVX, VkResult>)createObjectTableNVX;
		CreateObjectTableNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkObjectTableCreateInfoNVX, VkAllocationCallbacks*, out VkObjectTableNVX, VkResult>)createObjectTableNVX;
		CreateObjectTableNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkObjectTableCreateInfoNVX, ref VkAllocationCallbacks, out VkObjectTableNVX, VkResult>)createObjectTableNVX;
		var destroyObjectTableNVX = GetInstanceProcedureAddress(instance, "DestroyObjectTableNVX");
		DestroyObjectTableNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, VkAllocationCallbacks*, void>)destroyObjectTableNVX;
		DestroyObjectTableNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, ref VkAllocationCallbacks, void>)destroyObjectTableNVX;
		var registerObjectsNVX = GetInstanceProcedureAddress(instance, "RegisterObjectsNVX");
		RegisterObjectsNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectTableEntryNVX**, uint*, VkResult>)registerObjectsNVX;
		RegisterObjectsNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectTableEntryNVX**, ref uint, VkResult>)registerObjectsNVX;
		RegisterObjectsNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectTableEntryNVX, uint*, VkResult>)registerObjectsNVX;
		RegisterObjectsNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectTableEntryNVX, ref uint, VkResult>)registerObjectsNVX;
		var unregisterObjectsNVX = GetInstanceProcedureAddress(instance, "UnregisterObjectsNVX");
		UnregisterObjectsNVX_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectEntryTypeNVX*, uint*, VkResult>)unregisterObjectsNVX;
		UnregisterObjectsNVX_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, VkObjectEntryTypeNVX*, ref uint, VkResult>)unregisterObjectsNVX;
		UnregisterObjectsNVX_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectEntryTypeNVX, uint*, VkResult>)unregisterObjectsNVX;
		UnregisterObjectsNVX_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkObjectTableNVX, uint, ref VkObjectEntryTypeNVX, ref uint, VkResult>)unregisterObjectsNVX;
		var getPhysicalDeviceGeneratedCommandsPropertiesNVX = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceGeneratedCommandsPropertiesNVX");
		GetPhysicalDeviceGeneratedCommandsPropertiesNVX_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDeviceGeneratedCommandsFeaturesNVX*, out VkDeviceGeneratedCommandsLimitsNVX, void>)getPhysicalDeviceGeneratedCommandsPropertiesNVX;
		GetPhysicalDeviceGeneratedCommandsPropertiesNVX_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkDeviceGeneratedCommandsFeaturesNVX, out VkDeviceGeneratedCommandsLimitsNVX, void>)getPhysicalDeviceGeneratedCommandsPropertiesNVX;
		var commandSetViewportWScalingNV = GetInstanceProcedureAddress(instance, "CommandSetViewportWScalingNV");
		CommandSetViewportWScalingNV_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void>)commandSetViewportWScalingNV;
		CommandSetViewportWScalingNV_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, ref VkViewportWScalingNV, void>)commandSetViewportWScalingNV;
		var releaseDisplayEXT = GetInstanceProcedureAddress(instance, "ReleaseDisplayEXT");
		ReleaseDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkDisplayKHR, VkResult>)releaseDisplayEXT;
		var acquireXlibDisplayEXT = GetInstanceProcedureAddress(instance, "AcquireXlibDisplayEXT");
		AcquireXlibDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, void*, VkDisplayKHR, VkResult>)acquireXlibDisplayEXT;
		var getRandROutputDisplayEXT = GetInstanceProcedureAddress(instance, "GetRandROutputDisplayEXT");
		GetRandROutputDisplayEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, void*, IntPtr, out VkDisplayKHR, VkResult>)getRandROutputDisplayEXT;
		var getPhysicalDeviceSurfaceCapabilities2EXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilities2EXT");
		GetPhysicalDeviceSurfaceCapabilities2EXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSurfaceKHR, out VkSurfaceCapabilities2EXT, VkResult>)getPhysicalDeviceSurfaceCapabilities2EXT;
		var displayPowerControlEXT = GetInstanceProcedureAddress(instance, "DisplayPowerControlEXT");
		DisplayPowerControlEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult>)displayPowerControlEXT;
		DisplayPowerControlEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayPowerInfoEXT, VkResult>)displayPowerControlEXT;
		var registerDeviceEventEXT = GetInstanceProcedureAddress(instance, "RegisterDeviceEventEXT");
		RegisterDeviceEventEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkDeviceEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_4 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_5 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_6 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDeviceEventEXT;
		RegisterDeviceEventEXT_7 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkDeviceEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDeviceEventEXT;
		var registerDisplayEventEXT = GetInstanceProcedureAddress(instance, "RegisterDisplayEventEXT");
		RegisterDisplayEventEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_4 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_5 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, VkAllocationCallbacks*, ref VkFence, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_6 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, VkFence*, VkResult>)registerDisplayEventEXT;
		RegisterDisplayEventEXT_7 = (delegate* unmanaged[Cdecl]<VkDevice, VkDisplayKHR, ref VkDisplayEventInfoEXT, ref VkAllocationCallbacks, ref VkFence, VkResult>)registerDisplayEventEXT;
		var getSwapchainCounterEXT = GetInstanceProcedureAddress(instance, "GetSwapchainCounterEXT");
		GetSwapchainCounterEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, out ulong, VkResult>)getSwapchainCounterEXT;
		var getRefreshCycleDurationGOOGLE = GetInstanceProcedureAddress(instance, "GetRefreshCycleDurationGOOGLE");
		GetRefreshCycleDurationGOOGLE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, out VkRefreshCycleDurationGOOGLE, VkResult>)getRefreshCycleDurationGOOGLE;
		var getPastPresentationTimingGOOGLE = GetInstanceProcedureAddress(instance, "GetPastPresentationTimingGOOGLE");
		GetPastPresentationTimingGOOGLE_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE[], VkResult>)getPastPresentationTimingGOOGLE;
		GetPastPresentationTimingGOOGLE_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, ref uint, VkPastPresentationTimingGOOGLE[], VkResult>)getPastPresentationTimingGOOGLE;
		var commandSetDiscardRectangleEXT = GetInstanceProcedureAddress(instance, "CommandSetDiscardRectangleEXT");
		CommandSetDiscardRectangleEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D[], void>)commandSetDiscardRectangleEXT;
		var setHdrMetadataEXT = GetInstanceProcedureAddress(instance, "SetHdrMetadataEXT");
		SetHdrMetadataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], VkHdrMetadataEXT*, void>)setHdrMetadataEXT;
		SetHdrMetadataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkSwapchainKHR[], ref VkHdrMetadataEXT, void>)setHdrMetadataEXT;
		var getSwapchainStatusKHR = GetInstanceProcedureAddress(instance, "GetSwapchainStatusKHR");
		GetSwapchainStatusKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSwapchainKHR, VkResult>)getSwapchainStatusKHR;
		var getPhysicalDeviceExternalFencePropertiesKHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceExternalFencePropertiesKHR");
		GetPhysicalDeviceExternalFencePropertiesKHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfoKHR*, out VkExternalFencePropertiesKHR, void>)getPhysicalDeviceExternalFencePropertiesKHR;
		GetPhysicalDeviceExternalFencePropertiesKHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceExternalFenceInfoKHR, out VkExternalFencePropertiesKHR, void>)getPhysicalDeviceExternalFencePropertiesKHR;
		var importFenceWin32HandleKHR = GetInstanceProcedureAddress(instance, "ImportFenceWin32HandleKHR");
		ImportFenceWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult>)importFenceWin32HandleKHR;
		ImportFenceWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceWin32HandleInfoKHR, VkResult>)importFenceWin32HandleKHR;
		var getFenceWin32HandleKHR = GetInstanceProcedureAddress(instance, "GetFenceWin32HandleKHR");
		GetFenceWin32HandleKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetWin32HandleInfoKHR*, out IntPtr, VkResult>)getFenceWin32HandleKHR;
		GetFenceWin32HandleKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetWin32HandleInfoKHR, out IntPtr, VkResult>)getFenceWin32HandleKHR;
		var importFenceFileDescriptorKHR = GetInstanceProcedureAddress(instance, "ImportFenceFileDescriptorKHR");
		ImportFenceFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImportFenceFdInfoKHR*, VkResult>)importFenceFileDescriptorKHR;
		ImportFenceFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImportFenceFdInfoKHR, VkResult>)importFenceFileDescriptorKHR;
		var getFenceFileDescriptorKHR = GetInstanceProcedureAddress(instance, "GetFenceFileDescriptorKHR");
		GetFenceFileDescriptorKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkFenceGetFdInfoKHR*, out int, VkResult>)getFenceFileDescriptorKHR;
		GetFenceFileDescriptorKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkFenceGetFdInfoKHR, out int, VkResult>)getFenceFileDescriptorKHR;
		var getPhysicalDeviceSurfaceCapabilities2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceCapabilities2KHR");
		GetPhysicalDeviceSurfaceCapabilities2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, out VkSurfaceCapabilities2KHR, VkResult>)getPhysicalDeviceSurfaceCapabilities2KHR;
		GetPhysicalDeviceSurfaceCapabilities2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, out VkSurfaceCapabilities2KHR, VkResult>)getPhysicalDeviceSurfaceCapabilities2KHR;
		var getPhysicalDeviceSurfaceFormats2KHR = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceSurfaceFormats2KHR");
		GetPhysicalDeviceSurfaceFormats2KHR_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_1 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, ref uint, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_2 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, uint*, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		GetPhysicalDeviceSurfaceFormats2KHR_3 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, ref VkPhysicalDeviceSurfaceInfo2KHR, ref uint, VkSurfaceFormat2KHR[], VkResult>)getPhysicalDeviceSurfaceFormats2KHR;
		var createIOSSurfaceMVK = GetInstanceProcedureAddress(instance, "CreateIOSSurfaceMVK");
		CreateIOSSurfaceMVK_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createIOSSurfaceMVK;
		CreateIOSSurfaceMVK_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkIOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createIOSSurfaceMVK;
		CreateIOSSurfaceMVK_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkIOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createIOSSurfaceMVK;
		CreateIOSSurfaceMVK_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkIOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createIOSSurfaceMVK;
		var createMacOSSurfaceMVK = GetInstanceProcedureAddress(instance, "CreateMacOSSurfaceMVK");
		CreateMacOSSurfaceMVK_0 = (delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_1 = (delegate* unmanaged[Cdecl]<VkInstance, VkMacOSSurfaceCreateInfoMVK*, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_2 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, VkAllocationCallbacks*, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		CreateMacOSSurfaceMVK_3 = (delegate* unmanaged[Cdecl]<VkInstance, ref VkMacOSSurfaceCreateInfoMVK, ref VkAllocationCallbacks, out VkSurfaceKHR, VkResult>)createMacOSSurfaceMVK;
		var commandSetSampleLocationsEXT = GetInstanceProcedureAddress(instance, "CommandSetSampleLocationsEXT");
		CommandSetSampleLocationsEXT_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSampleLocationsInfoEXT*, void>)commandSetSampleLocationsEXT;
		CommandSetSampleLocationsEXT_1 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, ref VkSampleLocationsInfoEXT, void>)commandSetSampleLocationsEXT;
		var getPhysicalDeviceMultisamplePropertiesEXT = GetInstanceProcedureAddress(instance, "GetPhysicalDeviceMultisamplePropertiesEXT");
		GetPhysicalDeviceMultisamplePropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkPhysicalDevice, VkSampleCountFlags, out VkMultisamplePropertiesEXT, void>)getPhysicalDeviceMultisamplePropertiesEXT;
		var getImageMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetImageMemoryRequirements2KHR");
		GetImageMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2KHR*, out VkMemoryRequirements2KHR, void>)getImageMemoryRequirements2KHR;
		GetImageMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageMemoryRequirementsInfo2KHR, out VkMemoryRequirements2KHR, void>)getImageMemoryRequirements2KHR;
		var getBufferMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetBufferMemoryRequirements2KHR");
		GetBufferMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2KHR*, out VkMemoryRequirements2KHR, void>)getBufferMemoryRequirements2KHR;
		GetBufferMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkBufferMemoryRequirementsInfo2KHR, out VkMemoryRequirements2KHR, void>)getBufferMemoryRequirements2KHR;
		var getImageSparseMemoryRequirements2KHR = GetInstanceProcedureAddress(instance, "GetImageSparseMemoryRequirements2KHR");
		GetImageSparseMemoryRequirements2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2KHR*, uint*, VkSparseImageMemoryRequirements2KHR[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2KHR*, ref uint, VkSparseImageMemoryRequirements2KHR[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2KHR, uint*, VkSparseImageMemoryRequirements2KHR[], void>)getImageSparseMemoryRequirements2KHR;
		GetImageSparseMemoryRequirements2KHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkImageSparseMemoryRequirementsInfo2KHR, ref uint, VkSparseImageMemoryRequirements2KHR[], void>)getImageSparseMemoryRequirements2KHR;
		var createSamplerYcbcrConversionKHR = GetInstanceProcedureAddress(instance, "CreateSamplerYcbcrConversionKHR");
		CreateSamplerYcbcrConversionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfoKHR*, VkAllocationCallbacks*, out VkSamplerYcbcrConversionKHR, VkResult>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfoKHR*, ref VkAllocationCallbacks, out VkSamplerYcbcrConversionKHR, VkResult>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfoKHR, VkAllocationCallbacks*, out VkSamplerYcbcrConversionKHR, VkResult>)createSamplerYcbcrConversionKHR;
		CreateSamplerYcbcrConversionKHR_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkSamplerYcbcrConversionCreateInfoKHR, ref VkAllocationCallbacks, out VkSamplerYcbcrConversionKHR, VkResult>)createSamplerYcbcrConversionKHR;
		var destroySamplerYcbcrConversionKHR = GetInstanceProcedureAddress(instance, "DestroySamplerYcbcrConversionKHR");
		DestroySamplerYcbcrConversionKHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionKHR, VkAllocationCallbacks*, void>)destroySamplerYcbcrConversionKHR;
		DestroySamplerYcbcrConversionKHR_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionKHR, ref VkAllocationCallbacks, void>)destroySamplerYcbcrConversionKHR;
		var bindBufferMemory2KHR = GetInstanceProcedureAddress(instance, "BindBufferMemory2KHR");
		BindBufferMemory2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfoKHR[], VkResult>)bindBufferMemory2KHR;
		var bindImageMemory2KHR = GetInstanceProcedureAddress(instance, "BindImageMemory2KHR");
		BindImageMemory2KHR_0 = (delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfoKHR[], VkResult>)bindImageMemory2KHR;
		var createValidationCacheEXT = GetInstanceProcedureAddress(instance, "CreateValidationCacheEXT");
		CreateValidationCacheEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheCreateInfoEXT*, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_2 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, VkAllocationCallbacks*, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		CreateValidationCacheEXT_3 = (delegate* unmanaged[Cdecl]<VkDevice, ref VkValidationCacheCreateInfoEXT, ref VkAllocationCallbacks, out VkValidationCacheEXT, VkResult>)createValidationCacheEXT;
		var destroyValidationCacheEXT = GetInstanceProcedureAddress(instance, "DestroyValidationCacheEXT");
		DestroyValidationCacheEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)destroyValidationCacheEXT;
		DestroyValidationCacheEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref VkAllocationCallbacks, void>)destroyValidationCacheEXT;
		var mergeValidationCachesEXT = GetInstanceProcedureAddress(instance, "MergeValidationCachesEXT");
		MergeValidationCachesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT[], VkResult>)mergeValidationCachesEXT;
		var getValidationCacheDataEXT = GetInstanceProcedureAddress(instance, "GetValidationCacheDataEXT");
		GetValidationCacheDataEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, nuint*, void*, VkResult>)getValidationCacheDataEXT;
		GetValidationCacheDataEXT_1 = (delegate* unmanaged[Cdecl]<VkDevice, VkValidationCacheEXT, ref nuint, void*, VkResult>)getValidationCacheDataEXT;
		var getMemoryHostPointerPropertiesEXT = GetInstanceProcedureAddress(instance, "GetMemoryHostPointerPropertiesEXT");
		GetMemoryHostPointerPropertiesEXT_0 = (delegate* unmanaged[Cdecl]<VkDevice, VkExternalMemoryHandleTypeFlagsKHR, void*, out VkMemoryHostPointerPropertiesEXT, VkResult>)getMemoryHostPointerPropertiesEXT;
		var commandWriteBufferMarkerAMD = GetInstanceProcedureAddress(instance, "CommandWriteBufferMarkerAMD");
		CommandWriteBufferMarkerAMD_0 = (delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, VkDeviceSize, uint, void>)commandWriteBufferMarkerAMD;
	}
}
